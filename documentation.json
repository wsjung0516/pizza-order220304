{
    "pipes": [],
    "interfaces": [
        {
            "name": "Pizza",
            "id": "interface-Pizza-7307c33b9a9b6be2b2173ed093722d85c11593f6a4d1285729d995f6544344731ac938a3fa48b92c2af0dda1cd3adacd9c8ee6a853c750435cd52fe0e0fa35fb",
            "file": "src/app/models/pizza.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Topping } from './topping.model';\r\nimport { InjectionToken} from '@angular/core';\r\n\r\nexport interface Pizza {\r\n  id?: number;\r\n  name?: string;\r\n  toppings?: Topping[];\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "toppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Topping[]",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PizzasStateModel",
            "id": "interface-PizzasStateModel-5c03ab2262952b574d8abe8783acdf1517a497db94debc1300982efeab032ac8c3972519bcfb18a7e275f10c42193be9849159f128b700c31a2f66a2981f3043",
            "file": "src/app/state/pizzas.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { asapScheduler, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nimport {Pizza, Topping} from '../models';\r\nimport { PizzasService } from '../services';\r\nimport {\r\n  CreatePizza,\r\n  CreatePizzaFail,\r\n  CreatePizzaSuccess,\r\n  LoadPizzas,\r\n  LoadPizzasFail,\r\n  LoadPizzasSuccess, RemovePizza, RemovePizzaFail, RemovePizzaSuccess,\r\n  SelectPizza, UpdatePizza, UpdatePizzaFail, UpdatePizzaSuccess\r\n} from './pizzas.actions';\r\nimport {Navigate} from '@ngxs/router-plugin';\r\nimport {Injectable} from \"@angular/core\";\r\n\r\n// -----pizzas model --------\r\nexport class Pizzac implements Pizza{\r\n  id: number | undefined;\r\n  name: string | undefined;\r\n  toppings: Topping[] | undefined;\r\n}\r\n\r\nexport interface PizzasStateModel {\r\n  pizzas: Pizza[];\r\n  loaded: boolean;\r\n  loading: boolean;\r\n  selectedPizzaId: number;\r\n}\r\n// --- pizzas state : initialState---\r\n@State<PizzasStateModel>({\r\n  name: 'pizzasState',\r\n  defaults: {\r\n    pizzas: [],\r\n    loaded: false,\r\n    loading: false,\r\n    selectedPizzaId: 0\r\n  }\r\n})\r\n@Injectable()\r\nexport class PizzasState {\r\n  // temporary for localStorage version\r\n  temp_id:number = 10;\r\n\r\n  constructor(private pizzaService: PizzasService,\r\n              ) {}\r\n  @Selector()\r\n  static pizzas(state: PizzasStateModel) {\r\n    return state.pizzas;\r\n  }\r\n  @Selector()\r\n  static loaded(state: PizzasStateModel) {\r\n    return state.loaded;\r\n  }\r\n\r\n  @Selector()\r\n  static SelectedPizza(state: PizzasStateModel): Pizza {\r\n    //\r\n    return <Pizza>state.pizzas.find(\r\n      (pizza: Pizza) => pizza.id === state.selectedPizzaId\r\n    );\r\n  }\r\n  //---------------- load pizza ----------\r\n  @Action(LoadPizzas)\r\n  loadPizzas({ patchState, dispatch }: StateContext<PizzasStateModel>) {\r\n    patchState({ loading: true });\r\n    return this.pizzaService\r\n      .getPizzas()\r\n      .pipe(\r\n        map((pizzas: Pizza[]) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new LoadPizzasSuccess(pizzas))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(LoadPizzasSuccess)\r\n  loadPizzasSuccess(\r\n    { patchState }: StateContext<PizzasStateModel>,\r\n    { payload }: LoadPizzasSuccess\r\n  ) {\r\n    patchState({ pizzas: payload, loaded: true, loading: false });\r\n  }\r\n\r\n  @Action(LoadPizzasFail)\r\n  loadPizzasFail(\r\n    { dispatch }: StateContext<PizzasStateModel>,\r\n    { payload }: LoadPizzasFail\r\n  ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n\r\n  // ---- selected Pizza ----\r\n  @Action(SelectPizza)\r\n  selectedPizza(\r\n    { patchState }: StateContext<PizzasStateModel>,  { payload }: SelectPizza ) {\r\n    patchState({ selectedPizzaId: payload });\r\n  }\r\n  //---------------- create pizza ----------\r\n  @Action(CreatePizza)\r\n  createPizza({ patchState, dispatch }: StateContext<PizzasStateModel>, {payload}:CreatePizza) {\r\n    patchState({ loading: true });\r\n    return this.pizzaService\r\n      .createPizza(payload)\r\n      .pipe(\r\n        map((pizza: Pizza) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new CreatePizzaSuccess(pizza))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(CreatePizzaSuccess)\r\n  createPizzaSuccess(\r\n    { patchState,getState, dispatch }: StateContext<PizzasStateModel>, {payload}: any ,CreatePizzaSuccess: any ) {\r\n    this.temp_id = this.temp_id + 1;\r\n    payload.id = this.temp_id;\r\n    patchState({ pizzas:[...getState().pizzas,payload], loaded: true, loading: false });\r\n    dispatch(new Navigate(['./products']));\r\n\r\n  }\r\n\r\n  @Action(CreatePizzaFail)\r\n  createPizzaFail(\r\n    { dispatch }: StateContext<PizzasStateModel> ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n  //---------------- update pizza ----------\r\n  @Action(UpdatePizza)\r\n  updatePizza({ patchState, dispatch }: StateContext<PizzasStateModel>, {payload}:UpdatePizza) {\r\n    patchState({ loading: true });\r\n    return this.pizzaService\r\n      .updatePizza(payload)\r\n      .pipe(\r\n        map((pizza: Pizza) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new UpdatePizzaSuccess(pizza))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(UpdatePizzaSuccess)\r\n  updatePizzaSuccess(\r\n    { patchState,getState,dispatch }: StateContext<PizzasStateModel>, {payload}: UpdatePizzaSuccess ) {\r\n    //\r\n    const pizzas = getState().pizzas.filter(val=>val.id !== payload.id);\r\n    patchState({pizzas:[ ...pizzas,payload], loaded: true, loading: false });\r\n    dispatch(new Navigate(['./products']));\r\n  }\r\n\r\n  @Action(UpdatePizzaFail)\r\n  updatePizzaFail(\r\n    { dispatch }: StateContext<PizzasStateModel> ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n  //---------------- remove pizza ----------\r\n  payload:any = null;\r\n  @Action(RemovePizza)\r\n  removePizza({ patchState, dispatch }: StateContext<PizzasStateModel>, {payload}:RemovePizza) {\r\n    patchState({ loading: true });\r\n    this.payload = payload;\r\n    return this.pizzaService\r\n      .removePizza(payload)\r\n      .pipe(\r\n        map((pizza: Pizza) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new RemovePizzaSuccess(pizza))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(RemovePizzaSuccess)\r\n  removePizzaSuccess(\r\n    { patchState,getState, dispatch }: StateContext<PizzasStateModel>, {payload}:RemovePizzaSuccess ) {\r\n    //\r\n    const pizzas = getState().pizzas.filter(val => val.id !== payload.id)\r\n    // const pizzas = getState().pizzas.filter(val => val.id !== this.payload.id)\r\n    //\r\n    this.payload = null;\r\n    patchState({ pizzas:[...pizzas],loaded: true, loading: false });\r\n    dispatch(new Navigate(['./products']));\r\n\r\n  }\r\n\r\n  @Action(RemovePizzaFail)\r\n  removePizzaFail(\r\n    { dispatch }: StateContext<PizzasStateModel> ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "loaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "pizzas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "selectedPizzaId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SequenceTopping",
            "id": "interface-SequenceTopping-256a96a2e1b09ee866c02d6e2db0a45541cfe591e9f4e031bde3369bf94401304352006d33fb332faa350e5ee06c52c67d59f60a9e0f2534d861999a307899f0",
            "file": "src/app/models/topping.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Topping {\r\n  no?: number;\r\n  id?: number;\r\n  name?: string;\r\n  // [key: string]: any;\r\n  price?: number;\r\n  count?: number;\r\n  active?: boolean;\r\n}\r\nexport interface SequenceTopping extends Topping {\r\n  image?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "Topping"
        },
        {
            "name": "Topping",
            "id": "interface-Topping-256a96a2e1b09ee866c02d6e2db0a45541cfe591e9f4e031bde3369bf94401304352006d33fb332faa350e5ee06c52c67d59f60a9e0f2534d861999a307899f0",
            "file": "src/app/models/topping.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Topping {\r\n  no?: number;\r\n  id?: number;\r\n  name?: string;\r\n  // [key: string]: any;\r\n  price?: number;\r\n  count?: number;\r\n  active?: boolean;\r\n}\r\nexport interface SequenceTopping extends Topping {\r\n  image?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "no",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ToppingsStateModel",
            "id": "interface-ToppingsStateModel-47871adc7710c49bbd9cd3e351deca8c4bf9697ba83ff6e5033e6b1f652600de04bc1e5b10584ff6c158c68c16112f240ddf99034364b19a9553d31c03db06b0",
            "file": "src/app/state/toppings.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { asapScheduler, of } from 'rxjs';\r\nimport {catchError, map, tap} from 'rxjs/operators';\r\n\r\nimport { Topping } from '../models';\r\nimport { ToppingsService } from '../services';\r\nimport {\r\n  LoadToppings,\r\n  LoadToppingsFail,\r\n  LoadToppingsSuccess,\r\n  UpdateToppings, UpdateToppingsFail,\r\n  UpdateToppingsSuccess,\r\n  VisualiseToppings\r\n} from './toppings.actions';\r\nimport {PizzasStateModel} from './pizzas.state';\r\nimport {Injectable} from \"@angular/core\";\r\n\r\nexport interface ToppingsStateModel {\r\n  toppings: Topping[];\r\n  selectedToppings: Topping[];\r\n  loaded: boolean;\r\n  loading: boolean;\r\n}\r\n\r\n@State<ToppingsStateModel>({\r\n  name: 'toppingsState',\r\n  defaults: {\r\n    toppings: [],\r\n    selectedToppings: [],\r\n    loaded: false,\r\n    loading: false\r\n  }\r\n})\r\n@Injectable()\r\nexport class ToppingsState {\r\n  constructor(private toppingsSerive: ToppingsService) {}\r\n\r\n  @Selector()\r\n  static toppings(state: ToppingsStateModel): Topping[] {\r\n    return state.toppings;\r\n  }\r\n  @Selector()\r\n  static selectedToppings(state: ToppingsStateModel): Topping[] {\r\n    return state.selectedToppings;\r\n  }\r\n/*\r\n  @Selector()\r\n  static selectedToppingImages(state: ToppingsStateModel): any[] {\r\n    return state.selectedToppingImages;\r\n  }\r\n*/\r\n  // load Toppings\r\n  @Action(LoadToppings)\r\n  loadToppings({ patchState, dispatch }: StateContext<ToppingsStateModel>) {\r\n    patchState({ loading: true });\r\n    return this.toppingsSerive.getToppings().pipe(\r\n      tap(val=>console.log('getToppings--val-->',val)),\r\n      map((toppings: Topping[]) => {\r\n        asapScheduler.schedule(() =>\r\n          dispatch(new LoadToppingsSuccess(toppings))\r\n        );\r\n      }),\r\n      catchError(err =>\r\n        of(asapScheduler.schedule(() => dispatch(new LoadToppingsFail())))\r\n      )\r\n    );\r\n  }\r\n\r\n  @Action(LoadToppingsSuccess)\r\n  loadToppingSuccess(\r\n    { patchState }: StateContext<ToppingsStateModel>,\r\n    action: LoadToppingsSuccess\r\n  ) {\r\n    console.log('loadToppingSuccess action-->',action);\r\n    patchState({\r\n      toppings: action.payload,\r\n      loaded: true,\r\n      loading: false\r\n    });\r\n  }\r\n\r\n  @Action(LoadToppingsFail)\r\n  loadToppingsFail({ patchState }: StateContext<ToppingsStateModel>) {\r\n    console.log('loadToppingFailure-->');\r\n    patchState({ loading: false, loaded: false });\r\n  }\r\n\r\n  // update Toppings\r\n  @Action(UpdateToppings)\r\n  updateToppings({ patchState, dispatch }: StateContext<ToppingsStateModel>) {\r\n/*\r\n    patchState({ loading: true });\r\n    return this.toppingsSerive.getToppings().pipe(\r\n      tap(val=>console.log('getToppings--val-->',val)),\r\n      map((toppings: Topping[]) => {\r\n        asapScheduler.schedule(() =>\r\n          dispatch(new UpdateToppingsSuccess(toppings))\r\n        );\r\n      }),\r\n      catchError(err =>\r\n        of(asapScheduler.schedule(() => dispatch(new UpdateToppingsFail())))\r\n      )\r\n    );\r\n*/\r\n  }\r\n\r\n  @Action(UpdateToppingsSuccess)\r\n  updateToppingSuccess(\r\n    { patchState, getState }: StateContext<ToppingsStateModel>,\r\n    action: UpdateToppingsSuccess\r\n  ) {\r\n    console.log('UpdateToppingSuccess action-->',action, action.payload);\r\n\r\n    patchState({\r\n      toppings: getState().toppings,\r\n      selectedToppings: action.payload,\r\n      loaded: true,\r\n      loading: false\r\n    });\r\n  }\r\n\r\n  @Action(UpdateToppingsFail)\r\n  updateToppingsFail({ patchState }: StateContext<ToppingsStateModel>) {\r\n    console.log('loadToppingFailure-->');\r\n    patchState({ loading: false, loaded: false });\r\n  }\r\n\r\n  // ----visualise toppings -------\r\n/*\r\n  @Action(VisualiseToppings)\r\n  visualiseToppings( { patchState }: StateContext<ToppingsStateModel>,  action: VisualiseToppings ) {\r\n    patchState({ selectedToppings: action.payload });\r\n  }\r\n*/\r\n/*\r\n  @Action(VisualiseToppings)\r\n  visualiseToppings( {patchState}: StateContext<PizzasStateModel>,  action: VisualiseToppings ) {\r\n    patchState({ pizzas : action.payload})\r\n  }\r\n*/\r\n}\r\n",
            "properties": [
                {
                    "name": "loaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "selectedToppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Topping[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "toppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Topping[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "PizzasService",
            "id": "injectable-PizzasService-eb7ac6b833e43c676f5c5e16020c6ab0b9aa659453da946c93bc4e6a8ef83b836dff016c0ee973f8c4334c7dffe64c77793ab5ab651b1adc52ffda330c0d0884",
            "file": "src/app/services/pizzas.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createPizza",
                    "args": [
                        {
                            "name": "payload",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Pizza>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPizzas",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Pizza[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removePizza",
                    "args": [
                        {
                            "name": "payload",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Pizza>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePizza",
                    "args": [
                        {
                            "name": "payload",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Pizza>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport {Observable, throwError} from 'rxjs';\r\nimport {catchError, map} from 'rxjs/operators';\r\n\r\nimport { Pizza } from '../models';\r\n\r\n@Injectable()\r\nexport class PizzasService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getPizzas(): Observable<Pizza[]> {\r\n    return this.http\r\n      .get<Pizza[]>(`assets/json/db.json`)\r\n            // .get<Pizza[]>(`/api/pizzas`)\r\n      .pipe(\r\n        map( (val: any) =>val['pizzas']),\r\n        catchError((error: any) => throwError(error.json())));\r\n  }\r\n\r\n  createPizza(payload: Pizza): Observable<Pizza> {\r\n    return this.http\r\n      .post<Pizza>(`http://localhost:3000/pizzas`, payload)\r\n      .pipe(catchError((error: any) => throwError(error.json())));\r\n  }\r\n\r\n  updatePizza(payload: Pizza): Observable<Pizza> {\r\n    console.log('updatePizza-->',payload);\r\n    return this.http\r\n      .put<Pizza>(`http://localhost:3000/pizzas/${payload.id}`, payload)\r\n      .pipe(catchError((error: any) => throwError(error.json())));\r\n  }\r\n\r\n  removePizza(payload: Pizza): Observable<Pizza> {\r\n    return this.http\r\n      .delete<any>(`http://localhost:3000/pizzas/${payload.id}`)\r\n      .pipe(catchError((error: any) => throwError(error.json())));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PizzasState",
            "id": "injectable-PizzasState-5c03ab2262952b574d8abe8783acdf1517a497db94debc1300982efeab032ac8c3972519bcfb18a7e275f10c42193be9849159f128b700c31a2f66a2981f3043",
            "file": "src/app/state/pizzas.state.ts",
            "properties": [
                {
                    "name": "payload",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 183
                },
                {
                    "name": "temp_id",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methods": [
                {
                    "name": "createPizza",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "CreatePizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "CreatePizza"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "CreatePizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPizzaFail",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "CreatePizzaFail"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPizzaSuccess",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "CreatePizzaSuccess",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "CreatePizzaSuccess"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "CreatePizzaSuccess",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loaded",
                    "args": [
                        {
                            "name": "state",
                            "type": "PizzasStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "PizzasStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadPizzas",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "LoadPizzas"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadPizzasFail",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "LoadPizzasFail",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "LoadPizzasFail"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "LoadPizzasFail",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadPizzasSuccess",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "LoadPizzasSuccess",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "LoadPizzasSuccess"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "LoadPizzasSuccess",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pizzas",
                    "args": [
                        {
                            "name": "state",
                            "type": "PizzasStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "PizzasStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removePizza",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "RemovePizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "RemovePizza"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "RemovePizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removePizzaFail",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "RemovePizzaFail"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removePizzaSuccess",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "RemovePizzaSuccess",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "RemovePizzaSuccess"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "RemovePizzaSuccess",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedPizza",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "SelectPizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SelectPizza"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "SelectPizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "SelectedPizza",
                    "args": [
                        {
                            "name": "state",
                            "type": "PizzasStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Pizza",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "PizzasStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePizza",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "UpdatePizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "UpdatePizza"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "UpdatePizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePizzaFail",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "UpdatePizzaFail"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePizzaSuccess",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "UpdatePizzaSuccess",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "UpdatePizzaSuccess"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "UpdatePizzaSuccess",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { asapScheduler, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nimport {Pizza, Topping} from '../models';\r\nimport { PizzasService } from '../services';\r\nimport {\r\n  CreatePizza,\r\n  CreatePizzaFail,\r\n  CreatePizzaSuccess,\r\n  LoadPizzas,\r\n  LoadPizzasFail,\r\n  LoadPizzasSuccess, RemovePizza, RemovePizzaFail, RemovePizzaSuccess,\r\n  SelectPizza, UpdatePizza, UpdatePizzaFail, UpdatePizzaSuccess\r\n} from './pizzas.actions';\r\nimport {Navigate} from '@ngxs/router-plugin';\r\nimport {Injectable} from \"@angular/core\";\r\n\r\n// -----pizzas model --------\r\nexport class Pizzac implements Pizza{\r\n  id: number | undefined;\r\n  name: string | undefined;\r\n  toppings: Topping[] | undefined;\r\n}\r\n\r\nexport interface PizzasStateModel {\r\n  pizzas: Pizza[];\r\n  loaded: boolean;\r\n  loading: boolean;\r\n  selectedPizzaId: number;\r\n}\r\n// --- pizzas state : initialState---\r\n@State<PizzasStateModel>({\r\n  name: 'pizzasState',\r\n  defaults: {\r\n    pizzas: [],\r\n    loaded: false,\r\n    loading: false,\r\n    selectedPizzaId: 0\r\n  }\r\n})\r\n@Injectable()\r\nexport class PizzasState {\r\n  // temporary for localStorage version\r\n  temp_id:number = 10;\r\n\r\n  constructor(private pizzaService: PizzasService,\r\n              ) {}\r\n  @Selector()\r\n  static pizzas(state: PizzasStateModel) {\r\n    return state.pizzas;\r\n  }\r\n  @Selector()\r\n  static loaded(state: PizzasStateModel) {\r\n    return state.loaded;\r\n  }\r\n\r\n  @Selector()\r\n  static SelectedPizza(state: PizzasStateModel): Pizza {\r\n    //\r\n    return <Pizza>state.pizzas.find(\r\n      (pizza: Pizza) => pizza.id === state.selectedPizzaId\r\n    );\r\n  }\r\n  //---------------- load pizza ----------\r\n  @Action(LoadPizzas)\r\n  loadPizzas({ patchState, dispatch }: StateContext<PizzasStateModel>) {\r\n    patchState({ loading: true });\r\n    return this.pizzaService\r\n      .getPizzas()\r\n      .pipe(\r\n        map((pizzas: Pizza[]) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new LoadPizzasSuccess(pizzas))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(LoadPizzasSuccess)\r\n  loadPizzasSuccess(\r\n    { patchState }: StateContext<PizzasStateModel>,\r\n    { payload }: LoadPizzasSuccess\r\n  ) {\r\n    patchState({ pizzas: payload, loaded: true, loading: false });\r\n  }\r\n\r\n  @Action(LoadPizzasFail)\r\n  loadPizzasFail(\r\n    { dispatch }: StateContext<PizzasStateModel>,\r\n    { payload }: LoadPizzasFail\r\n  ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n\r\n  // ---- selected Pizza ----\r\n  @Action(SelectPizza)\r\n  selectedPizza(\r\n    { patchState }: StateContext<PizzasStateModel>,  { payload }: SelectPizza ) {\r\n    patchState({ selectedPizzaId: payload });\r\n  }\r\n  //---------------- create pizza ----------\r\n  @Action(CreatePizza)\r\n  createPizza({ patchState, dispatch }: StateContext<PizzasStateModel>, {payload}:CreatePizza) {\r\n    patchState({ loading: true });\r\n    return this.pizzaService\r\n      .createPizza(payload)\r\n      .pipe(\r\n        map((pizza: Pizza) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new CreatePizzaSuccess(pizza))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(CreatePizzaSuccess)\r\n  createPizzaSuccess(\r\n    { patchState,getState, dispatch }: StateContext<PizzasStateModel>, {payload}: any ,CreatePizzaSuccess: any ) {\r\n    this.temp_id = this.temp_id + 1;\r\n    payload.id = this.temp_id;\r\n    patchState({ pizzas:[...getState().pizzas,payload], loaded: true, loading: false });\r\n    dispatch(new Navigate(['./products']));\r\n\r\n  }\r\n\r\n  @Action(CreatePizzaFail)\r\n  createPizzaFail(\r\n    { dispatch }: StateContext<PizzasStateModel> ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n  //---------------- update pizza ----------\r\n  @Action(UpdatePizza)\r\n  updatePizza({ patchState, dispatch }: StateContext<PizzasStateModel>, {payload}:UpdatePizza) {\r\n    patchState({ loading: true });\r\n    return this.pizzaService\r\n      .updatePizza(payload)\r\n      .pipe(\r\n        map((pizza: Pizza) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new UpdatePizzaSuccess(pizza))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(UpdatePizzaSuccess)\r\n  updatePizzaSuccess(\r\n    { patchState,getState,dispatch }: StateContext<PizzasStateModel>, {payload}: UpdatePizzaSuccess ) {\r\n    //\r\n    const pizzas = getState().pizzas.filter(val=>val.id !== payload.id);\r\n    patchState({pizzas:[ ...pizzas,payload], loaded: true, loading: false });\r\n    dispatch(new Navigate(['./products']));\r\n  }\r\n\r\n  @Action(UpdatePizzaFail)\r\n  updatePizzaFail(\r\n    { dispatch }: StateContext<PizzasStateModel> ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n  //---------------- remove pizza ----------\r\n  payload:any = null;\r\n  @Action(RemovePizza)\r\n  removePizza({ patchState, dispatch }: StateContext<PizzasStateModel>, {payload}:RemovePizza) {\r\n    patchState({ loading: true });\r\n    this.payload = payload;\r\n    return this.pizzaService\r\n      .removePizza(payload)\r\n      .pipe(\r\n        map((pizza: Pizza) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new RemovePizzaSuccess(pizza))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(RemovePizzaSuccess)\r\n  removePizzaSuccess(\r\n    { patchState,getState, dispatch }: StateContext<PizzasStateModel>, {payload}:RemovePizzaSuccess ) {\r\n    //\r\n    const pizzas = getState().pizzas.filter(val => val.id !== payload.id)\r\n    // const pizzas = getState().pizzas.filter(val => val.id !== this.payload.id)\r\n    //\r\n    this.payload = null;\r\n    patchState({ pizzas:[...pizzas],loaded: true, loading: false });\r\n    dispatch(new Navigate(['./products']));\r\n\r\n  }\r\n\r\n  @Action(RemovePizzaFail)\r\n  removePizzaFail(\r\n    { dispatch }: StateContext<PizzasStateModel> ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "pizzaService",
                        "type": "PizzasService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "pizzaService",
                        "type": "PizzasService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PriceService",
            "id": "injectable-PriceService-da293671dcf1542e11efe8721cb6a0a3c625c5a819a50e128497c4ab7cbc47be9bd4f4629f7f60e9db06a2e1953ecad47f218ac6c3e90b44bb770872d26852ab",
            "file": "src/app/services/price.service.ts",
            "properties": [
                {
                    "name": "counter",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "toppings$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Topping[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "ToppingsState.toppings"
                        }
                    ]
                }
            ],
            "methods": [
                {
                    "name": "calcSubTotalToppings",
                    "args": [
                        {
                            "name": "toppings",
                            "type": "Topping[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "toppings",
                            "type": "Topping[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcTotal",
                    "args": [
                        {
                            "name": "topp",
                            "type": "Topping[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "topp",
                            "type": "Topping[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {Pizza, Topping} from '../models';\r\nimport {from, Observable} from 'rxjs';\r\nimport {groupBy, map, mergeMap, pluck, tap, toArray} from 'rxjs/operators';\r\nimport {Pizzac, ToppingsState} from '../state';\r\nimport {Select} from '@ngxs/store';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PriceService {\r\n  counter = 0;\r\n  @Select(ToppingsState.toppings) toppings$: Observable<Topping[]> | undefined;\r\n\r\n  constructor() {}\r\n  calcSubTotalToppings(toppings: Topping[]) {\r\n    let id: any = null;\r\n    let name: any;\r\n    let price: number;\r\n    let data: any[] = [];\r\n    //\r\n    from( toppings).pipe(\r\n      groupBy( value => value.id),\r\n      mergeMap( group => group.pipe(toArray())),\r\n      map( value => {\r\n        value.map( v2 => {\r\n          id = v2.id;\r\n          name = v2.name;\r\n          price = v2.price;\r\n        });\r\n        data.push({id:id, name:name, count:value.length, price: price});\r\n      })\r\n    ).subscribe();\r\n    return data;\r\n  }\r\n  calcTotal(topp:Topping[]) {\r\n    //\r\n  let total: number = 0;\r\n    from(topp).pipe(\r\n      map( (p1: any) => {\r\n        // rtopp.push({ id: p1.id, name: p1.name, count: p1.count, price: parseFloat((price[p1.id-1].price * p1.count).toFixed(1))});\r\n        let tval = p1.price * p1.count;\r\n        return total = total + tval;\r\n        }\r\n       )).subscribe();\r\n       return (total * 1000).toLocaleString();\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "type": "injectable"
        },
        {
            "name": "SelectedItemService",
            "id": "injectable-SelectedItemService-8b9b58af5cea59a255790aa0ea2f952fd96058be714d615d6cbf15c57984271264116e692a72ce2c7a90e62db3a89e76d6ce2108d95c2abb7552c50766508b1e",
            "file": "src/app/services/selected-item.service.ts",
            "properties": [
                {
                    "name": "overlayRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayRef | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "positions",
                    "defaultValue": "[\r\n    new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\r\n    new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methods": [
                {
                    "name": "getInjector",
                    "args": [
                        {
                            "name": "data",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentInjector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentInjector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOverlayConfig",
                    "args": [
                        {
                            "name": "origin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOverlayPosition",
                    "args": [
                        {
                            "name": "origin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSelectedToppings",
                    "args": [
                        {
                            "name": "origin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pizza",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayRef",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pizza",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Inject, Injectable, InjectionToken, Injector} from '@angular/core';\r\nimport {ComponentPortal, PortalInjector} from '@angular/cdk/portal';\r\nimport {ConnectionPositionPair, Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\r\nimport {Pizza} from \"../models\";\r\nimport {\r\n  SelectedToppingListComponent\r\n} from \"../components/selected-toppings/selected-topping-list/selected-topping-list.component\";\r\nexport const PIZZA_CONFIG_TOKEN = new InjectionToken<Pizza>('PIZZA_CONFIG_TOKEN');\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SelectedItemService {\r\n  private overlayRef: OverlayRef | undefined;\r\n// Toppings for temporary display before saving;\r\n\r\n  constructor(private overlay: Overlay,\r\n              private parentInjector: Injector,\r\n               ) {\r\n    // this.tToppings$ = new Subject<Topping[]>();\r\n\r\n\r\n  }\r\n\r\n  openSelectedToppings(origin: any, pizza: Pizza): OverlayRef {\r\n    this.overlayRef = this.overlay.create( this.getOverlayConfig(origin));\r\n    const injector = this.getInjector(pizza, this.parentInjector);\r\n    const portal = new ComponentPortal(SelectedToppingListComponent,null,injector);\r\n    this.overlayRef.attach(portal);\r\n    return  this.overlayRef;\r\n  }\r\n  getOverlayConfig(origin : any) {\r\n    return new OverlayConfig({\r\n      width: '200px',\r\n      height: '100px',\r\n      positionStrategy: this.getOverlayPosition(origin),\r\n    })\r\n  }\r\n  positions = [\r\n    new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\r\n    new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })\r\n  ];\r\n  getOverlayPosition(origin: any) {\r\n    return this.overlay.position()\r\n      .flexibleConnectedTo(origin)\r\n      .withPositions(this.positions)\r\n      // .withPositions(this.getPositions())\r\n      .withFlexibleDimensions(false)\r\n      .withPush(false)\r\n  }\r\n  getInjector(data: Pizza, parentInjector: Injector) {\r\n    const tokens = new WeakMap();\r\n\r\n    tokens.set( PIZZA_CONFIG_TOKEN, data);\r\n\r\n    return new PortalInjector(parentInjector, tokens);\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "parentInjector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parentInjector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ToppingAddedService",
            "id": "injectable-ToppingAddedService-8e833c16c682568db9ec74d1d267cd59d6c9d1da40666b5921d385ac76947878eaa5f9dadf8d5911401a569421087a56bb224d1a942aa2211d94d9be03fbd052",
            "file": "src/app/services/topping-added.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToppingAddedService {\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "ToppingImageService",
            "id": "injectable-ToppingImageService-67fffe04d84148c1e0d7a288fd2b692431fe38226d90170e0c6bc342a9fdd82cfdf87a08e247ef7442a1ed4d91db6ac426ea4da4f69ce28e2d97d0731c8cc33e",
            "file": "src/app/services/topping-image.service.ts",
            "properties": [
                {
                    "name": "counter",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "setEachToppingImage",
                    "args": [
                        {
                            "name": "toppings",
                            "type": "Topping[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "toppings",
                            "type": "Topping[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {Topping} from '../models';\r\nimport {from} from 'rxjs';\r\nimport {distinct, map, pluck, takeLast, tap} from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToppingImageService {\r\n  counter:any = 0;\r\n  constructor() { }\r\n  // Before action of setting  image name, named sequence no for each topping object.\r\n  // to layering each selected toppings by z-index;\r\n  // Extract id of toppings, which was added by inserting action.\r\n  // Remove duplicated id\r\n  // Set image name to each toppings.\r\n  // Get the last array, which is duplicated by pluck function.\r\n  // Sort each topping array by the sequence no\r\n  setEachToppingImage(toppings:Topping[]) {\r\n    let arr: any[] = [];\r\n    let no = 1;\r\n    let data: any[] = [];\r\n    if( !toppings ) { // @ts-ignore\r\n      return ;\r\n    }\r\n    toppings.map( val => data.push ({ no:no++, id:val.id, name: val.name }));\r\n    from(data).pipe(\r\n      pluck('id'),\r\n      distinct(),\r\n      tap ( v1 => {\r\n        let count = 1;\r\n        data.map( v2 => {\r\n          if( v2.id === v1) {\r\n            arr.push({no: v2.no, id:v2.id, name:v2.name, image: v2.name+'_'+ (count++).toString()})\r\n          }\r\n        });\r\n      }),\r\n      map(() => arr ),\r\n      takeLast(1),\r\n    ).subscribe();\r\n    arr.sort((a,b) => {return a.no < b.no ? -1 : a.no > b.no ? 1 : 0; });\r\n    // console.log('arr',arr)\r\n    data = [];\r\n    arr.map( val => data.push({id:val.id, name: val.name, image: val.image }));\r\n    return data;\r\n\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "ToppingsService",
            "id": "injectable-ToppingsService-3c405a635dceed321bfca890bc25fa1f860a1d5a167cba0535756f1d49b07ddd5650c60de5738f7de5b1158d4827962a6803ab9d09d94cae1daa366f4fcd11f1",
            "file": "src/app/services/toppings.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getToppings",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Topping[]>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport {catchError, map, tap} from 'rxjs/operators';\r\n// import 'rxjs/operators';\r\n// import 'rxjs/add/observable/throw';\r\n\r\nimport { Topping } from '../models';\r\nimport {throwError} from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class ToppingsService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getToppings(): Observable<Topping[]> {\r\n    return this.http\r\n      .get<Topping[]>(`assets/json/db.json`)\r\n      .pipe(\r\n        tap( val=> console.log('read toppings', val)),\r\n        map( (val: any)=> val['toppings']),\r\n        catchError((error: any) => throwError(error.json())));\r\n  }\r\n/*\r\n  getToppings(): Observable<Topping[]> {\r\n    return this.http\r\n      .get<Topping[]>(`http://localhost:3000/toppings`)\r\n      .pipe(\r\n        tap( val=> console.log('read toppings', val)),\r\n        catchError((error: any) => Observable.throw(error.json())));\r\n  }\r\n*/\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ToppingsState",
            "id": "injectable-ToppingsState-47871adc7710c49bbd9cd3e351deca8c4bf9697ba83ff6e5033e6b1f652600de04bc1e5b10584ff6c158c68c16112f240ddf99034364b19a9553d31c03db06b0",
            "file": "src/app/state/toppings.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "loadToppings",
                    "args": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "LoadToppings"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadToppingsFail",
                    "args": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "LoadToppingsFail"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadToppingSuccess",
                    "args": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "LoadToppingsSuccess",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "LoadToppingsSuccess"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "LoadToppingsSuccess",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedToppings",
                    "args": [
                        {
                            "name": "state",
                            "type": "ToppingsStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Topping[]",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "ToppingsStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toppings",
                    "args": [
                        {
                            "name": "state",
                            "type": "ToppingsStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Topping[]",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "ToppingsStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateToppings",
                    "args": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "UpdateToppings"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateToppingsFail",
                    "args": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "UpdateToppingsFail"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateToppingSuccess",
                    "args": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "UpdateToppingsSuccess",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "UpdateToppingsSuccess"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "UpdateToppingsSuccess",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { asapScheduler, of } from 'rxjs';\r\nimport {catchError, map, tap} from 'rxjs/operators';\r\n\r\nimport { Topping } from '../models';\r\nimport { ToppingsService } from '../services';\r\nimport {\r\n  LoadToppings,\r\n  LoadToppingsFail,\r\n  LoadToppingsSuccess,\r\n  UpdateToppings, UpdateToppingsFail,\r\n  UpdateToppingsSuccess,\r\n  VisualiseToppings\r\n} from './toppings.actions';\r\nimport {PizzasStateModel} from './pizzas.state';\r\nimport {Injectable} from \"@angular/core\";\r\n\r\nexport interface ToppingsStateModel {\r\n  toppings: Topping[];\r\n  selectedToppings: Topping[];\r\n  loaded: boolean;\r\n  loading: boolean;\r\n}\r\n\r\n@State<ToppingsStateModel>({\r\n  name: 'toppingsState',\r\n  defaults: {\r\n    toppings: [],\r\n    selectedToppings: [],\r\n    loaded: false,\r\n    loading: false\r\n  }\r\n})\r\n@Injectable()\r\nexport class ToppingsState {\r\n  constructor(private toppingsSerive: ToppingsService) {}\r\n\r\n  @Selector()\r\n  static toppings(state: ToppingsStateModel): Topping[] {\r\n    return state.toppings;\r\n  }\r\n  @Selector()\r\n  static selectedToppings(state: ToppingsStateModel): Topping[] {\r\n    return state.selectedToppings;\r\n  }\r\n/*\r\n  @Selector()\r\n  static selectedToppingImages(state: ToppingsStateModel): any[] {\r\n    return state.selectedToppingImages;\r\n  }\r\n*/\r\n  // load Toppings\r\n  @Action(LoadToppings)\r\n  loadToppings({ patchState, dispatch }: StateContext<ToppingsStateModel>) {\r\n    patchState({ loading: true });\r\n    return this.toppingsSerive.getToppings().pipe(\r\n      tap(val=>console.log('getToppings--val-->',val)),\r\n      map((toppings: Topping[]) => {\r\n        asapScheduler.schedule(() =>\r\n          dispatch(new LoadToppingsSuccess(toppings))\r\n        );\r\n      }),\r\n      catchError(err =>\r\n        of(asapScheduler.schedule(() => dispatch(new LoadToppingsFail())))\r\n      )\r\n    );\r\n  }\r\n\r\n  @Action(LoadToppingsSuccess)\r\n  loadToppingSuccess(\r\n    { patchState }: StateContext<ToppingsStateModel>,\r\n    action: LoadToppingsSuccess\r\n  ) {\r\n    console.log('loadToppingSuccess action-->',action);\r\n    patchState({\r\n      toppings: action.payload,\r\n      loaded: true,\r\n      loading: false\r\n    });\r\n  }\r\n\r\n  @Action(LoadToppingsFail)\r\n  loadToppingsFail({ patchState }: StateContext<ToppingsStateModel>) {\r\n    console.log('loadToppingFailure-->');\r\n    patchState({ loading: false, loaded: false });\r\n  }\r\n\r\n  // update Toppings\r\n  @Action(UpdateToppings)\r\n  updateToppings({ patchState, dispatch }: StateContext<ToppingsStateModel>) {\r\n/*\r\n    patchState({ loading: true });\r\n    return this.toppingsSerive.getToppings().pipe(\r\n      tap(val=>console.log('getToppings--val-->',val)),\r\n      map((toppings: Topping[]) => {\r\n        asapScheduler.schedule(() =>\r\n          dispatch(new UpdateToppingsSuccess(toppings))\r\n        );\r\n      }),\r\n      catchError(err =>\r\n        of(asapScheduler.schedule(() => dispatch(new UpdateToppingsFail())))\r\n      )\r\n    );\r\n*/\r\n  }\r\n\r\n  @Action(UpdateToppingsSuccess)\r\n  updateToppingSuccess(\r\n    { patchState, getState }: StateContext<ToppingsStateModel>,\r\n    action: UpdateToppingsSuccess\r\n  ) {\r\n    console.log('UpdateToppingSuccess action-->',action, action.payload);\r\n\r\n    patchState({\r\n      toppings: getState().toppings,\r\n      selectedToppings: action.payload,\r\n      loaded: true,\r\n      loading: false\r\n    });\r\n  }\r\n\r\n  @Action(UpdateToppingsFail)\r\n  updateToppingsFail({ patchState }: StateContext<ToppingsStateModel>) {\r\n    console.log('loadToppingFailure-->');\r\n    patchState({ loading: false, loaded: false });\r\n  }\r\n\r\n  // ----visualise toppings -------\r\n/*\r\n  @Action(VisualiseToppings)\r\n  visualiseToppings( { patchState }: StateContext<ToppingsStateModel>,  action: VisualiseToppings ) {\r\n    patchState({ selectedToppings: action.payload });\r\n  }\r\n*/\r\n/*\r\n  @Action(VisualiseToppings)\r\n  visualiseToppings( {patchState}: StateContext<PizzasStateModel>,  action: VisualiseToppings ) {\r\n    patchState({ pizzas : action.payload})\r\n  }\r\n*/\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toppingsSerive",
                        "type": "ToppingsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "toppingsSerive",
                        "type": "ToppingsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ToppingTotalService",
            "id": "injectable-ToppingTotalService-bc9aebd898ec26e8e958eb2b93c166d38f3bdbcbd3658d36ebe0127ed55aa1484baba1451d19b37fad8829839a8fc11f2766131ca67e7978839dfb5dbd15ea2e",
            "file": "src/app/services/topping-total.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToppingTotalService {\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "CreatePizza",
            "id": "class-CreatePizza-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Create Pizza'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreatePizzaFail",
            "id": "class-CreatePizzaFail-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Create Pizza Fail'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreatePizzaSuccess",
            "id": "class-CreatePizzaSuccess-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Create Pizza Success'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoadPizzas",
            "id": "class-LoadPizzas-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Load Pizzas'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoadPizzasFail",
            "id": "class-LoadPizzasFail-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Load Pizzas Fail'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoadPizzasSuccess",
            "id": "class-LoadPizzasSuccess-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Pizza[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Pizza[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza[]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Load Pizzas Success'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoadToppings",
            "id": "class-LoadToppings-aa26f85bb40e17df7dbbabe250b5c4eeb40223e027222a565f08138a973a409d8c6c08ee7532f5878447cec8ce9f9fe695ab396343b81401906a5f26c5a77451",
            "file": "src/app/state/toppings.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Topping } from '../models/topping.model';\r\n\r\n// --- topping actions----\r\nexport class LoadToppings {\r\n  static readonly type = '[Toppings] Load Toppings';\r\n}\r\n\r\nexport class LoadToppingsSuccess {\r\n  static readonly type = '[Toppings] Load Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class LoadToppingsFail {\r\n  static readonly type = '[Toppings] Load Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\nexport class UpdateToppings {\r\n  static readonly type = '[Toppings] Update Toppings';\r\n}\r\n\r\nexport class UpdateToppingsSuccess {\r\n  static readonly type = '[Toppings] Update Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class UpdateToppingsFail {\r\n  static readonly type = '[Toppings] Update Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\nexport class VisualiseToppings {\r\n  static readonly type = '[Toppings] Visualize Topping';\r\n  // constructor(public readonly payload: Topping[]) {}\r\n  constructor(public readonly payload: number[]) {}\r\n}\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Toppings] Load Toppings'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoadToppingsFail",
            "id": "class-LoadToppingsFail-aa26f85bb40e17df7dbbabe250b5c4eeb40223e027222a565f08138a973a409d8c6c08ee7532f5878447cec8ce9f9fe695ab396343b81401906a5f26c5a77451",
            "file": "src/app/state/toppings.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Topping } from '../models/topping.model';\r\n\r\n// --- topping actions----\r\nexport class LoadToppings {\r\n  static readonly type = '[Toppings] Load Toppings';\r\n}\r\n\r\nexport class LoadToppingsSuccess {\r\n  static readonly type = '[Toppings] Load Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class LoadToppingsFail {\r\n  static readonly type = '[Toppings] Load Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\nexport class UpdateToppings {\r\n  static readonly type = '[Toppings] Update Toppings';\r\n}\r\n\r\nexport class UpdateToppingsSuccess {\r\n  static readonly type = '[Toppings] Update Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class UpdateToppingsFail {\r\n  static readonly type = '[Toppings] Update Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\nexport class VisualiseToppings {\r\n  static readonly type = '[Toppings] Visualize Topping';\r\n  // constructor(public readonly payload: Topping[]) {}\r\n  constructor(public readonly payload: number[]) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Toppings] Load Toppings Fail'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoadToppingsSuccess",
            "id": "class-LoadToppingsSuccess-aa26f85bb40e17df7dbbabe250b5c4eeb40223e027222a565f08138a973a409d8c6c08ee7532f5878447cec8ce9f9fe695ab396343b81401906a5f26c5a77451",
            "file": "src/app/state/toppings.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Topping } from '../models/topping.model';\r\n\r\n// --- topping actions----\r\nexport class LoadToppings {\r\n  static readonly type = '[Toppings] Load Toppings';\r\n}\r\n\r\nexport class LoadToppingsSuccess {\r\n  static readonly type = '[Toppings] Load Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class LoadToppingsFail {\r\n  static readonly type = '[Toppings] Load Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\nexport class UpdateToppings {\r\n  static readonly type = '[Toppings] Update Toppings';\r\n}\r\n\r\nexport class UpdateToppingsSuccess {\r\n  static readonly type = '[Toppings] Update Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class UpdateToppingsFail {\r\n  static readonly type = '[Toppings] Update Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\nexport class VisualiseToppings {\r\n  static readonly type = '[Toppings] Visualize Topping';\r\n  // constructor(public readonly payload: Topping[]) {}\r\n  constructor(public readonly payload: number[]) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Topping[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Topping[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Topping[]",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Toppings] Load Toppings Success'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Pizzac",
            "id": "class-Pizzac-5c03ab2262952b574d8abe8783acdf1517a497db94debc1300982efeab032ac8c3972519bcfb18a7e275f10c42193be9849159f128b700c31a2f66a2981f3043",
            "file": "src/app/state/pizzas.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { asapScheduler, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nimport {Pizza, Topping} from '../models';\r\nimport { PizzasService } from '../services';\r\nimport {\r\n  CreatePizza,\r\n  CreatePizzaFail,\r\n  CreatePizzaSuccess,\r\n  LoadPizzas,\r\n  LoadPizzasFail,\r\n  LoadPizzasSuccess, RemovePizza, RemovePizzaFail, RemovePizzaSuccess,\r\n  SelectPizza, UpdatePizza, UpdatePizzaFail, UpdatePizzaSuccess\r\n} from './pizzas.actions';\r\nimport {Navigate} from '@ngxs/router-plugin';\r\nimport {Injectable} from \"@angular/core\";\r\n\r\n// -----pizzas model --------\r\nexport class Pizzac implements Pizza{\r\n  id: number | undefined;\r\n  name: string | undefined;\r\n  toppings: Topping[] | undefined;\r\n}\r\n\r\nexport interface PizzasStateModel {\r\n  pizzas: Pizza[];\r\n  loaded: boolean;\r\n  loading: boolean;\r\n  selectedPizzaId: number;\r\n}\r\n// --- pizzas state : initialState---\r\n@State<PizzasStateModel>({\r\n  name: 'pizzasState',\r\n  defaults: {\r\n    pizzas: [],\r\n    loaded: false,\r\n    loading: false,\r\n    selectedPizzaId: 0\r\n  }\r\n})\r\n@Injectable()\r\nexport class PizzasState {\r\n  // temporary for localStorage version\r\n  temp_id:number = 10;\r\n\r\n  constructor(private pizzaService: PizzasService,\r\n              ) {}\r\n  @Selector()\r\n  static pizzas(state: PizzasStateModel) {\r\n    return state.pizzas;\r\n  }\r\n  @Selector()\r\n  static loaded(state: PizzasStateModel) {\r\n    return state.loaded;\r\n  }\r\n\r\n  @Selector()\r\n  static SelectedPizza(state: PizzasStateModel): Pizza {\r\n    //\r\n    return <Pizza>state.pizzas.find(\r\n      (pizza: Pizza) => pizza.id === state.selectedPizzaId\r\n    );\r\n  }\r\n  //---------------- load pizza ----------\r\n  @Action(LoadPizzas)\r\n  loadPizzas({ patchState, dispatch }: StateContext<PizzasStateModel>) {\r\n    patchState({ loading: true });\r\n    return this.pizzaService\r\n      .getPizzas()\r\n      .pipe(\r\n        map((pizzas: Pizza[]) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new LoadPizzasSuccess(pizzas))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(LoadPizzasSuccess)\r\n  loadPizzasSuccess(\r\n    { patchState }: StateContext<PizzasStateModel>,\r\n    { payload }: LoadPizzasSuccess\r\n  ) {\r\n    patchState({ pizzas: payload, loaded: true, loading: false });\r\n  }\r\n\r\n  @Action(LoadPizzasFail)\r\n  loadPizzasFail(\r\n    { dispatch }: StateContext<PizzasStateModel>,\r\n    { payload }: LoadPizzasFail\r\n  ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n\r\n  // ---- selected Pizza ----\r\n  @Action(SelectPizza)\r\n  selectedPizza(\r\n    { patchState }: StateContext<PizzasStateModel>,  { payload }: SelectPizza ) {\r\n    patchState({ selectedPizzaId: payload });\r\n  }\r\n  //---------------- create pizza ----------\r\n  @Action(CreatePizza)\r\n  createPizza({ patchState, dispatch }: StateContext<PizzasStateModel>, {payload}:CreatePizza) {\r\n    patchState({ loading: true });\r\n    return this.pizzaService\r\n      .createPizza(payload)\r\n      .pipe(\r\n        map((pizza: Pizza) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new CreatePizzaSuccess(pizza))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(CreatePizzaSuccess)\r\n  createPizzaSuccess(\r\n    { patchState,getState, dispatch }: StateContext<PizzasStateModel>, {payload}: any ,CreatePizzaSuccess: any ) {\r\n    this.temp_id = this.temp_id + 1;\r\n    payload.id = this.temp_id;\r\n    patchState({ pizzas:[...getState().pizzas,payload], loaded: true, loading: false });\r\n    dispatch(new Navigate(['./products']));\r\n\r\n  }\r\n\r\n  @Action(CreatePizzaFail)\r\n  createPizzaFail(\r\n    { dispatch }: StateContext<PizzasStateModel> ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n  //---------------- update pizza ----------\r\n  @Action(UpdatePizza)\r\n  updatePizza({ patchState, dispatch }: StateContext<PizzasStateModel>, {payload}:UpdatePizza) {\r\n    patchState({ loading: true });\r\n    return this.pizzaService\r\n      .updatePizza(payload)\r\n      .pipe(\r\n        map((pizza: Pizza) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new UpdatePizzaSuccess(pizza))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(UpdatePizzaSuccess)\r\n  updatePizzaSuccess(\r\n    { patchState,getState,dispatch }: StateContext<PizzasStateModel>, {payload}: UpdatePizzaSuccess ) {\r\n    //\r\n    const pizzas = getState().pizzas.filter(val=>val.id !== payload.id);\r\n    patchState({pizzas:[ ...pizzas,payload], loaded: true, loading: false });\r\n    dispatch(new Navigate(['./products']));\r\n  }\r\n\r\n  @Action(UpdatePizzaFail)\r\n  updatePizzaFail(\r\n    { dispatch }: StateContext<PizzasStateModel> ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n  //---------------- remove pizza ----------\r\n  payload:any = null;\r\n  @Action(RemovePizza)\r\n  removePizza({ patchState, dispatch }: StateContext<PizzasStateModel>, {payload}:RemovePizza) {\r\n    patchState({ loading: true });\r\n    this.payload = payload;\r\n    return this.pizzaService\r\n      .removePizza(payload)\r\n      .pipe(\r\n        map((pizza: Pizza) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new RemovePizzaSuccess(pizza))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(RemovePizzaSuccess)\r\n  removePizzaSuccess(\r\n    { patchState,getState, dispatch }: StateContext<PizzasStateModel>, {payload}:RemovePizzaSuccess ) {\r\n    //\r\n    const pizzas = getState().pizzas.filter(val => val.id !== payload.id)\r\n    // const pizzas = getState().pizzas.filter(val => val.id !== this.payload.id)\r\n    //\r\n    this.payload = null;\r\n    patchState({ pizzas:[...pizzas],loaded: true, loading: false });\r\n    dispatch(new Navigate(['./products']));\r\n\r\n  }\r\n\r\n  @Action(RemovePizzaFail)\r\n  removePizzaFail(\r\n    { dispatch }: StateContext<PizzasStateModel> ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "toppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Topping[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Pizza"
            ]
        },
        {
            "name": "RemovePizza",
            "id": "class-RemovePizza-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Remove Pizza'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RemovePizzaFail",
            "id": "class-RemovePizzaFail-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Remove Pizza Fail'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RemovePizzaSuccess",
            "id": "class-RemovePizzaSuccess-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Remove Pizza Success'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SelectPizza",
            "id": "class-SelectPizza-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Select Pizza'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdatePizza",
            "id": "class-UpdatePizza-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Update Pizza'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdatePizzaFail",
            "id": "class-UpdatePizzaFail-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Update Pizza Fail'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdatePizzaSuccess",
            "id": "class-UpdatePizzaSuccess-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Update Pizza Success'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateToppings",
            "id": "class-UpdateToppings-aa26f85bb40e17df7dbbabe250b5c4eeb40223e027222a565f08138a973a409d8c6c08ee7532f5878447cec8ce9f9fe695ab396343b81401906a5f26c5a77451",
            "file": "src/app/state/toppings.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Topping } from '../models/topping.model';\r\n\r\n// --- topping actions----\r\nexport class LoadToppings {\r\n  static readonly type = '[Toppings] Load Toppings';\r\n}\r\n\r\nexport class LoadToppingsSuccess {\r\n  static readonly type = '[Toppings] Load Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class LoadToppingsFail {\r\n  static readonly type = '[Toppings] Load Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\nexport class UpdateToppings {\r\n  static readonly type = '[Toppings] Update Toppings';\r\n}\r\n\r\nexport class UpdateToppingsSuccess {\r\n  static readonly type = '[Toppings] Update Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class UpdateToppingsFail {\r\n  static readonly type = '[Toppings] Update Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\nexport class VisualiseToppings {\r\n  static readonly type = '[Toppings] Visualize Topping';\r\n  // constructor(public readonly payload: Topping[]) {}\r\n  constructor(public readonly payload: number[]) {}\r\n}\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Toppings] Update Toppings'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateToppingsFail",
            "id": "class-UpdateToppingsFail-aa26f85bb40e17df7dbbabe250b5c4eeb40223e027222a565f08138a973a409d8c6c08ee7532f5878447cec8ce9f9fe695ab396343b81401906a5f26c5a77451",
            "file": "src/app/state/toppings.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Topping } from '../models/topping.model';\r\n\r\n// --- topping actions----\r\nexport class LoadToppings {\r\n  static readonly type = '[Toppings] Load Toppings';\r\n}\r\n\r\nexport class LoadToppingsSuccess {\r\n  static readonly type = '[Toppings] Load Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class LoadToppingsFail {\r\n  static readonly type = '[Toppings] Load Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\nexport class UpdateToppings {\r\n  static readonly type = '[Toppings] Update Toppings';\r\n}\r\n\r\nexport class UpdateToppingsSuccess {\r\n  static readonly type = '[Toppings] Update Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class UpdateToppingsFail {\r\n  static readonly type = '[Toppings] Update Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\nexport class VisualiseToppings {\r\n  static readonly type = '[Toppings] Visualize Topping';\r\n  // constructor(public readonly payload: Topping[]) {}\r\n  constructor(public readonly payload: number[]) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Toppings] Update Toppings Fail'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateToppingsSuccess",
            "id": "class-UpdateToppingsSuccess-aa26f85bb40e17df7dbbabe250b5c4eeb40223e027222a565f08138a973a409d8c6c08ee7532f5878447cec8ce9f9fe695ab396343b81401906a5f26c5a77451",
            "file": "src/app/state/toppings.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Topping } from '../models/topping.model';\r\n\r\n// --- topping actions----\r\nexport class LoadToppings {\r\n  static readonly type = '[Toppings] Load Toppings';\r\n}\r\n\r\nexport class LoadToppingsSuccess {\r\n  static readonly type = '[Toppings] Load Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class LoadToppingsFail {\r\n  static readonly type = '[Toppings] Load Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\nexport class UpdateToppings {\r\n  static readonly type = '[Toppings] Update Toppings';\r\n}\r\n\r\nexport class UpdateToppingsSuccess {\r\n  static readonly type = '[Toppings] Update Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class UpdateToppingsFail {\r\n  static readonly type = '[Toppings] Update Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\nexport class VisualiseToppings {\r\n  static readonly type = '[Toppings] Visualize Topping';\r\n  // constructor(public readonly payload: Topping[]) {}\r\n  constructor(public readonly payload: number[]) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Topping[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Topping[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Topping[]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Toppings] Update Toppings Success'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "VisualiseToppings",
            "id": "class-VisualiseToppings-aa26f85bb40e17df7dbbabe250b5c4eeb40223e027222a565f08138a973a409d8c6c08ee7532f5878447cec8ce9f9fe695ab396343b81401906a5f26c5a77451",
            "file": "src/app/state/toppings.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Topping } from '../models/topping.model';\r\n\r\n// --- topping actions----\r\nexport class LoadToppings {\r\n  static readonly type = '[Toppings] Load Toppings';\r\n}\r\n\r\nexport class LoadToppingsSuccess {\r\n  static readonly type = '[Toppings] Load Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class LoadToppingsFail {\r\n  static readonly type = '[Toppings] Load Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\nexport class UpdateToppings {\r\n  static readonly type = '[Toppings] Update Toppings';\r\n}\r\n\r\nexport class UpdateToppingsSuccess {\r\n  static readonly type = '[Toppings] Update Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class UpdateToppingsFail {\r\n  static readonly type = '[Toppings] Update Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\nexport class VisualiseToppings {\r\n  static readonly type = '[Toppings] Visualize Topping';\r\n  // constructor(public readonly payload: Topping[]) {}\r\n  constructor(public readonly payload: number[]) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Toppings] Visualize Topping'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-ff1d416e9ebe14d97f1003f098d0d4f3f1af2a0f13525c6ac3754922543e457e089fb91cb67b4c4eb12e16d35c9b7f38f5cfcdcea605d6dfef8c67909e0f80cb",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'pizza-order220304'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'pizza-order220304';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "ButtonsComponent",
            "id": "component-ButtonsComponent-90d75c31f4e312f4151477e6ad3da0c75ceca18217690392002375f601c7e29b962976ab6e87b34c319155af17e7e5018e089b0fd711834e90e1bcb4003cb01b",
            "file": "src/app/components/pizza-form/buttons/buttons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-buttons",
            "styleUrls": [],
            "styles": [
                "\n    .pizza-form__actions {\n      position: relative;\n      margin: 35px 0 0;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n    .pizza-form__actions button:last-child {\n      margin-left: auto;\n    }\n    .btn {\n      display: inline-block;\n      padding: 10px 15px;\n      margin: 0;\n      outline: 0;\n      border: 0;\n      border-radius: 3px;\n      font-size: 16px;\n      font-family: 'cornerstone';\n      cursor: pointer;\n      transition: all 0.2s ease;\n    }\n    .btn__ok {\n      background: #0f9675;\n      color: #fff;\n    }\n    .btn__ok:hover {\n      background: #0a7d61;\n    }\n    .btn__warning {\n      background: #ab131c;\n      color: #fff;\n    }\n    .btn__warning:hover {\n      background: #880c14;\n    }\n\n  "
            ],
            "template": "<div class=\"pizza-form__actions\">\n  <button\n    type=\"button\"\n    class=\"btn btn__ok\"\n    *ngIf=\"!exists\"\n    (click)=\"createPizza(form)\">\n    Create Pizza\n  </button>\n\n  <button\n    type=\"button\"\n    class=\"btn btn__ok\"\n    *ngIf=\"exists\"\n    (click)=\"updatePizza(form)\">\n    Save changes\n  </button>\n\n  <button\n    type=\"button\"\n    class=\"btn btn__warning\"\n    *ngIf=\"exists\"\n    (click)=\"removePizza(form)\">\n    Delete Pizza\n  </button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "exists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "pizza",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "Pizza",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "create",
                    "defaultValue": "new EventEmitter<Pizza>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "remove",
                    "defaultValue": "new EventEmitter<Pizza>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter"
                },
                {
                    "name": "update",
                    "defaultValue": "new EventEmitter<Pizza>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "createPizza",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removePizza",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePizza",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Pizza} from \"../../../models\";\nimport {Form, FormGroup} from \"@angular/forms\";\n\n@Component({\n  selector: 'app-buttons',\n  template: `\n    <div class=\"pizza-form__actions\">\n      <button\n        type=\"button\"\n        class=\"btn btn__ok\"\n        *ngIf=\"!exists\"\n        (click)=\"createPizza(form)\">\n        Create Pizza\n      </button>\n\n      <button\n        type=\"button\"\n        class=\"btn btn__ok\"\n        *ngIf=\"exists\"\n        (click)=\"updatePizza(form)\">\n        Save changes\n      </button>\n\n      <button\n        type=\"button\"\n        class=\"btn btn__warning\"\n        *ngIf=\"exists\"\n        (click)=\"removePizza(form)\">\n        Delete Pizza\n      </button>\n    </div>\n  `,\n  styles: [`\n    .pizza-form__actions {\n      position: relative;\n      margin: 35px 0 0;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n    .pizza-form__actions button:last-child {\n      margin-left: auto;\n    }\n    .btn {\n      display: inline-block;\n      padding: 10px 15px;\n      margin: 0;\n      outline: 0;\n      border: 0;\n      border-radius: 3px;\n      font-size: 16px;\n      font-family: 'cornerstone';\n      cursor: pointer;\n      transition: all 0.2s ease;\n    }\n    .btn__ok {\n      background: #0f9675;\n      color: #fff;\n    }\n    .btn__ok:hover {\n      background: #0a7d61;\n    }\n    .btn__warning {\n      background: #ab131c;\n      color: #fff;\n    }\n    .btn__warning:hover {\n      background: #880c14;\n    }\n\n  `]\n})\nexport class ButtonsComponent implements OnInit {\n  @Input() exists: boolean;\n  @Input() form: FormGroup;\n  @Input() pizza: Pizza;\n  @Output() create = new EventEmitter<Pizza>();\n  @Output() update = new EventEmitter<Pizza>();\n  @Output() remove = new EventEmitter<Pizza>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n  createPizza(form: FormGroup) {\n    const { value, valid } = form;\n    // console.log('--- value', value, valid, form);\n    if( value['name'].split(':')[0] === '') window.alert('이름을 입력하세요!')\n    // if( value['name'] === '') window.alert('이름을 입력하세요!')\n    if (valid) {\n      this.create.emit(value);\n    }\n  }\n\n  updatePizza(form: FormGroup) {\n    const { value, valid, touched, dirty } = form;\n    if (valid) {\n      // console.log('updatePizza-form', form, value);\n      // if (touched && valid) {\n      this.update.emit({ ...this.pizza, ...value });\n    }\n  }\n\n  removePizza(form: FormGroup) {\n    const { value } = form;\n    this.remove.emit({ ...this.pizza, ...value });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .pizza-form__actions {\n      position: relative;\n      margin: 35px 0 0;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n    .pizza-form__actions button:last-child {\n      margin-left: auto;\n    }\n    .btn {\n      display: inline-block;\n      padding: 10px 15px;\n      margin: 0;\n      outline: 0;\n      border: 0;\n      border-radius: 3px;\n      font-size: 16px;\n      font-family: 'cornerstone';\n      cursor: pointer;\n      transition: all 0.2s ease;\n    }\n    .btn__ok {\n      background: #0f9675;\n      color: #fff;\n    }\n    .btn__ok:hover {\n      background: #0a7d61;\n    }\n    .btn__warning {\n      background: #ab131c;\n      color: #fff;\n    }\n    .btn__warning:hover {\n      background: #880c14;\n    }\n\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 80
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "MainPanelComponent",
            "id": "component-MainPanelComponent-96997f37543a310f7c4511e346a216e05b2d07632569003ac6dc354eaa72ed53936cf3a628275707b29de28e727d9c0a50b7f0ffa891afe50cb1f15da75b0928",
            "file": "src/app/components/main-panel/main-panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "main-panel",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"grid grid-cols-2 m-1 \">\n  <section class=\"h-auto  border-4  border-green-300 p-3\">\n    <pizza-form\n      [pizza]=\"pizza\"\n      [nToppings]=\"nToppings\"\n      (addToppings)=\"addToppings($event)\"\n      (create)=\"onCreate($event)\"\n      (update)=\"onUpdate($event)\"\n      (remove)=\"onRemove($event)\"\n      >\n      <pizza-display [toppings]=\"toppings\"></pizza-display>\n    </pizza-form>\n  </section>\n  <section class=\"text-gray-600 body-font h-32\">\n    <div class=\"container px-5 py-1 mx-auto overflow-y-auto h-screen\">\n        <pizza-item-list [pizzas]=\"pizzas\"></pizza-item-list>\n    </div>\n  </section>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "nToppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "Topping[]",
                    "decorators": []
                },
                {
                    "name": "pizza",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "Pizza",
                    "decorators": []
                },
                {
                    "name": "pizzas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "Pizza[]",
                    "decorators": []
                },
                {
                    "name": "toppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "Topping[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "addToppings",
                    "args": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCreate",
                    "args": [
                        {
                            "name": "pizza",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pizza",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRemove",
                    "args": [
                        {
                            "name": "pizza",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pizza",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUpdate",
                    "args": [
                        {
                            "name": "pizza",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pizza",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnInit} from '@angular/core';\nimport {Pizza, Topping} from \"../../models\";\n\n@Component({\n  selector: 'main-panel',\n  template: `\n    <div class=\"grid grid-cols-2 m-1 \">\n      <section class=\"h-auto  border-4  border-green-300 p-3\">\n        <pizza-form\n          [pizza]=\"pizza\"\n          [nToppings]=\"nToppings\"\n          (addToppings)=\"addToppings($event)\"\n          (create)=\"onCreate($event)\"\n          (update)=\"onUpdate($event)\"\n          (remove)=\"onRemove($event)\"\n          >\n          <pizza-display [toppings]=\"toppings\"></pizza-display>\n        </pizza-form>\n      </section>\n      <section class=\"text-gray-600 body-font h-32\">\n        <div class=\"container px-5 py-1 mx-auto overflow-y-auto h-screen\">\n            <pizza-item-list [pizzas]=\"pizzas\"></pizza-item-list>\n        </div>\n      </section>\n    </div>\n  `,\n  styles: [\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MainPanelComponent implements OnInit {\n  @Input() pizzas: Pizza[];\n  @Input() pizza: Pizza;\n  @Input() toppings: Topping[];\n  @Input() nToppings: Topping[];\n  constructor( private cdr: ChangeDetectorRef) { }\n  onCreate(pizza: Pizza) {\n\n  }\n  onUpdate(pizza: Pizza) {\n\n  }\n  onRemove(pizza: Pizza) {\n\n  }\n  addToppings( ev: any) {\n\n  }\n  ngOnInit(): void {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PizzaDisplayComponent",
            "id": "component-PizzaDisplayComponent-ae8a19d9aa9428b93341b400fa8439e0f35ba5fc625d0b63141884f3f547406030144b6c152496665bd042fa418101a43b47213cbbaddfd858d9b19a4bdf775e",
            "file": "src/app/components/pizza-display/pizza-display.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pizza-display",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: block;\n    }\n    .pizza-display {\n      background: #f5f5f5;\n      border-radius: 4px;\n      padding: 15px 0;\n    }\n    .pizza-display__base {\n      position: relative;\n      text-align: center;\n    }\n    .pizza-display__topping {\n      position: absolute;\n      top: 0;\n      right: 0;\n      left: 0;\n      bottom: 0;\n      height: 100%;\n      width: 100%;\n    }\n  "
            ],
            "template": "<div class=\"pizza-display\">\n  <div class=\"pizza-display__base\">\n    <div class=\"flex justify-center\">\n        <img src=\"assets/img/pizza.svg\">\n    </div>\n    <img  *ngFor=\"let topping of nToppings; index as i;\"\n      src=\"assets/img/toppings/multi/{{ topping.image }}.svg\"\n      [style.zIndex]=\"i\"\n      class=\"pizza-display__topping\"\n      @drop>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "toppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "nToppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\nimport {animate, style, transition, trigger} from \"@angular/animations\";\nimport {ToppingImageService} from \"../../services/topping-image.service\";\n\nexport const DROP_ANIMATION = trigger(\"drop\", [\n  transition(\":enter\", [\n    style({transform: \"translateY(-200px)\", opacity: 0}),\n    animate(\n      \"300ms cubic-bezier(1.000, 0.000, 0.000, 1.000)\",\n      style({transform: \"translateY(0)\", opacity: 1})\n    )\n  ]),\n  transition(\":leave\", [\n    style({transform: \"translateY(0)\", opacity: 1}),\n    animate(\n      \"200ms cubic-bezier(1.000, 0.000, 0.000, 1.000)\",\n      style({transform: \"translateY(-200px)\", opacity: 0})\n    )\n  ])\n]);\n\n@Component({\n  selector: 'pizza-display',\n  template: `\n    <div class=\"pizza-display\">\n      <div class=\"pizza-display__base\">\n        <div class=\"flex justify-center\">\n            <img src=\"assets/img/pizza.svg\">\n        </div>\n        <img  *ngFor=\"let topping of nToppings; index as i;\"\n          src=\"assets/img/toppings/multi/{{ topping.image }}.svg\"\n          [style.zIndex]=\"i\"\n          class=\"pizza-display__topping\"\n          @drop>\n      </div>\n    </div>\n  `,\n  styles: [`\n    :host {\n      display: block;\n    }\n    .pizza-display {\n      background: #f5f5f5;\n      border-radius: 4px;\n      padding: 15px 0;\n    }\n    .pizza-display__base {\n      position: relative;\n      text-align: center;\n    }\n    .pizza-display__topping {\n      position: absolute;\n      top: 0;\n      right: 0;\n      left: 0;\n      bottom: 0;\n      height: 100%;\n      width: 100%;\n    }\n  `\n  ],\n  animations:[DROP_ANIMATION],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PizzaDisplayComponent implements OnInit {\n  @Input() set toppings(v: any) {\n    this.nToppings = this.toppingImageService.setEachToppingImage(v);\n    // console.log(' toppings', this.nToppings, v);\n  };\n  nToppings: any[];\n\n  constructor(private toppingImageService: ToppingImageService) { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: block;\n    }\n    .pizza-display {\n      background: #f5f5f5;\n      border-radius: 4px;\n      padding: 15px 0;\n    }\n    .pizza-display__base {\n      position: relative;\n      text-align: center;\n    }\n    .pizza-display__topping {\n      position: absolute;\n      top: 0;\n      right: 0;\n      left: 0;\n      bottom: 0;\n      height: 100%;\n      width: 100%;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toppingImageService",
                        "type": "ToppingImageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "toppingImageService",
                        "type": "ToppingImageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "toppings": {
                    "name": "toppings",
                    "setSignature": {
                        "name": "toppings",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 66,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "PizzaFormComponent",
            "id": "component-PizzaFormComponent-1c9969519ba396d0f8431d76b37e15f54f6225465c887d9a6f6008a9d73943ee5e7d06092cedceb2b723c2ae9b2172a50a102a3b3da4f70818d074adf5acbca4",
            "file": "src/app/components/pizza-form/pizza-form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pizza-form",
            "styleUrls": [],
            "styles": [
                "\n    .pizza-form__list {\n      margin: -20px 0 0;\n    }\n\n    .pizza-form ::ng-deep pizza-display {\n      margin: 0 0 35px;\n    }\n\n    .pizza-form label {\n      margin: 0 0 35px;\n      display: block;\n    }\n\n    .pizza-form label h4 {\n      margin: 0 0 15px;\n    }\n\n    .pizza-form__error {\n      padding: 10px;\n      border-radius: 0 0 4px 4px;\n      display: flex;\n      align-items: center;\n      background: #aa141b;\n      color: #fff;\n    }\n\n    .pizza-form__error p {\n      font-size: 14px;\n      margin: 0;\n    }\n\n  "
            ],
            "template": "<div class=\"pizza-form\">\n  <pizza-name\n    [price] = 'pizzaPrice'\n    (name)=\"onInputName($event)\"\n    (isInvalid) = onIsInvalid($event)\n  >\n  </pizza-name>\n    <!-- Angular CDK Overlay를 표시하기 위한 Anchor point, 선태된 토핑에 대한 Count를\n     표시하기 위함 selected-item.service.ts와 관련이 있음 -->\n    <ng-container>\n      <div style=\"float: left\" #subTotal></div>\n    </ng-container>\n    <div class=\"m-10 w-auto h-auto\">\n        <!-- Pizza display   -->\n        <ng-content></ng-content>\n    </div>\n\n    <label>\n      <div class=\"text-xl\">Select toppings</div>\n    </label>\n    <div class=\"\">\n      <!-- 선택할 토핑 메뉴. <pizza-toppings>에서 ControlValueAccess 를 구현함-->\n      <pizza-toppings\n        [toppings]=\"nToppings\"\n        (selected)=\"addToppings.emit($event)\">\n      </pizza-toppings>\n    </div>\n\n    <div class=\"\">\n        <app-buttons\n          (create)=\"create.emit($event)\"\n          (update)=\"update.emit($event)\"\n          (remove)=\"remove.emit($event)\"\n        ></app-buttons>\n    </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "nToppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88,
                    "type": "Topping[]",
                    "decorators": []
                },
                {
                    "name": "pizza",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "Pizza",
                    "decorators": []
                },
                {
                    "name": "toppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "Topping[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "addToppings",
                    "defaultValue": "new EventEmitter<Topping[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "EventEmitter"
                },
                {
                    "name": "create",
                    "defaultValue": "new EventEmitter<Pizza>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "EventEmitter"
                },
                {
                    "name": "remove",
                    "defaultValue": "new EventEmitter<Pizza>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "EventEmitter"
                },
                {
                    "name": "update",
                    "defaultValue": "new EventEmitter<Pizza>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_isInvalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "exists",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "pizzaPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "selected_origin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'subTotal', {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInputName",
                    "args": [
                        {
                            "name": "ev",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onIsInvalid",
                    "args": [
                        {
                            "name": "ev",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectedToppings",
                    "args": [
                        {
                            "name": "ev",
                            "type": "Topping[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "Topping[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\nimport {Pizza, Topping} from \"../../models\";\n\n@Component({\n  selector: 'pizza-form',\n  template: `\n    <div class=\"pizza-form\">\n      <pizza-name\n        [price] = 'pizzaPrice'\n        (name)=\"onInputName($event)\"\n        (isInvalid) = onIsInvalid($event)\n      >\n      </pizza-name>\n        <!-- Angular CDK Overlay를 표시하기 위한 Anchor point, 선태된 토핑에 대한 Count를\n         표시하기 위함 selected-item.service.ts와 관련이 있음 -->\n        <ng-container>\n          <div style=\"float: left\" #subTotal></div>\n        </ng-container>\n        <div class=\"m-10 w-auto h-auto\">\n            <!-- Pizza display   -->\n            <ng-content></ng-content>\n        </div>\n\n        <label>\n          <div class=\"text-xl\">Select toppings</div>\n        </label>\n        <div class=\"\">\n          <!-- 선택할 토핑 메뉴. <pizza-toppings>에서 ControlValueAccess 를 구현함-->\n          <pizza-toppings\n            [toppings]=\"nToppings\"\n            (selected)=\"addToppings.emit($event)\">\n          </pizza-toppings>\n        </div>\n\n        <div class=\"\">\n            <app-buttons\n              (create)=\"create.emit($event)\"\n              (update)=\"update.emit($event)\"\n              (remove)=\"remove.emit($event)\"\n            ></app-buttons>\n        </div>\n    </div>\n  `,\n  styles: [`\n    .pizza-form__list {\n      margin: -20px 0 0;\n    }\n\n    .pizza-form ::ng-deep pizza-display {\n      margin: 0 0 35px;\n    }\n\n    .pizza-form label {\n      margin: 0 0 35px;\n      display: block;\n    }\n\n    .pizza-form label h4 {\n      margin: 0 0 15px;\n    }\n\n    .pizza-form__error {\n      padding: 10px;\n      border-radius: 0 0 4px 4px;\n      display: flex;\n      align-items: center;\n      background: #aa141b;\n      color: #fff;\n    }\n\n    .pizza-form__error p {\n      font-size: 14px;\n      margin: 0;\n    }\n\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PizzaFormComponent implements OnInit {\n  pizzaPrice:string;\n  _isInvalid: boolean;\n  _name: string\n  exists = false;\n  @ViewChild('subTotal', {static:false}) selected_origin: any;\n\n  @Input() pizza: Pizza;\n  @Input() toppings : Topping[];\n  @Input() nToppings: Topping[];\n  @Output() addToppings = new EventEmitter<Topping[]>();\n  @Output() create = new EventEmitter<Pizza>();\n  @Output() update = new EventEmitter<Pizza>();\n  @Output() remove = new EventEmitter<Pizza>();\n  constructor(\n\n  ) { }\n\n  ngOnInit(): void {\n  }\n  onInputName(ev: string) {\n    this._name = ev;\n  }\n  onIsInvalid(ev: boolean) {\n    this._isInvalid = ev;\n  }\n  onSelectedToppings(ev: Topping[]) {\n\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .pizza-form__list {\n      margin: -20px 0 0;\n    }\n\n    .pizza-form ::ng-deep pizza-display {\n      margin: 0 0 35px;\n    }\n\n    .pizza-form label {\n      margin: 0 0 35px;\n      display: block;\n    }\n\n    .pizza-form label h4 {\n      margin: 0 0 15px;\n    }\n\n    .pizza-form__error {\n      padding: 10px;\n      border-radius: 0 0 4px 4px;\n      display: flex;\n      align-items: center;\n      background: #aa141b;\n      color: #fff;\n    }\n\n    .pizza-form__error p {\n      font-size: 14px;\n      margin: 0;\n    }\n\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 92
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PizzaItemComponent",
            "id": "component-PizzaItemComponent-9dbaabebc3efcaf1546fa86edc341177d0a32e7963d3e1907500d5b2fe7c98d0c3c8086f8471ed7653d588928c2a694f2601beadba29a2688a7de3bf1d90448f",
            "file": "src/app/components/pizza-item/pizza-item/pizza-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pizza-item",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"pizza-item\">\n  <ng-container>\n    <a [routerLink]=\"['/products', id]\">\n      <pizza-display\n        [toppings]=\"nToppings\">\n      </pizza-display>\n    </a>\n    <div style=\"color: darkred\" class=\"flex justify-center\">\n      <h3>{{ name }}</h3>\n    </div>\n\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pizza",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "nToppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Topping[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {Topping} from \"../../../models\";\n\n@Component({\n  selector: 'pizza-item',\n  template: `\n    <div class=\"pizza-item\">\n      <ng-container>\n        <a [routerLink]=\"['/products', id]\">\n          <pizza-display\n            [toppings]=\"nToppings\">\n          </pizza-display>\n        </a>\n        <div style=\"color: darkred\" class=\"flex justify-center\">\n          <h3>{{ name }}</h3>\n        </div>\n\n      </ng-container>\n    </div>\n  `,\n  styles: [\n  ]\n})\nexport class PizzaItemComponent implements OnInit {\n  name: string;\n  nToppings!: Topping[];\n  id: number;\n  @Input() set pizza(v: any) {\n    console.log(' pizza-item.component, pizza',v)\n    this.nToppings = v.toppings;\n    this.name = v.name;\n    this.id = v.id;\n  };\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 33
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "pizza": {
                    "name": "pizza",
                    "setSignature": {
                        "name": "pizza",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "PizzaItemListComponent",
            "id": "component-PizzaItemListComponent-174ac995daa64d7fa5979c856ff0a85f825cc063e52d46f89a7cba918e3000b623a33314a8d29da3dba02acd3b58f3fa727779f211dff3987c8abc18662087ef",
            "file": "src/app/components/pizza-item/pizza-item-list/pizza-item-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pizza-item-list",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"flex flex-wrap -m-1\">\n  <div class=\"xl:w-1/2 md:w-1/1 p-2\" *ngFor=\"let pizza of pizzas\">\n    <pizza-item [pizza]=\"pizza\"></pizza-item>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pizzas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "Pizza[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {Pizza} from \"../../../models\";\n\n@Component({\n  selector: 'pizza-item-list',\n  template: `\n    <div class=\"flex flex-wrap -m-1\">\n      <div class=\"xl:w-1/2 md:w-1/1 p-2\" *ngFor=\"let pizza of pizzas\">\n        <pizza-item [pizza]=\"pizza\"></pizza-item>\n      </div>\n    </div>\n  `,\n  styles: [\n  ]\n})\nexport class PizzaItemListComponent implements OnInit {\n  @Input() pizzas: Pizza[];\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PizzaListComponent",
            "id": "component-PizzaListComponent-b3434f7768fff049ae90c05f858a11ffd0e58846516b54891c221cda70e5e8ca868606497db84e4b1565ed08f12376ac7c6357d609697e6ba5f2072c005a6b3b",
            "file": "src/app/components/pizza-list/pizza-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pizza-list",
            "styleUrls": [],
            "styles": [],
            "template": "<p>\n  pizza-list works!\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-pizza-list',\n  template: `\n    <p>\n      pizza-list works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class PizzaListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PizzaNameComponent",
            "id": "component-PizzaNameComponent-1417c9558d17f00623340554b41a4d6091e2421f39012dfdd1fdd7df4483c2f0aed7800b638fcae416f0b7d876ec386a870a37be209df5cb42f1ddcefb1c28cc",
            "file": "src/app/components/pizza-form/pizza-name/pizza-name.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pizza-name",
            "styleUrls": [],
            "styles": [
                "\n    .pizza-form__input {\n      margin: 0;\n      padding: 15px;\n      outline: 0;\n      width: 100%;\n      border-radius: 4px;\n      font-size: 20px;\n      font-weight: 600;\n      background: #f5f5f5;\n      border: 1px solid transparent;\n    }\n\n    .pizza-form__input.error {\n      border-radius: 4px 4px 0 0;\n      border-color: #b54846;\n    }\n  "
            ],
            "template": "<form [formGroup]=\"form\">\n  <label>\n    <input\n      type=\"text\"\n      formControlName=\"name\"\n      placeholder=\"피자 이름을 입력하세요!\"\n      class=\"pizza-form__input\"\n      [class.error]=\"nameControlInvalid\">\n    <div\n      class=\"pizza-form__error\"\n      *ngIf=\"nameControlInvalid\">\n      <p>피자이름을 입력하세요!</p>\n    </div>\n  </label>\n</form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "isInvalid",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter"
                },
                {
                    "name": "name",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "tName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Form, FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\n\n@Component({\n  selector: 'pizza-name',\n  template: `\n    <form [formGroup]=\"form\">\n      <label>\n        <input\n          type=\"text\"\n          formControlName=\"name\"\n          placeholder=\"피자 이름을 입력하세요!\"\n          class=\"pizza-form__input\"\n          [class.error]=\"nameControlInvalid\">\n        <div\n          class=\"pizza-form__error\"\n          *ngIf=\"nameControlInvalid\">\n          <p>피자이름을 입력하세요!</p>\n        </div>\n      </label>\n    </form>\n  `,\n  styles: [`\n    .pizza-form__input {\n      margin: 0;\n      padding: 15px;\n      outline: 0;\n      width: 100%;\n      border-radius: 4px;\n      font-size: 20px;\n      font-weight: 600;\n      background: #f5f5f5;\n      border: 1px solid transparent;\n    }\n\n    .pizza-form__input.error {\n      border-radius: 4px 4px 0 0;\n      border-color: #b54846;\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PizzaNameComponent implements OnInit {\n  @Input() form: FormGroup;\n  @Input() set price (v: string ) {\n    const n = this.tName + ': ' + v;\n    if( this.tName !== '' ) this.form.patchValue({name: n  })\n  }\n  @Output() isInvalid = new EventEmitter<boolean>();\n  @Output() name = new EventEmitter<string>();\n  tName: string = '';\n  constructor(\n    private fb: FormBuilder,\n  ) {\n    this.form = this.fb.group({\n      name: [\"\", Validators.required],\n    });\n  }\n  ngOnInit(): void {\n    this.form.valueChanges.pipe().subscribe(val => {\n      this.tName = val;\n      // console.log('val', val)\n      this.name.emit(val);\n      this.isInvalid.emit(this.nameControlInvalid);\n    })\n  }\n  get nameControl(): any {\n    // console.log('name', this.form);\n    return this.form.get(\"name\") as FormControl;\n  }\n  get nameControlInvalid() {\n    return this.nameControl.hasError(\"required\") && this.nameControl.touched;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .pizza-form__input {\n      margin: 0;\n      padding: 15px;\n      outline: 0;\n      width: 100%;\n      border-radius: 4px;\n      font-size: 20px;\n      font-weight: 600;\n      background: #f5f5f5;\n      border: 1px solid transparent;\n    }\n\n    .pizza-form__input.error {\n      border-radius: 4px 4px 0 0;\n      border-color: #b54846;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "price": {
                    "name": "price",
                    "setSignature": {
                        "name": "price",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 45,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "nameControl": {
                    "name": "nameControl",
                    "getSignature": {
                        "name": "nameControl",
                        "type": "any",
                        "returnType": "any",
                        "line": 67
                    }
                },
                "nameControlInvalid": {
                    "name": "nameControlInvalid",
                    "getSignature": {
                        "name": "nameControlInvalid",
                        "type": "",
                        "returnType": "",
                        "line": 71
                    }
                }
            }
        },
        {
            "name": "PizzaProductComponent",
            "id": "component-PizzaProductComponent-d450c2de8af2944d909e6133cc2a67c7ba0fad9d89849f8c7b34b927206c2c8202f174ad255f32801a58803e1b6e66d06a87e0af6c8dc21c68b26dc3c256875a",
            "file": "src/app/components/pizza-product/pizza-product.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pizza-product",
            "styleUrls": [],
            "styles": [],
            "template": "    <div class=\"products\">\n<!--\n      <div class=\"products__new\">\n        <button\n          style=\"cursor:pointer\"\n          class=\"btn btn__ok\"\n          routerLink=\"./new\">\n          New Pizza\n        </button>\n      </div>\n      <div class=\"products__list\">\n        <ng-container *ngIf=\"!pizzas.length\">\n          No pizzas, add one to get started (pizzas$ | async)\n        </ng-container>\n        <pizza-item *ngFor=\"let pizza of pizzas\"\n                    [pizza]=\"pizza\">\n        </pizza-item>\n      </div>\n-->\n    </div>`\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pizzas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "Pizza[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\nimport {Pizza} from \"../../models\";\n\n@Component({\n  selector: 'pizza-product',\n  template: `\n    <div class=\"products\">\n<!--\n      <div class=\"products__new\">\n        <button\n          style=\"cursor:pointer\"\n          class=\"btn btn__ok\"\n          routerLink=\"./new\">\n          New Pizza\n        </button>\n      </div>\n      <div class=\"products__list\">\n        <ng-container *ngIf=\"!pizzas.length\">\n          No pizzas, add one to get started (pizzas$ | async)\n        </ng-container>\n        <pizza-item *ngFor=\"let pizza of pizzas\"\n                    [pizza]=\"pizza\">\n        </pizza-item>\n      </div>\n-->\n    </div>\\`\n  `,\n  styles: [\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PizzaProductComponent implements OnInit {\n  @Input() pizzas: Pizza[];\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 33
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PizzaToppingsComponent",
            "id": "component-PizzaToppingsComponent-ab3444d8da7ed7468d2ce96c7b20256e7ac321688f563a9811783f8141bd15c0c9c155ff80fce11e995714eb037ecd2828af9ad73784e596d4b713e5f490bf2b",
            "file": "src/app/components/pizza-toppings/pizza-toppings.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pizza-toppings",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: block;\n    }\n\n    .pizza-toppings {\n      display: flex;\n      justify-content: space-between;\n      flex-wrap: wrap;\n    }\n\n    .pizza-toppings-item {\n      position: relative;\n      display: flex;\n      align-items: center;\n      justify-content: left;\n      padding: 8px;\n      margin: 0 0 10px;\n      border-radius: 4px;\n      font-size: 15px;\n      font-family: 'cornerstone';\n      border: 1px solid grey;\n      flex: 0 0 23%;\n      transition: all 0.2s ease;\n      cursor: pointer;\n    }\n\n    .pizza-toppings-item div.topping_price {\n      position: absolute;\n      color: blue;\n      right: 10px;\n    }\n\n    .pizza-toppings-item.active {\n      background: #f5f5f5;\n    }\n\n    .pizza-toppings-item.active:after {\n      content: '';\n      border-radius: 50%;\n      background: #19b55f url('/src/assets/img/actions/checked.svg') no-repeat center center;\n      width: 16px;\n      height: 16px;\n      position: absolute;\n      top: -5px;\n      right: -5px;\n      background-size: 10px;\n    }\n\n    .pizza-toppings-item.fulled {\n      background: aqua;\n    }\n\n    .pizza-toppings-item img {\n      width: 22px;\n      margin: 0 10px 0 0;\n    }\n  "
            ],
            "template": "<div class=\"pizza-toppings\" >\n   <ng-container *ngFor=\"let topping of toppings;\">\n     <div class=\"\">\n       <div class=\"w-40 min-w-full md:min-w-0\">\n         <div  class=\"pizza-toppings-item\" (click)=\"addTopping(topping)\" style=\"text-align: justify-all\"\n               matBadge=\"{{toppingCount(topping)}}\" matBadgeColor=\"accent\" >\n           <img src=\"assets/img/toppings/singles/{{ topping.name }}.svg\">\n           {{ topping.name }}<div class=\"topping_price\" >{{topping.price && topping.price * 1000}}원</div>\n         </div>\n       </div>\n     </div>\n    </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "toppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "Topping[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter<Topping[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "pizza",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "pizzaId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "snackBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSnackBar",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "topp",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Topping[]",
                    "optional": false,
                    "description": "",
                    "line": 93
                }
            ],
            "methodsClass": [
                {
                    "name": "addTopping",
                    "args": [
                        {
                            "name": "topping",
                            "type": "Topping",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n토핑을 추가하는 부분 토핑은 5회까지 만 선택하게 제한함",
                    "description": "<p>토핑을 추가하는 부분 토핑은 5회까지 만 선택하게 제한함</p>\n",
                    "jsdoctags": [
                        {
                            "name": "topping",
                            "type": "Topping",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isExistInToppings",
                    "args": [
                        {
                            "name": "topping",
                            "type": "Topping",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "topping",
                            "type": "Topping",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toppingCount",
                    "args": [
                        {
                            "name": "topping",
                            "type": "Topping",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "topping",
                            "type": "Topping",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output\r\n} from '@angular/core';\r\nimport {Pizza, Topping} from \"../../models\";\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\n\r\n@Component({\r\n  selector: 'pizza-toppings',\r\n  template: `\r\n      <div class=\"pizza-toppings\" >\r\n         <ng-container *ngFor=\"let topping of toppings;\">\r\n           <div class=\"\">\r\n             <div class=\"w-40 min-w-full md:min-w-0\">\r\n               <div  class=\"pizza-toppings-item\" (click)=\"addTopping(topping)\" style=\"text-align: justify-all\"\r\n                     matBadge=\"{{toppingCount(topping)}}\" matBadgeColor=\"accent\" >\r\n                 <img src=\"assets/img/toppings/singles/{{ topping.name }}.svg\">\r\n                 {{ topping.name }}<div class=\"topping_price\" >{{topping.price && topping.price * 1000}}원</div>\r\n               </div>\r\n             </div>\r\n           </div>\r\n          </ng-container>\r\n      </div>\r\n  `,\r\n\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    .pizza-toppings {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      flex-wrap: wrap;\r\n    }\r\n\r\n    .pizza-toppings-item {\r\n      position: relative;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: left;\r\n      padding: 8px;\r\n      margin: 0 0 10px;\r\n      border-radius: 4px;\r\n      font-size: 15px;\r\n      font-family: 'cornerstone';\r\n      border: 1px solid grey;\r\n      flex: 0 0 23%;\r\n      transition: all 0.2s ease;\r\n      cursor: pointer;\r\n    }\r\n\r\n    .pizza-toppings-item div.topping_price {\r\n      position: absolute;\r\n      color: blue;\r\n      right: 10px;\r\n    }\r\n\r\n    .pizza-toppings-item.active {\r\n      background: #f5f5f5;\r\n    }\r\n\r\n    .pizza-toppings-item.active:after {\r\n      content: '';\r\n      border-radius: 50%;\r\n      background: #19b55f url('/src/assets/img/actions/checked.svg') no-repeat center center;\r\n      width: 16px;\r\n      height: 16px;\r\n      position: absolute;\r\n      top: -5px;\r\n      right: -5px;\r\n      background-size: 10px;\r\n    }\r\n\r\n    .pizza-toppings-item.fulled {\r\n      background: aqua;\r\n    }\r\n\r\n    .pizza-toppings-item img {\r\n      width: 22px;\r\n      margin: 0 10px 0 0;\r\n    }\r\n  `],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PizzaToppingsComponent implements OnInit {\r\n  @Input() toppings : Topping[];\r\n  @Output() selected = new EventEmitter<Topping[]>();\r\n  topp: Topping[] = [];\r\n  pizzaId: number;\r\n  pizza: Pizza;\r\n  snackBar: MatSnackBar;\r\n\r\n  constructor(\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  /** 토핑을 추가하는 부분 토핑은 5회까지 만 선택하게 제한함 */\r\n  addTopping( topping: Topping) {\r\n    let count = Array.from(this.topp).filter( val=> val.id === topping.id);\r\n    if( count.length >= 5) { // addTopping add each topping util each count 5\r\n      this.snackBar.open(\"Limited to 5 toppings level\", 'Check!!', {duration:3000});\r\n      return;\r\n    }\r\n    this.topp = [...this.topp, topping];\r\n    // console.log('--- this.topp', this.topp, this.topp.length, topping)\r\n    /** Parent component로 데이터를 전달하는 부분 */\r\n    this.selected.emit(this.topp);\r\n    // this._onChange(this.topp);\r\n\r\n  }\r\n  isExistInToppings( topping: Topping) {\r\n    /** 이미 선택된 토핑인지 판다하여 메뉴에 체크 표시를 함*/\r\n    return Array.from(this.topp).some(val => val.id === topping.id);\r\n  }\r\n  toppingCount(topping: Topping) : number{\r\n    let count = Array.from(this.topp).filter( val=> val.id === topping.id);\r\n    const ret = count.length === 0 ? null : count.length;\r\n    return ret;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: block;\n    }\n\n    .pizza-toppings {\n      display: flex;\n      justify-content: space-between;\n      flex-wrap: wrap;\n    }\n\n    .pizza-toppings-item {\n      position: relative;\n      display: flex;\n      align-items: center;\n      justify-content: left;\n      padding: 8px;\n      margin: 0 0 10px;\n      border-radius: 4px;\n      font-size: 15px;\n      font-family: 'cornerstone';\n      border: 1px solid grey;\n      flex: 0 0 23%;\n      transition: all 0.2s ease;\n      cursor: pointer;\n    }\n\n    .pizza-toppings-item div.topping_price {\n      position: absolute;\n      color: blue;\n      right: 10px;\n    }\n\n    .pizza-toppings-item.active {\n      background: #f5f5f5;\n    }\n\n    .pizza-toppings-item.active:after {\n      content: '';\n      border-radius: 50%;\n      background: #19b55f url('/src/assets/img/actions/checked.svg') no-repeat center center;\n      width: 16px;\n      height: 16px;\n      position: absolute;\n      top: -5px;\n      right: -5px;\n      background-size: 10px;\n    }\n\n    .pizza-toppings-item.fulled {\n      background: aqua;\n    }\n\n    .pizza-toppings-item img {\n      width: 22px;\n      margin: 0 10px 0 0;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 96
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SelectedToppingItemComponent",
            "id": "component-SelectedToppingItemComponent-e6d545441b352978dc42464c8ae76721857d77f33e024da842b050029ca5549663af6c0f534d896107a5141b03fae5b42eaa22f3d131ad14a9a504b82d2a32ec",
            "file": "src/app/components/selected-toppings/selected-topping-item/selected-topping-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "selected-topping-item",
            "styleUrls": [],
            "styles": [
                "\n    .selected-toppings-item {\n      position: relative;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      padding: 2px;\n      margin: 0 0 10px;\n      border-radius: 4px;\n      font-size: 12px;\n      font-family: 'cornerstone';\n      border: 1px solid grey;\n      flex: 0 0 23%;\n      transition: all 0.2s ease;\n      cursor: pointer;\n    }\n\n    .selected-toppings-item.active {\n      background: #f5f5f5;\n    }\n\n    .selected-toppings-item img {\n      width: 22px;\n      margin: 0 10px 0 0;\n    }\n  "
            ],
            "template": "<div class=\"selected-toppings-item\" (click)=\"remove.emit(topping)\">\n  <div class=\"w-12 h-auto\"  href=\"#\">\n    <img src=\"assets/img/toppings/singles/{{ topping.name }}.svg\"></div>\n    <div class=\"mr-1\">{{topping.name}}</div>\n  <div class=\"text-red-900\">{{topping.count}}</div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "topping",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "Topping",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "remove",
                    "defaultValue": "new EventEmitter<Topping>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Topping} from \"../../../models\";\n\n@Component({\n  selector: 'selected-topping-item',\n  template: `\n    <div class=\"selected-toppings-item\" (click)=\"remove.emit(topping)\">\n      <div class=\"w-12 h-auto\"  href=\"#\">\n        <img src=\"assets/img/toppings/singles/{{ topping.name }}.svg\"></div>\n        <div class=\"mr-1\">{{topping.name}}</div>\n      <div class=\"text-red-900\">{{topping.count}}</div>\n    </div>\n  `,\n  styles: [`\n    .selected-toppings-item {\n      position: relative;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      padding: 2px;\n      margin: 0 0 10px;\n      border-radius: 4px;\n      font-size: 12px;\n      font-family: 'cornerstone';\n      border: 1px solid grey;\n      flex: 0 0 23%;\n      transition: all 0.2s ease;\n      cursor: pointer;\n    }\n\n    .selected-toppings-item.active {\n      background: #f5f5f5;\n    }\n\n    .selected-toppings-item img {\n      width: 22px;\n      margin: 0 10px 0 0;\n    }\n  `\n  ]\n})\nexport class SelectedToppingItemComponent implements OnInit {\n  @Input() topping: Topping;\n  @Output() remove = new EventEmitter<Topping>();\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .selected-toppings-item {\n      position: relative;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      padding: 2px;\n      margin: 0 0 10px;\n      border-radius: 4px;\n      font-size: 12px;\n      font-family: 'cornerstone';\n      border: 1px solid grey;\n      flex: 0 0 23%;\n      transition: all 0.2s ease;\n      cursor: pointer;\n    }\n\n    .selected-toppings-item.active {\n      background: #f5f5f5;\n    }\n\n    .selected-toppings-item img {\n      width: 22px;\n      margin: 0 10px 0 0;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 44
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SelectedToppingListComponent",
            "id": "component-SelectedToppingListComponent-94a08380dea7cc577d922d7c7e42706b8e4219351f1428dd57d0128da55bdfc5cc2259be7d8b52b9d524ec2d40ae9f3bb4b93b08788eb62ceed255fba178553e",
            "file": "src/app/components/selected-toppings/selected-topping-list/selected-topping-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "selected-topping-list",
            "styleUrls": [],
            "styles": [
                "\n    .selected-toppings {\n      display: flex;\n      justify-content: space-between;\n      flex-wrap: wrap;\n      align-items: flex-start;\n    }\n    "
            ],
            "template": "<div class=\"selected-toppings\" style=\"width: 250px; height: 150px\">\n  <ng-container>\n    <ng-container *ngFor=\"let topping of toppings\">\n      <selected-topping-item [topping]=\"topping\">\n      </selected-topping-item>\n    </ng-container>\n\n  </ng-container>\n  <!--        {{total}}-->\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "toppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "Topping[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {Topping} from \"../../../models\";\n\n@Component({\n  selector: 'selected-topping-list',\n  template: `\n    <div class=\"selected-toppings\" style=\"width: 250px; height: 150px\">\n      <ng-container>\n        <ng-container *ngFor=\"let topping of toppings\">\n          <selected-topping-item [topping]=\"topping\">\n          </selected-topping-item>\n        </ng-container>\n\n      </ng-container>\n      <!--        {{total}}-->\n    </div>\n  `,\n  styles: [`\n    .selected-toppings {\n      display: flex;\n      justify-content: space-between;\n      flex-wrap: wrap;\n      align-items: flex-start;\n    }\n    `\n  ]\n})\nexport class SelectedToppingListComponent implements OnInit {\n  @Input() toppings: Topping[];\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .selected-toppings {\n      display: flex;\n      justify-content: space-between;\n      flex-wrap: wrap;\n      align-items: flex-start;\n    }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 29
            },
            "implements": [
                "OnInit"
            ]
        }
    ],
    "modules": [
        {
            "name": "AngularMaterialModule",
            "id": "module-AngularMaterialModule-193b3246abfaa142d02b9627b22a4c3a365b685c1ecb39b81e9b7532e7cbfd77372f31fef4c4992b8b71e37c69aeb984c1f912759c0c59fedc00280ea1b88b01",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/angular-material.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\r\nimport {MatSnackBarModule} from \"@angular/material/snack-bar\";\r\nimport {CommonModule} from \"@angular/common\";\r\nimport {MatBadgeModule} from \"@angular/material/badge\";\r\nconst modules = [\r\n  MatSnackBarModule,\r\n  MatBadgeModule\r\n]\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    ...modules\r\n  ],\r\n  exports: [...modules]\r\n})\r\nexport class AngularMaterialModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-982b4bf5a456b2c8d51e3701cfdd6d222797df297ce8d61bdd9f87a3ec556d783fcac5cd50df16f08cb01393d2cf77492459249055c09c5e89c73c67cc5b756c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { PizzaDisplayComponent } from './components/pizza-display/pizza-display.component';\nimport { PizzaToppingsComponent } from './components/pizza-toppings/pizza-toppings.component';\nimport {PizzaModule} from \"./components/pizza.module\";\nimport {AngularMaterialModule} from \"./shared/angular-material.module\";\nimport {MatSnackBarModule} from \"@angular/material/snack-bar\";\nimport {RouterModule} from \"@angular/router\";\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    PizzaModule,\n    // AngularMaterialModule,\n    MatSnackBarModule,\n    RouterModule\n  ],\n  providers: [MatSnackBarModule],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PizzaModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-e141f604138cd6d45a3fb2ba908f6710a18b674c0b8139025c1057f399b306f681249409aebfbcaaa5e26f66b5bf003be99025e56c7c4102c14985e7e856d521",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.routing.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\r\nimport {RouterModule, Routes} from \"@angular/router\";\r\nexport const routes: Routes = [\r\n  { path: '', redirectTo: 'products', pathMatch: 'full' },\r\n  {\r\n    path: 'products',\r\n    loadChildren: () => \"import(\\\"./components/pizza.module\\\").then( m=> m.PizzaModule)\"\r\n  }\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule{}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PizzaModule",
            "id": "module-PizzaModule-19b77b403dee4ecdc52b3a46abafc630ef375f4384bdd7d302a53324d0d648761fd4ddfcf54511259df2cae1c3c6c22006f061ca4768234f52c64509356dfc04",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/pizza.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {PizzaDisplayComponent} from \"./pizza-display/pizza-display.component\";\nimport {PizzaToppingsComponent} from \"./pizza-toppings/pizza-toppings.component\";\nimport {AngularMaterialModule} from \"../shared/angular-material.module\";\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\nimport { PizzaFormComponent } from './pizza-form/pizza-form.component';\nimport { ButtonsComponent } from './pizza-form/buttons/buttons.component';\nimport { PizzaNameComponent } from './pizza-form/pizza-name/pizza-name.component';\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport { MainPanelComponent } from './main-panel/main-panel.component';\nimport { PizzaProductComponent } from './pizza-product/pizza-product.component';\nimport { PizzaItemComponent } from './pizza-item/pizza-item/pizza-item.component';\nimport {RouterModule, Routes} from \"@angular/router\";\nimport { PizzaListComponent } from './pizza-list/pizza-list.component';\nimport { PizzaItemListComponent } from './pizza-item/pizza-item-list/pizza-item-list.component';\nimport { SelectedToppingListComponent } from './selected-toppings/selected-topping-list/selected-topping-list.component';\nimport { SelectedToppingItemComponent } from './selected-toppings/selected-topping-item/selected-topping-item.component';\nconst routes: Routes = [\n  {\n    path: '',\n    // canActivate: [PizzasGuard],\n    component: PizzaListComponent\n  },\n  {\n    path: 'new',\n    // canActivate: [ToppingsGuard],\n    component: PizzaItemComponent\n  },\n  {\n    path: ':pizzaId',\n    // canActivate: [PizzaExistsGuards, ToppingsGuard],\n    component: PizzaProductComponent,\n  }\n];\n@NgModule({\n  declarations: [\n    PizzaDisplayComponent,\n    PizzaToppingsComponent,\n    PizzaFormComponent,\n    ButtonsComponent,\n    PizzaNameComponent,\n    MainPanelComponent,\n    PizzaProductComponent,\n    PizzaItemComponent,\n    PizzaListComponent,\n    PizzaItemListComponent,\n    SelectedToppingListComponent,\n    SelectedToppingItemComponent,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    AngularMaterialModule,\n    BrowserAnimationsModule,\n    RouterModule.forChild(routes),\n  ],\n  exports: [\n    PizzaDisplayComponent,\n    PizzaToppingsComponent,\n    PizzaFormComponent,\n    ButtonsComponent,\n    PizzaNameComponent,\n    MainPanelComponent,\n    PizzaProductComponent,\n    PizzaItemComponent,\n    PizzaListComponent,\n    PizzaItemListComponent,\n    SelectedToppingListComponent,\n    SelectedToppingItemComponent,\n  ]\n})\nexport class PizzaModule{}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonsComponent"
                        },
                        {
                            "name": "MainPanelComponent"
                        },
                        {
                            "name": "PizzaDisplayComponent"
                        },
                        {
                            "name": "PizzaFormComponent"
                        },
                        {
                            "name": "PizzaItemComponent"
                        },
                        {
                            "name": "PizzaItemListComponent"
                        },
                        {
                            "name": "PizzaListComponent"
                        },
                        {
                            "name": "PizzaNameComponent"
                        },
                        {
                            "name": "PizzaProductComponent"
                        },
                        {
                            "name": "PizzaToppingsComponent"
                        },
                        {
                            "name": "SelectedToppingItemComponent"
                        },
                        {
                            "name": "SelectedToppingListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AngularMaterialModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonsComponent"
                        },
                        {
                            "name": "MainPanelComponent"
                        },
                        {
                            "name": "PizzaDisplayComponent"
                        },
                        {
                            "name": "PizzaFormComponent"
                        },
                        {
                            "name": "PizzaItemComponent"
                        },
                        {
                            "name": "PizzaItemListComponent"
                        },
                        {
                            "name": "PizzaListComponent"
                        },
                        {
                            "name": "PizzaNameComponent"
                        },
                        {
                            "name": "PizzaProductComponent"
                        },
                        {
                            "name": "PizzaToppingsComponent"
                        },
                        {
                            "name": "SelectedToppingItemComponent"
                        },
                        {
                            "name": "SelectedToppingListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DROP_ANIMATION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-display/pizza-display.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger(\"drop\", [\n  transition(\":enter\", [\n    style({transform: \"translateY(-200px)\", opacity: 0}),\n    animate(\n      \"300ms cubic-bezier(1.000, 0.000, 0.000, 1.000)\",\n      style({transform: \"translateY(0)\", opacity: 1})\n    )\n  ]),\n  transition(\":leave\", [\n    style({transform: \"translateY(0)\", opacity: 1}),\n    animate(\n      \"200ms cubic-bezier(1.000, 0.000, 0.000, 1.000)\",\n      style({transform: \"translateY(-200px)\", opacity: 0})\n    )\n  ])\n])"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "modules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/angular-material.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  MatSnackBarModule,\r\n  MatBadgeModule\r\n]"
            },
            {
                "name": "PIZZA_CONFIG_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/selected-item.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<Pizza>('PIZZA_CONFIG_TOKEN')"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/main-panel/main-panel.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-display/pizza-display.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-form/pizza-form.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-toppings/pizza-toppings.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-item/pizza-item/pizza-item.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-item/pizza-item-list/pizza-item-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-form/buttons/buttons.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-form/pizza-name/pizza-name.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/selected-toppings/selected-topping-item/selected-topping-item.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/selected-toppings/selected-topping-list/selected-topping-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ProductsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[PizzasState, ToppingsState]"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "services",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[PizzasService, ToppingsService]"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/main-panel/main-panel.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `\r\n    <main-panel\r\n        [pizzas]=\"pizzas\"\r\n        [pizza]=\"pizza\"\r\n        [toppings]=\"toppings\"\r\n        [nToppings]=\"nToppings\"\r\n        >\r\n    </main-panel>\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-display/pizza-display.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `<pizza-display [toppings]=\"toppings\"></pizza-display>`\r\n\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-form/pizza-form.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    addToppings: action('selectedToppings'),\r\n    onCreate: action('create'),\r\n    onUpdate: action('update'),\r\n    onRemove: action('remove')\r\n  },\r\n  template: `\r\n  <pizza-form\r\n            [pizza]=\"pizza\"\r\n            [toppings]=\"toppings\"\r\n            (selectedToppings)=\"addToppings($event)\"\r\n            (create)=\"onCreate($event)\"\r\n            (update)=\"onUpdate($event)\"\r\n            (remove)=\"onRemove($event)\">\r\n        <pizza-display\r\n                [toppings]=\"nToppings\">\r\n        </pizza-display>\r\n  </pizza-form>\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-toppings/pizza-toppings.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onSelect: action('selected')\r\n  },\r\n  decorators:[\r\n    moduleMetadata({\r\n      imports:[\r\n        PizzaModule,\r\n      ],\r\n    })\r\n  ],\r\n  template: ` <pizza-toppings [toppings]=\"toppings\"\r\n                                (selected)=\"onSelect($event)\"\r\n                ></pizza-toppings>\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-item/pizza-item/pizza-item.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) =>({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `\r\n    <pizza-item [pizza]=\"pizza\"></pizza-item>\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-item/pizza-item-list/pizza-item-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `\r\n    <pizza-item-list [pizzas]=\"pizzas\"></pizza-item-list>\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-form/buttons/buttons.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onCreate: action('create'),\r\n    onUpdate: action('update'),\r\n    onRemove: action('remove')\r\n  },\r\n  template: `\r\n    <app-buttons\r\n        [exists]=\"exists\"\r\n        [form]=\"form\"\r\n        [pizza]=\"pizza\"\r\n        (create)=\"onCreate()\"\r\n        (update)=\"onUpdate()\"\r\n        (remove)=\"onRemove()\"\r\n    ></app-buttons>\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-form/pizza-name/pizza-name.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n    component: PizzaNameComponent,\r\n    template: `\r\n    <pizza-name\r\n        [price]=\"price\"\r\n        (isInvalid) = \"onIsInvalid($event)\"\r\n        (name) = \"onInputName($event)\"\r\n    ></pizza-name>\r\n      `,\r\n    props: {\r\n      ...args,\r\n      onIsInvalid: action('isInvalid'),\r\n      onInputName: action('name')\r\n    }\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/selected-toppings/selected-topping-item/selected-topping-item.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `\r\n    <div class=\"flex justify-items-start\">\r\n      <selected-topping-item\r\n          [topping]=\"topping\">\r\n      </selected-topping-item>\r\n    </div>\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/selected-toppings/selected-topping-list/selected-topping-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `\r\n    <div class=\"flex justify-items-start\">\r\n      <selected-topping-list\r\n          [toppings]=\"toppings\">\r\n      </selected-topping-list>\r\n    </div>\r\n  `\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/components/pizza-display/pizza-display.component.ts": [
                {
                    "name": "DROP_ANIMATION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-display/pizza-display.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger(\"drop\", [\n  transition(\":enter\", [\n    style({transform: \"translateY(-200px)\", opacity: 0}),\n    animate(\n      \"300ms cubic-bezier(1.000, 0.000, 0.000, 1.000)\",\n      style({transform: \"translateY(0)\", opacity: 1})\n    )\n  ]),\n  transition(\":leave\", [\n    style({transform: \"translateY(0)\", opacity: 1}),\n    animate(\n      \"200ms cubic-bezier(1.000, 0.000, 0.000, 1.000)\",\n      style({transform: \"translateY(-200px)\", opacity: 0})\n    )\n  ])\n])"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/shared/angular-material.module.ts": [
                {
                    "name": "modules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/angular-material.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  MatSnackBarModule,\r\n  MatBadgeModule\r\n]"
                }
            ],
            "src/app/services/selected-item.service.ts": [
                {
                    "name": "PIZZA_CONFIG_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/selected-item.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<Pizza>('PIZZA_CONFIG_TOKEN')"
                }
            ],
            "src/app/components/main-panel/main-panel.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/main-panel/main-panel.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/main-panel/main-panel.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `\r\n    <main-panel\r\n        [pizzas]=\"pizzas\"\r\n        [pizza]=\"pizza\"\r\n        [toppings]=\"toppings\"\r\n        [nToppings]=\"nToppings\"\r\n        >\r\n    </main-panel>\r\n  `\r\n})"
                }
            ],
            "src/app/components/pizza-display/pizza-display.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-display/pizza-display.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-display/pizza-display.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `<pizza-display [toppings]=\"toppings\"></pizza-display>`\r\n\r\n})"
                }
            ],
            "src/app/components/pizza-form/pizza-form.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-form/pizza-form.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-form/pizza-form.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    addToppings: action('selectedToppings'),\r\n    onCreate: action('create'),\r\n    onUpdate: action('update'),\r\n    onRemove: action('remove')\r\n  },\r\n  template: `\r\n  <pizza-form\r\n            [pizza]=\"pizza\"\r\n            [toppings]=\"toppings\"\r\n            (selectedToppings)=\"addToppings($event)\"\r\n            (create)=\"onCreate($event)\"\r\n            (update)=\"onUpdate($event)\"\r\n            (remove)=\"onRemove($event)\">\r\n        <pizza-display\r\n                [toppings]=\"nToppings\">\r\n        </pizza-display>\r\n  </pizza-form>\r\n  `\r\n})"
                }
            ],
            "src/app/components/pizza-toppings/pizza-toppings.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-toppings/pizza-toppings.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-toppings/pizza-toppings.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onSelect: action('selected')\r\n  },\r\n  decorators:[\r\n    moduleMetadata({\r\n      imports:[\r\n        PizzaModule,\r\n      ],\r\n    })\r\n  ],\r\n  template: ` <pizza-toppings [toppings]=\"toppings\"\r\n                                (selected)=\"onSelect($event)\"\r\n                ></pizza-toppings>\r\n  `\r\n})"
                }
            ],
            "src/app/components/pizza-item/pizza-item/pizza-item.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-item/pizza-item/pizza-item.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-item/pizza-item/pizza-item.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) =>({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `\r\n    <pizza-item [pizza]=\"pizza\"></pizza-item>\r\n  `\r\n})"
                }
            ],
            "src/app/components/pizza-item/pizza-item-list/pizza-item-list.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-item/pizza-item-list/pizza-item-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-item/pizza-item-list/pizza-item-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `\r\n    <pizza-item-list [pizzas]=\"pizzas\"></pizza-item-list>\r\n  `\r\n})"
                }
            ],
            "src/app/components/pizza-form/buttons/buttons.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-form/buttons/buttons.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-form/buttons/buttons.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onCreate: action('create'),\r\n    onUpdate: action('update'),\r\n    onRemove: action('remove')\r\n  },\r\n  template: `\r\n    <app-buttons\r\n        [exists]=\"exists\"\r\n        [form]=\"form\"\r\n        [pizza]=\"pizza\"\r\n        (create)=\"onCreate()\"\r\n        (update)=\"onUpdate()\"\r\n        (remove)=\"onRemove()\"\r\n    ></app-buttons>\r\n  `\r\n})"
                }
            ],
            "src/app/components/pizza-form/pizza-name/pizza-name.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-form/pizza-name/pizza-name.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-form/pizza-name/pizza-name.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n    component: PizzaNameComponent,\r\n    template: `\r\n    <pizza-name\r\n        [price]=\"price\"\r\n        (isInvalid) = \"onIsInvalid($event)\"\r\n        (name) = \"onInputName($event)\"\r\n    ></pizza-name>\r\n      `,\r\n    props: {\r\n      ...args,\r\n      onIsInvalid: action('isInvalid'),\r\n      onInputName: action('name')\r\n    }\r\n})"
                }
            ],
            "src/app/components/selected-toppings/selected-topping-item/selected-topping-item.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/selected-toppings/selected-topping-item/selected-topping-item.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/selected-toppings/selected-topping-item/selected-topping-item.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `\r\n    <div class=\"flex justify-items-start\">\r\n      <selected-topping-item\r\n          [topping]=\"topping\">\r\n      </selected-topping-item>\r\n    </div>\r\n  `\r\n})"
                }
            ],
            "src/app/components/selected-toppings/selected-topping-list/selected-topping-list.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/selected-toppings/selected-topping-list/selected-topping-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/selected-toppings/selected-topping-list/selected-topping-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `\r\n    <div class=\"flex justify-items-start\">\r\n      <selected-topping-list\r\n          [toppings]=\"toppings\">\r\n      </selected-topping-list>\r\n    </div>\r\n  `\r\n})"
                }
            ],
            "src/app/state/index.ts": [
                {
                    "name": "ProductsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[PizzasState, ToppingsState]"
                }
            ],
            "src/app/services/index.ts": [
                {
                    "name": "services",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[PizzasService, ToppingsService]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/components/pizza.module.ts",
                "module": "PizzaModule",
                "children": [
                    {
                        "path": "",
                        "component": "PizzaListComponent"
                    },
                    {
                        "path": "new",
                        "component": "PizzaItemComponent"
                    },
                    {
                        "path": ":pizzaId",
                        "component": "PizzaProductComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main-panel/main-panel.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main-panel/main-panel.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main-panel/main-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-display/pizza-display.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-display/pizza-display.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-display/pizza-display.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PizzaDisplayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-display/pizza-display.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DROP_ANIMATION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-form/buttons/buttons.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-form/buttons/buttons.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-form/buttons/buttons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-form/pizza-form.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-form/pizza-form.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-form/pizza-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PizzaFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-form/pizza-name/pizza-name.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-form/pizza-name/pizza-name.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-form/pizza-name/pizza-name.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PizzaNameComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-item/pizza-item-list/pizza-item-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-item/pizza-item-list/pizza-item-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-item/pizza-item-list/pizza-item-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PizzaItemListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-item/pizza-item/pizza-item.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-item/pizza-item/pizza-item.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-item/pizza-item/pizza-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PizzaItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-list/pizza-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PizzaListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-product/pizza-product.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PizzaProductComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-toppings/pizza-toppings.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-toppings/pizza-toppings.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-toppings/pizza-toppings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PizzaToppingsComponent",
                "coveragePercent": 8,
                "coverageCount": "1/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selected-toppings/selected-topping-item/selected-topping-item.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selected-toppings/selected-topping-item/selected-topping-item.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selected-toppings/selected-topping-item/selected-topping-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectedToppingItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selected-toppings/selected-topping-list/selected-topping-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selected-toppings/selected-topping-list/selected-topping-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selected-toppings/selected-topping-list/selected-topping-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectedToppingListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/pizza.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Pizza",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/topping.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SequenceTopping",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/topping.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Topping",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "services",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/pizzas.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PizzasService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/price.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PriceService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/selected-item.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SelectedItemService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/selected-item.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PIZZA_CONFIG_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/topping-added.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToppingAddedService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/topping-image.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToppingImageService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/topping-total.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToppingTotalService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/toppings.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToppingsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/angular-material.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ProductsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreatePizza",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreatePizzaFail",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreatePizzaSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadPizzas",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadPizzasFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadPizzasSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RemovePizza",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RemovePizzaFail",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RemovePizzaSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectPizza",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdatePizza",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdatePizzaFail",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdatePizzaSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Pizzac",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PizzasState",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PizzasStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/toppings.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadToppings",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/toppings.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadToppingsFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/toppings.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadToppingsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/toppings.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateToppings",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/toppings.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateToppingsFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/toppings.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateToppingsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/toppings.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "VisualiseToppings",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/toppings.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToppingsState",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/state/toppings.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ToppingsStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}