{
    "pipes": [],
    "interfaces": [
        {
            "name": "Pizza",
            "id": "interface-Pizza-3207d494064ab5a4e9fabd26842f91f6a312f4ba58859002244b703934febe93f1dc43305aab5a3119bb3b76580464bca772dc4011b8c4b616e585b93c1d82ba",
            "file": "src/app/models/pizza.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Topping } from './topping.model';\r\nimport { InjectionToken} from '@angular/core';\r\n\r\nexport interface Pizza {\r\n  id?: number;\r\n  price?: string;\r\n  name?: string;\r\n  toppings?: Topping[];\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "toppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Topping[]",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PizzasStateModel",
            "id": "interface-PizzasStateModel-5c03ab2262952b574d8abe8783acdf1517a497db94debc1300982efeab032ac8c3972519bcfb18a7e275f10c42193be9849159f128b700c31a2f66a2981f3043",
            "file": "src/app/state/pizzas.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { asapScheduler, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nimport {Pizza, Topping} from '../models';\r\nimport { PizzasService } from '../services';\r\nimport {\r\n  CreatePizza,\r\n  CreatePizzaFail,\r\n  CreatePizzaSuccess,\r\n  LoadPizzas,\r\n  LoadPizzasFail,\r\n  LoadPizzasSuccess, RemovePizza, RemovePizzaFail, RemovePizzaSuccess,\r\n  SelectPizza, UpdatePizza, UpdatePizzaFail, UpdatePizzaSuccess\r\n} from './pizzas.actions';\r\nimport {Navigate} from '@ngxs/router-plugin';\r\nimport {Injectable} from \"@angular/core\";\r\n\r\n// -----pizzas model --------\r\nexport class Pizzac implements Pizza{\r\n  id: number | undefined;\r\n  name: string | undefined;\r\n  toppings: Topping[] | undefined;\r\n}\r\n\r\nexport interface PizzasStateModel {\r\n  pizzas: Pizza[];\r\n  loaded: boolean;\r\n  loading: boolean;\r\n  selectedPizzaId: number;\r\n}\r\n// --- pizzas state : initialState---\r\n@State<PizzasStateModel>({\r\n  name: 'pizzasState',\r\n  defaults: {\r\n    pizzas: [],\r\n    loaded: false,\r\n    loading: false,\r\n    selectedPizzaId: 0\r\n  }\r\n})\r\n@Injectable()\r\nexport class PizzasState {\r\n  // temporary for localStorage version\r\n  temp_id:number = 10;\r\n\r\n  constructor(private pizzaService: PizzasService,\r\n              ) {}\r\n  @Selector()\r\n  static pizzas(state: PizzasStateModel) {\r\n    return state.pizzas;\r\n  }\r\n  @Selector()\r\n  static loaded(state: PizzasStateModel) {\r\n    return state.loaded;\r\n  }\r\n\r\n  @Selector()\r\n  static SelectedPizza(state: PizzasStateModel): Pizza {\r\n    //\r\n    return <Pizza>state.pizzas.find(\r\n      (pizza: Pizza) => pizza.id === state.selectedPizzaId\r\n    );\r\n  }\r\n  //---------------- load pizza ----------\r\n  @Action(LoadPizzas)\r\n  loadPizzas({ patchState, dispatch }: StateContext<PizzasStateModel>) {\r\n    patchState({ loading: true });\r\n    return this.pizzaService\r\n      .getPizzas()\r\n      .pipe(\r\n        map((pizzas: Pizza[]) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new LoadPizzasSuccess(pizzas))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(LoadPizzasSuccess)\r\n  loadPizzasSuccess(\r\n    { patchState }: StateContext<PizzasStateModel>,\r\n    { payload }: LoadPizzasSuccess\r\n  ) {\r\n    patchState({ pizzas: payload, loaded: true, loading: false });\r\n  }\r\n\r\n  @Action(LoadPizzasFail)\r\n  loadPizzasFail(\r\n    { dispatch }: StateContext<PizzasStateModel>,\r\n    { payload }: LoadPizzasFail\r\n  ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n\r\n  // ---- selected Pizza ----\r\n  @Action(SelectPizza)\r\n  selectedPizza(\r\n    { patchState }: StateContext<PizzasStateModel>,  { payload }: SelectPizza ) {\r\n    patchState({ selectedPizzaId: payload });\r\n  }\r\n  //---------------- create pizza ----------\r\n  @Action(CreatePizza)\r\n  createPizza({ patchState, dispatch }: StateContext<PizzasStateModel>, {payload}:CreatePizza) {\r\n    patchState({ loading: true });\r\n    return this.pizzaService\r\n      .createPizza(payload)\r\n      .pipe(\r\n        map((pizza: Pizza) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new CreatePizzaSuccess(pizza))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(CreatePizzaSuccess)\r\n  createPizzaSuccess(\r\n    { patchState,getState, dispatch }: StateContext<PizzasStateModel>, {payload}: any ,CreatePizzaSuccess: any ) {\r\n    this.temp_id = this.temp_id + 1;\r\n    payload.id = this.temp_id;\r\n    patchState({ pizzas:[...getState().pizzas,payload], loaded: true, loading: false });\r\n    dispatch(new Navigate(['./products']));\r\n\r\n  }\r\n\r\n  @Action(CreatePizzaFail)\r\n  createPizzaFail(\r\n    { dispatch }: StateContext<PizzasStateModel> ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n  //---------------- update pizza ----------\r\n  @Action(UpdatePizza)\r\n  updatePizza({ patchState, dispatch }: StateContext<PizzasStateModel>, {payload}:UpdatePizza) {\r\n    patchState({ loading: true });\r\n    return this.pizzaService\r\n      .updatePizza(payload)\r\n      .pipe(\r\n        map((pizza: Pizza) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new UpdatePizzaSuccess(pizza))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(UpdatePizzaSuccess)\r\n  updatePizzaSuccess(\r\n    { patchState,getState,dispatch }: StateContext<PizzasStateModel>, {payload}: UpdatePizzaSuccess ) {\r\n    //\r\n    const pizzas = getState().pizzas.filter(val=>val.id !== payload.id);\r\n    patchState({pizzas:[ ...pizzas,payload], loaded: true, loading: false });\r\n    dispatch(new Navigate(['./products']));\r\n  }\r\n\r\n  @Action(UpdatePizzaFail)\r\n  updatePizzaFail(\r\n    { dispatch }: StateContext<PizzasStateModel> ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n  //---------------- remove pizza ----------\r\n  payload:any = null;\r\n  @Action(RemovePizza)\r\n  removePizza({ patchState, dispatch }: StateContext<PizzasStateModel>, {payload}:RemovePizza) {\r\n    patchState({ loading: true });\r\n    this.payload = payload;\r\n    return this.pizzaService\r\n      .removePizza(payload)\r\n      .pipe(\r\n        map((pizza: Pizza) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new RemovePizzaSuccess(pizza))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(RemovePizzaSuccess)\r\n  removePizzaSuccess(\r\n    { patchState,getState, dispatch }: StateContext<PizzasStateModel>, {payload}:RemovePizzaSuccess ) {\r\n    //\r\n    const pizzas = getState().pizzas.filter(val => val.id !== payload.id)\r\n    // const pizzas = getState().pizzas.filter(val => val.id !== this.payload.id)\r\n    //\r\n    this.payload = null;\r\n    patchState({ pizzas:[...pizzas],loaded: true, loading: false });\r\n    dispatch(new Navigate(['./products']));\r\n\r\n  }\r\n\r\n  @Action(RemovePizzaFail)\r\n  removePizzaFail(\r\n    { dispatch }: StateContext<PizzasStateModel> ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "loaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "pizzas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "selectedPizzaId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SequenceTopping",
            "id": "interface-SequenceTopping-256a96a2e1b09ee866c02d6e2db0a45541cfe591e9f4e031bde3369bf94401304352006d33fb332faa350e5ee06c52c67d59f60a9e0f2534d861999a307899f0",
            "file": "src/app/models/topping.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Topping {\r\n  no?: number;\r\n  id?: number;\r\n  name?: string;\r\n  // [key: string]: any;\r\n  price?: number;\r\n  count?: number;\r\n  active?: boolean;\r\n}\r\nexport interface SequenceTopping extends Topping {\r\n  image?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "Topping"
        },
        {
            "name": "Topping",
            "id": "interface-Topping-256a96a2e1b09ee866c02d6e2db0a45541cfe591e9f4e031bde3369bf94401304352006d33fb332faa350e5ee06c52c67d59f60a9e0f2534d861999a307899f0",
            "file": "src/app/models/topping.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Topping {\r\n  no?: number;\r\n  id?: number;\r\n  name?: string;\r\n  // [key: string]: any;\r\n  price?: number;\r\n  count?: number;\r\n  active?: boolean;\r\n}\r\nexport interface SequenceTopping extends Topping {\r\n  image?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "no",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ToppingsStateModel",
            "id": "interface-ToppingsStateModel-a228be6e7ecac3f07282b579ccdd6c6310a029de6fe8bc2e081a9475673019c514af9051629c5150f5b3829223ebf70f934b6ea73464f1ed4a69f9d79794c2e8",
            "file": "src/app/state/toppings.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { asapScheduler, of } from 'rxjs';\r\nimport {catchError, map, tap} from 'rxjs/operators';\r\n\r\nimport { Topping } from '../models';\r\nimport { ToppingsService } from '../services';\r\nimport {\r\n  LoadToppings,\r\n  LoadToppingsFail,\r\n  LoadToppingsSuccess,\r\n  UpdateToppings, UpdateToppingsFail,\r\n  UpdateToppingsSuccess,\r\n  VisualiseToppings\r\n} from './toppings.actions';\r\nimport {PizzasStateModel} from './pizzas.state';\r\nimport {Injectable} from \"@angular/core\";\r\n\r\nexport interface ToppingsStateModel {\r\n  toppings: Topping[];\r\n  selectedToppings: Topping[];\r\n  loaded: boolean;\r\n  loading: boolean;\r\n}\r\n\r\n@State<ToppingsStateModel>({\r\n  name: 'toppingsState',\r\n  defaults: {\r\n    toppings: [],\r\n    selectedToppings: [],\r\n    loaded: false,\r\n    loading: false\r\n  }\r\n})\r\n@Injectable()\r\nexport class ToppingsState {\r\n  constructor(private toppingsService: ToppingsService) {}\r\n\r\n  @Selector()\r\n  static toppings(state: ToppingsStateModel): Topping[] {\r\n    return state.toppings;\r\n  }\r\n  @Selector()\r\n  static selectedToppings(state: ToppingsStateModel): Topping[] {\r\n    return state.selectedToppings;\r\n  }\r\n/*\r\n  @Selector()\r\n  static selectedToppingImages(state: ToppingsStateModel): any[] {\r\n    return state.selectedToppingImages;\r\n  }\r\n*/\r\n  // load Toppings\r\n  @Action(LoadToppings)\r\n  loadToppings({ patchState, dispatch }: StateContext<ToppingsStateModel>) {\r\n    patchState({ loading: true });\r\n    return this.toppingsService.getToppings().pipe(\r\n      map((toppings: Topping[]) => {\r\n        asapScheduler.schedule(() =>\r\n          dispatch(new LoadToppingsSuccess(toppings))\r\n        );\r\n      }),\r\n      catchError(err =>\r\n        of(asapScheduler.schedule(() => dispatch(new LoadToppingsFail())))\r\n      )\r\n    );\r\n  }\r\n\r\n  @Action(LoadToppingsSuccess)\r\n  loadToppingSuccess(\r\n    { patchState }: StateContext<ToppingsStateModel>,\r\n    action: LoadToppingsSuccess\r\n  ) {\r\n    // console.log('loadToppingSuccess action-->',action);\r\n    patchState({\r\n      toppings: action.payload,\r\n      loaded: true,\r\n      loading: false\r\n    });\r\n  }\r\n\r\n  @Action(LoadToppingsFail)\r\n  loadToppingsFail({ patchState }: StateContext<ToppingsStateModel>) {\r\n    // console.log('loadToppingFailure-->');\r\n    patchState({ loading: false, loaded: false });\r\n  }\r\n\r\n  // update Toppings\r\n  @Action(UpdateToppings)\r\n  updateToppings({ patchState, dispatch }: StateContext<ToppingsStateModel>) {\r\n/*\r\n    patchState({ loading: true });\r\n    return this.toppingsService.getToppings().pipe(\r\n      tap(val=>console.log('getToppings--val-->',val)),\r\n      map((toppings: Topping[]) => {\r\n        asapScheduler.schedule(() =>\r\n          dispatch(new UpdateToppingsSuccess(toppings))\r\n        );\r\n      }),\r\n      catchError(err =>\r\n        of(asapScheduler.schedule(() => dispatch(new UpdateToppingsFail())))\r\n      )\r\n    );\r\n*/\r\n  }\r\n\r\n  @Action(UpdateToppingsSuccess)\r\n  updateToppingSuccess(\r\n    { patchState, getState }: StateContext<ToppingsStateModel>,\r\n    action: UpdateToppingsSuccess\r\n  ) {\r\n    patchState({\r\n      toppings: getState().toppings,\r\n      selectedToppings: action.payload,\r\n      loaded: true,\r\n      loading: false\r\n    });\r\n  }\r\n\r\n  @Action(UpdateToppingsFail)\r\n  updateToppingsFail({ patchState }: StateContext<ToppingsStateModel>) {\r\n    console.log('loadToppingFailure-->');\r\n    patchState({ loading: false, loaded: false });\r\n  }\r\n\r\n  // ----visualise toppings -------\r\n/*\r\n  @Action(VisualiseToppings)\r\n  visualiseToppings( { patchState }: StateContext<ToppingsStateModel>,  action: VisualiseToppings ) {\r\n    patchState({ selectedToppings: action.payload });\r\n  }\r\n*/\r\n/*\r\n  @Action(VisualiseToppings)\r\n  visualiseToppings( {patchState}: StateContext<PizzasStateModel>,  action: VisualiseToppings ) {\r\n    patchState({ pizzas : action.payload})\r\n  }\r\n*/\r\n}\r\n",
            "properties": [
                {
                    "name": "loaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "selectedToppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Topping[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "toppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Topping[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "HelpMessageService",
            "id": "injectable-HelpMessageService-7c490b47737a4cd73b45e751948c76ba3844c32945d7bed5edd799c2344c0859bb40735570bc16c740587f441e3fee85b6d613742144d4a34eae4e65bed89783",
            "file": "src/app/services/helpMessage.ts",
            "properties": [
                {
                    "name": "overlayRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayRef | undefined",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "positions",
                    "defaultValue": "[\r\n    new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),\r\n    new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' })\r\n/*\r\n    new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\r\n    new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })\r\n*/\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methods": [
                {
                    "name": "closeHelpMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getInjector",
                    "args": [
                        {
                            "name": "data",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentInjector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentInjector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOverlayConfig",
                    "args": [
                        {
                            "name": "origin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOverlayPosition",
                    "args": [
                        {
                            "name": "origin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openHelpMessage",
                    "args": [
                        {
                            "name": "origin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayRef",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Inject, Injectable, InjectionToken, Injector} from '@angular/core';\r\nimport {ComponentPortal, PortalInjector} from '@angular/cdk/portal';\r\n// import {SelectedItemComponent} from './selected-item.component';\r\nimport {ConnectionPositionPair, Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\r\n// import {Pizza, Topping} from '../../models';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {HelpMessageComponent} from './help-message.component';\r\nexport const PIZZA_CONFIG_TOKEN = new InjectionToken<Message>('PIZZA_CONFIG_TOKEN');\r\nexport class Message {\r\n  constructor(public data: string) {};\r\n\r\n}\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HelpMessageService {\r\n  private overlayRef: OverlayRef | undefined;\r\n  // tToppings$: Subject<Topping[]>;  // Toppings for temporary display before saving;\r\n  constructor(private overlay: Overlay,\r\n              private parentInjector: Injector,\r\n  ) {\r\n    // this.tToppings$ = new Subject<Topping[]>();\r\n\r\n\r\n  }\r\n  closeHelpMessage() {\r\n    this.overlayRef && this.overlayRef.detach();\r\n  }\r\n  openHelpMessage(origin: any, message: any ): OverlayRef {\r\n\r\n    this.overlayRef = this.overlay.create( this.getOverlayConfig(origin));\r\n    const injector = this.getInjector(message, this.parentInjector);\r\n    const portal = new ComponentPortal(HelpMessageComponent,null,injector);\r\n    this.overlayRef.attach(portal);\r\n    return  this.overlayRef;\r\n  }\r\n  getOverlayConfig(origin: any) {\r\n    return new OverlayConfig({\r\n      width: '500px',\r\n      height: '500px',\r\n      positionStrategy: this.getOverlayPosition(origin),\r\n    })\r\n  }\r\n  positions = [\r\n    new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),\r\n    new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' })\r\n/*\r\n    new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\r\n    new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })\r\n*/\r\n  ];\r\n  getOverlayPosition(origin: any) {\r\n    return this.overlay.position()\r\n      .flexibleConnectedTo(origin)\r\n      .withPositions(this.positions)\r\n      // .withPositions(this.getPositions())\r\n      .withFlexibleDimensions(false)\r\n      .withPush(false)\r\n  }\r\n  getInjector(data: Message, parentInjector: Injector) {\r\n    const tokens = new WeakMap();\r\n\r\n    tokens.set( PIZZA_CONFIG_TOKEN, data);\r\n\r\n    return new PortalInjector(parentInjector, tokens);\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "parentInjector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parentInjector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PizzasService",
            "id": "injectable-PizzasService-b0c2bedf9613dfb055efd4a3270fa381fbd3bdd0b5518b7cd230a75a43f154833fab2cbc42d460730d5126b30c443117982f1da1f16dfdef580aeb80d876cbdf",
            "file": "src/app/services/pizzas.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createPizza",
                    "args": [
                        {
                            "name": "payload",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Pizza>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPizzas",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Pizza[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removePizza",
                    "args": [
                        {
                            "name": "payload",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Pizza>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePizza",
                    "args": [
                        {
                            "name": "payload",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Pizza>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport {Observable, throwError} from 'rxjs';\r\nimport {catchError, map} from 'rxjs/operators';\r\n\r\nimport { Pizza } from '../models';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PizzasService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getPizzas(): Observable<Pizza[]> {\r\n    return this.http\r\n      .get<Pizza[]>(`assets/json/db.json`)\r\n            // .get<Pizza[]>(`/api/pizzas`)\r\n      .pipe(\r\n        map( (val: any) =>val['pizzas']),\r\n        catchError((error: any) => throwError(error.json())));\r\n  }\r\n\r\n  createPizza(payload: Pizza): Observable<Pizza> {\r\n    return this.http\r\n      .post<Pizza>(`http://localhost:3000/pizzas`, payload)\r\n      .pipe(catchError((error: any) => throwError(error.json())));\r\n  }\r\n\r\n  updatePizza(payload: Pizza): Observable<Pizza> {\r\n    console.log('updatePizza-->',payload);\r\n    return this.http\r\n      .put<Pizza>(`http://localhost:3000/pizzas/${payload.id}`, payload)\r\n      .pipe(catchError((error: any) => throwError(error.json())));\r\n  }\r\n\r\n  removePizza(payload: Pizza): Observable<Pizza> {\r\n    return this.http\r\n      .delete<any>(`http://localhost:3000/pizzas/${payload.id}`)\r\n      .pipe(catchError((error: any) => throwError(error.json())));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PizzasState",
            "id": "injectable-PizzasState-5c03ab2262952b574d8abe8783acdf1517a497db94debc1300982efeab032ac8c3972519bcfb18a7e275f10c42193be9849159f128b700c31a2f66a2981f3043",
            "file": "src/app/state/pizzas.state.ts",
            "properties": [
                {
                    "name": "payload",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 183
                },
                {
                    "name": "temp_id",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methods": [
                {
                    "name": "createPizza",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "CreatePizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "CreatePizza"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "CreatePizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPizzaFail",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "CreatePizzaFail"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPizzaSuccess",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "CreatePizzaSuccess",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "CreatePizzaSuccess"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "CreatePizzaSuccess",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loaded",
                    "args": [
                        {
                            "name": "state",
                            "type": "PizzasStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "PizzasStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadPizzas",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "LoadPizzas"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadPizzasFail",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "LoadPizzasFail",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "LoadPizzasFail"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "LoadPizzasFail",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadPizzasSuccess",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "LoadPizzasSuccess",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "LoadPizzasSuccess"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "LoadPizzasSuccess",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pizzas",
                    "args": [
                        {
                            "name": "state",
                            "type": "PizzasStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "PizzasStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removePizza",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "RemovePizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "RemovePizza"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "RemovePizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removePizzaFail",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "RemovePizzaFail"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removePizzaSuccess",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "RemovePizzaSuccess",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "RemovePizzaSuccess"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "RemovePizzaSuccess",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedPizza",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "SelectPizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SelectPizza"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "SelectPizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "SelectedPizza",
                    "args": [
                        {
                            "name": "state",
                            "type": "PizzasStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Pizza",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "PizzasStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePizza",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "UpdatePizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "UpdatePizza"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "UpdatePizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePizzaFail",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "UpdatePizzaFail"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePizzaSuccess",
                    "args": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "UpdatePizzaSuccess",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "UpdatePizzaSuccess"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<PizzasStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "UpdatePizzaSuccess",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { asapScheduler, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nimport {Pizza, Topping} from '../models';\r\nimport { PizzasService } from '../services';\r\nimport {\r\n  CreatePizza,\r\n  CreatePizzaFail,\r\n  CreatePizzaSuccess,\r\n  LoadPizzas,\r\n  LoadPizzasFail,\r\n  LoadPizzasSuccess, RemovePizza, RemovePizzaFail, RemovePizzaSuccess,\r\n  SelectPizza, UpdatePizza, UpdatePizzaFail, UpdatePizzaSuccess\r\n} from './pizzas.actions';\r\nimport {Navigate} from '@ngxs/router-plugin';\r\nimport {Injectable} from \"@angular/core\";\r\n\r\n// -----pizzas model --------\r\nexport class Pizzac implements Pizza{\r\n  id: number | undefined;\r\n  name: string | undefined;\r\n  toppings: Topping[] | undefined;\r\n}\r\n\r\nexport interface PizzasStateModel {\r\n  pizzas: Pizza[];\r\n  loaded: boolean;\r\n  loading: boolean;\r\n  selectedPizzaId: number;\r\n}\r\n// --- pizzas state : initialState---\r\n@State<PizzasStateModel>({\r\n  name: 'pizzasState',\r\n  defaults: {\r\n    pizzas: [],\r\n    loaded: false,\r\n    loading: false,\r\n    selectedPizzaId: 0\r\n  }\r\n})\r\n@Injectable()\r\nexport class PizzasState {\r\n  // temporary for localStorage version\r\n  temp_id:number = 10;\r\n\r\n  constructor(private pizzaService: PizzasService,\r\n              ) {}\r\n  @Selector()\r\n  static pizzas(state: PizzasStateModel) {\r\n    return state.pizzas;\r\n  }\r\n  @Selector()\r\n  static loaded(state: PizzasStateModel) {\r\n    return state.loaded;\r\n  }\r\n\r\n  @Selector()\r\n  static SelectedPizza(state: PizzasStateModel): Pizza {\r\n    //\r\n    return <Pizza>state.pizzas.find(\r\n      (pizza: Pizza) => pizza.id === state.selectedPizzaId\r\n    );\r\n  }\r\n  //---------------- load pizza ----------\r\n  @Action(LoadPizzas)\r\n  loadPizzas({ patchState, dispatch }: StateContext<PizzasStateModel>) {\r\n    patchState({ loading: true });\r\n    return this.pizzaService\r\n      .getPizzas()\r\n      .pipe(\r\n        map((pizzas: Pizza[]) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new LoadPizzasSuccess(pizzas))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(LoadPizzasSuccess)\r\n  loadPizzasSuccess(\r\n    { patchState }: StateContext<PizzasStateModel>,\r\n    { payload }: LoadPizzasSuccess\r\n  ) {\r\n    patchState({ pizzas: payload, loaded: true, loading: false });\r\n  }\r\n\r\n  @Action(LoadPizzasFail)\r\n  loadPizzasFail(\r\n    { dispatch }: StateContext<PizzasStateModel>,\r\n    { payload }: LoadPizzasFail\r\n  ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n\r\n  // ---- selected Pizza ----\r\n  @Action(SelectPizza)\r\n  selectedPizza(\r\n    { patchState }: StateContext<PizzasStateModel>,  { payload }: SelectPizza ) {\r\n    patchState({ selectedPizzaId: payload });\r\n  }\r\n  //---------------- create pizza ----------\r\n  @Action(CreatePizza)\r\n  createPizza({ patchState, dispatch }: StateContext<PizzasStateModel>, {payload}:CreatePizza) {\r\n    patchState({ loading: true });\r\n    return this.pizzaService\r\n      .createPizza(payload)\r\n      .pipe(\r\n        map((pizza: Pizza) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new CreatePizzaSuccess(pizza))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(CreatePizzaSuccess)\r\n  createPizzaSuccess(\r\n    { patchState,getState, dispatch }: StateContext<PizzasStateModel>, {payload}: any ,CreatePizzaSuccess: any ) {\r\n    this.temp_id = this.temp_id + 1;\r\n    payload.id = this.temp_id;\r\n    patchState({ pizzas:[...getState().pizzas,payload], loaded: true, loading: false });\r\n    dispatch(new Navigate(['./products']));\r\n\r\n  }\r\n\r\n  @Action(CreatePizzaFail)\r\n  createPizzaFail(\r\n    { dispatch }: StateContext<PizzasStateModel> ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n  //---------------- update pizza ----------\r\n  @Action(UpdatePizza)\r\n  updatePizza({ patchState, dispatch }: StateContext<PizzasStateModel>, {payload}:UpdatePizza) {\r\n    patchState({ loading: true });\r\n    return this.pizzaService\r\n      .updatePizza(payload)\r\n      .pipe(\r\n        map((pizza: Pizza) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new UpdatePizzaSuccess(pizza))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(UpdatePizzaSuccess)\r\n  updatePizzaSuccess(\r\n    { patchState,getState,dispatch }: StateContext<PizzasStateModel>, {payload}: UpdatePizzaSuccess ) {\r\n    //\r\n    const pizzas = getState().pizzas.filter(val=>val.id !== payload.id);\r\n    patchState({pizzas:[ ...pizzas,payload], loaded: true, loading: false });\r\n    dispatch(new Navigate(['./products']));\r\n  }\r\n\r\n  @Action(UpdatePizzaFail)\r\n  updatePizzaFail(\r\n    { dispatch }: StateContext<PizzasStateModel> ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n  //---------------- remove pizza ----------\r\n  payload:any = null;\r\n  @Action(RemovePizza)\r\n  removePizza({ patchState, dispatch }: StateContext<PizzasStateModel>, {payload}:RemovePizza) {\r\n    patchState({ loading: true });\r\n    this.payload = payload;\r\n    return this.pizzaService\r\n      .removePizza(payload)\r\n      .pipe(\r\n        map((pizza: Pizza) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new RemovePizzaSuccess(pizza))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(RemovePizzaSuccess)\r\n  removePizzaSuccess(\r\n    { patchState,getState, dispatch }: StateContext<PizzasStateModel>, {payload}:RemovePizzaSuccess ) {\r\n    //\r\n    const pizzas = getState().pizzas.filter(val => val.id !== payload.id)\r\n    // const pizzas = getState().pizzas.filter(val => val.id !== this.payload.id)\r\n    //\r\n    this.payload = null;\r\n    patchState({ pizzas:[...pizzas],loaded: true, loading: false });\r\n    dispatch(new Navigate(['./products']));\r\n\r\n  }\r\n\r\n  @Action(RemovePizzaFail)\r\n  removePizzaFail(\r\n    { dispatch }: StateContext<PizzasStateModel> ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "pizzaService",
                        "type": "PizzasService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "pizzaService",
                        "type": "PizzasService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PriceService",
            "id": "injectable-PriceService-a21819246d56ec27b4693f869b7e8b54b64d6f5a966a298981a47a4de0b3487d24048050956844014c3eccc881b15e503199035265e2c49166908afc760c7360",
            "file": "src/app/services/price.service.ts",
            "properties": [
                {
                    "name": "counter",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "toppings$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Topping[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "ToppingsState.toppings"
                        }
                    ]
                }
            ],
            "methods": [
                {
                    "name": "calcSubTotalToppings",
                    "args": [
                        {
                            "name": "toppings",
                            "type": "Topping[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "toppings",
                            "type": "Topping[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcTotal",
                    "args": [
                        {
                            "name": "topp",
                            "type": "Topping[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "topp",
                            "type": "Topping[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {Pizza, Topping} from '../models';\r\nimport {from, Observable} from 'rxjs';\r\nimport {groupBy, map, mergeMap, pluck, tap, toArray} from 'rxjs/operators';\r\nimport {Pizzac, ToppingsState} from '../state';\r\nimport {Select} from '@ngxs/store';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PriceService {\r\n  counter = 0;\r\n  @Select(ToppingsState.toppings) toppings$: Observable<Topping[]> | undefined;\r\n\r\n  constructor() {}\r\n  calcSubTotalToppings(toppings: Topping[]) {\r\n    let id: any = null;\r\n    let name: any;\r\n    let price: number;\r\n    let data: any[] = [];\r\n    //\r\n    return from( toppings).pipe(\r\n      groupBy( value => value.id),\r\n      mergeMap( group => group.pipe(toArray())),\r\n      map( value => {\r\n        value.map( v2 => {\r\n          id = v2.id;\r\n          name = v2.name;\r\n          price = v2.price;\r\n        });\r\n        data.push({id:id, name:name, count:value.length, price: price});\r\n      }),\r\n      map( _ => data)\r\n      // map( val => val),\r\n    )/*.subscribe();\r\n    return data;*/\r\n  }\r\n  calcTotal(topp:Topping[]) {\r\n    //\r\n  let total: number = 0;\r\n    return from(topp).pipe(\r\n      tap( (p1: any) => {\r\n        // rtopp.push({ id: p1.id, name: p1.name, count: p1.count, price: parseFloat((price[p1.id-1].price * p1.count).toFixed(1))});\r\n        let tval = p1.price * p1.count;\r\n        total =  total + tval;\r\n        }\r\n       ),\r\n      map( val => total)\r\n    )\r\n\r\n    /*.subscribe();\r\n       return (total * 1000).toLocaleString();*/\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "type": "injectable"
        },
        {
            "name": "SelectedItemService",
            "id": "injectable-SelectedItemService-e0071220189745c1a6721df7ad6115ace045f5f14f655d062365e0fb61ce26b42fd956ce3af032138e9d2e6036f74d9826287e2dbda37235d6d8d7347eb65899",
            "file": "src/app/services/selected-item.service.ts",
            "properties": [
                {
                    "name": "overlayRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayRef | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "positions",
                    "defaultValue": "[\r\n    new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\r\n    new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methods": [
                {
                    "name": "getInjector",
                    "args": [
                        {
                            "name": "data",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentInjector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentInjector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOverlayConfig",
                    "args": [
                        {
                            "name": "origin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOverlayPosition",
                    "args": [
                        {
                            "name": "origin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSelectedToppings",
                    "args": [
                        {
                            "name": "origin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pizza",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayRef",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pizza",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Inject, Injectable, InjectionToken, Injector} from '@angular/core';\r\nimport {ComponentPortal, PortalInjector} from '@angular/cdk/portal';\r\nimport {ConnectionPositionPair, Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\r\nimport {Pizza} from \"../models\";\r\nimport {\r\n  SelectedToppingListComponent\r\n} from \"../components/selected-toppings/selected-topping-list/selected-topping-list.component\";\r\nexport const PIZZA_CONFIG_TOKEN = new InjectionToken<Pizza>('PIZZA_CONFIG_TOKEN');\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SelectedItemService {\r\n  private overlayRef: OverlayRef | undefined;\r\n// Toppings for temporary display before saving;\r\n\r\n  constructor(private overlay: Overlay,\r\n              private parentInjector: Injector,\r\n               ) {\r\n    // this.tToppings$ = new Subject<Topping[]>();\r\n\r\n\r\n  }\r\n\r\n  openSelectedToppings(origin: any, pizza: Pizza): OverlayRef {\r\n    this.overlayRef = this.overlay.create( this.getOverlayConfig(origin));\r\n    const injector = this.getInjector(pizza, this.parentInjector);\r\n    const portal = new ComponentPortal(SelectedToppingListComponent,null,injector);\r\n    this.overlayRef.attach(portal);\r\n    console.log(' overlay, ', this.overlayRef)\r\n    return  this.overlayRef;\r\n  }\r\n  getOverlayConfig(origin : any) {\r\n    return new OverlayConfig({\r\n      width: '200px',\r\n      height: '100px',\r\n      positionStrategy: this.getOverlayPosition(origin),\r\n    })\r\n  }\r\n  positions = [\r\n    new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\r\n    new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })\r\n  ];\r\n  getOverlayPosition(origin: any) {\r\n    return this.overlay.position()\r\n      .flexibleConnectedTo(origin)\r\n      .withPositions(this.positions)\r\n      // .withPositions(this.getPositions())\r\n      .withFlexibleDimensions(false)\r\n      .withPush(false)\r\n  }\r\n  getInjector(data: Pizza, parentInjector: Injector) {\r\n    const tokens = new WeakMap();\r\n\r\n    tokens.set( PIZZA_CONFIG_TOKEN, data);\r\n\r\n    return new PortalInjector(parentInjector, tokens);\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "parentInjector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parentInjector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ToppingAddedService",
            "id": "injectable-ToppingAddedService-8e833c16c682568db9ec74d1d267cd59d6c9d1da40666b5921d385ac76947878eaa5f9dadf8d5911401a569421087a56bb224d1a942aa2211d94d9be03fbd052",
            "file": "src/app/services/topping-added.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToppingAddedService {\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "ToppingImageService",
            "id": "injectable-ToppingImageService-67fffe04d84148c1e0d7a288fd2b692431fe38226d90170e0c6bc342a9fdd82cfdf87a08e247ef7442a1ed4d91db6ac426ea4da4f69ce28e2d97d0731c8cc33e",
            "file": "src/app/services/topping-image.service.ts",
            "properties": [
                {
                    "name": "counter",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "setEachToppingImage",
                    "args": [
                        {
                            "name": "toppings",
                            "type": "Topping[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "toppings",
                            "type": "Topping[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {Topping} from '../models';\r\nimport {from} from 'rxjs';\r\nimport {distinct, map, pluck, takeLast, tap} from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToppingImageService {\r\n  counter:any = 0;\r\n  constructor() { }\r\n  // Before action of setting  image name, named sequence no for each topping object.\r\n  // to layering each selected toppings by z-index;\r\n  // Extract id of toppings, which was added by inserting action.\r\n  // Remove duplicated id\r\n  // Set image name to each toppings.\r\n  // Get the last array, which is duplicated by pluck function.\r\n  // Sort each topping array by the sequence no\r\n  setEachToppingImage(toppings:Topping[]) {\r\n    let arr: any[] = [];\r\n    let no = 1;\r\n    let data: any[] = [];\r\n    if( !toppings ) { // @ts-ignore\r\n      return ;\r\n    }\r\n    toppings.map( val => data.push ({ no:no++, id:val.id, name: val.name }));\r\n    from(data).pipe(\r\n      pluck('id'),\r\n      distinct(),\r\n      tap ( v1 => {\r\n        let count = 1;\r\n        data.map( v2 => {\r\n          if( v2.id === v1) {\r\n            arr.push({no: v2.no, id:v2.id, name:v2.name, image: v2.name+'_'+ (count++).toString()})\r\n          }\r\n        });\r\n      }),\r\n      map(() => arr ),\r\n      takeLast(1),\r\n    ).subscribe();\r\n    arr.sort((a,b) => {return a.no < b.no ? -1 : a.no > b.no ? 1 : 0; });\r\n    // console.log('arr',arr)\r\n    data = [];\r\n    arr.map( val => data.push({id:val.id, name: val.name, image: val.image }));\r\n    return data;\r\n\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "ToppingsService",
            "id": "injectable-ToppingsService-013531b3a4acddf88af6b6055bea4cce95f8efe51853583f7e55fc0b2464dcaab4ea11c1df92dbafd3cf115fd9b5ac10f226b647eb72c1f8d4c34fbe07b7ee73",
            "file": "src/app/services/toppings.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getToppings",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Topping[]>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport {catchError, map, tap} from 'rxjs/operators';\r\n// import 'rxjs/operators';\r\n// import 'rxjs/add/observable/throw';\r\n\r\nimport { Topping } from '../models';\r\nimport {throwError} from \"rxjs\";\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ToppingsService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getToppings(): Observable<Topping[]> {\r\n    return this.http\r\n      .get<Topping[]>(`assets/json/db.json`)\r\n      .pipe(\r\n        // tap( val=> console.log('read toppings', val)),\r\n        map( (val: any)=> val['toppings']),\r\n        catchError((error: any) => throwError(error.json())));\r\n  }\r\n/*\r\n  getToppings(): Observable<Topping[]> {\r\n    return this.http\r\n      .get<Topping[]>(`http://localhost:3000/toppings`)\r\n      .pipe(\r\n        tap( val=> console.log('read toppings', val)),\r\n        catchError((error: any) => Observable.throw(error.json())));\r\n  }\r\n*/\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ToppingsState",
            "id": "injectable-ToppingsState-a228be6e7ecac3f07282b579ccdd6c6310a029de6fe8bc2e081a9475673019c514af9051629c5150f5b3829223ebf70f934b6ea73464f1ed4a69f9d79794c2e8",
            "file": "src/app/state/toppings.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "loadToppings",
                    "args": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "LoadToppings"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadToppingsFail",
                    "args": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "LoadToppingsFail"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadToppingSuccess",
                    "args": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "LoadToppingsSuccess",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "LoadToppingsSuccess"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "LoadToppingsSuccess",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedToppings",
                    "args": [
                        {
                            "name": "state",
                            "type": "ToppingsStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Topping[]",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "ToppingsStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toppings",
                    "args": [
                        {
                            "name": "state",
                            "type": "ToppingsStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Topping[]",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "ToppingsStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateToppings",
                    "args": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "UpdateToppings"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateToppingsFail",
                    "args": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "UpdateToppingsFail"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateToppingSuccess",
                    "args": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "UpdateToppingsSuccess",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "UpdateToppingsSuccess"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<ToppingsStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "UpdateToppingsSuccess",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { asapScheduler, of } from 'rxjs';\r\nimport {catchError, map, tap} from 'rxjs/operators';\r\n\r\nimport { Topping } from '../models';\r\nimport { ToppingsService } from '../services';\r\nimport {\r\n  LoadToppings,\r\n  LoadToppingsFail,\r\n  LoadToppingsSuccess,\r\n  UpdateToppings, UpdateToppingsFail,\r\n  UpdateToppingsSuccess,\r\n  VisualiseToppings\r\n} from './toppings.actions';\r\nimport {PizzasStateModel} from './pizzas.state';\r\nimport {Injectable} from \"@angular/core\";\r\n\r\nexport interface ToppingsStateModel {\r\n  toppings: Topping[];\r\n  selectedToppings: Topping[];\r\n  loaded: boolean;\r\n  loading: boolean;\r\n}\r\n\r\n@State<ToppingsStateModel>({\r\n  name: 'toppingsState',\r\n  defaults: {\r\n    toppings: [],\r\n    selectedToppings: [],\r\n    loaded: false,\r\n    loading: false\r\n  }\r\n})\r\n@Injectable()\r\nexport class ToppingsState {\r\n  constructor(private toppingsService: ToppingsService) {}\r\n\r\n  @Selector()\r\n  static toppings(state: ToppingsStateModel): Topping[] {\r\n    return state.toppings;\r\n  }\r\n  @Selector()\r\n  static selectedToppings(state: ToppingsStateModel): Topping[] {\r\n    return state.selectedToppings;\r\n  }\r\n/*\r\n  @Selector()\r\n  static selectedToppingImages(state: ToppingsStateModel): any[] {\r\n    return state.selectedToppingImages;\r\n  }\r\n*/\r\n  // load Toppings\r\n  @Action(LoadToppings)\r\n  loadToppings({ patchState, dispatch }: StateContext<ToppingsStateModel>) {\r\n    patchState({ loading: true });\r\n    return this.toppingsService.getToppings().pipe(\r\n      map((toppings: Topping[]) => {\r\n        asapScheduler.schedule(() =>\r\n          dispatch(new LoadToppingsSuccess(toppings))\r\n        );\r\n      }),\r\n      catchError(err =>\r\n        of(asapScheduler.schedule(() => dispatch(new LoadToppingsFail())))\r\n      )\r\n    );\r\n  }\r\n\r\n  @Action(LoadToppingsSuccess)\r\n  loadToppingSuccess(\r\n    { patchState }: StateContext<ToppingsStateModel>,\r\n    action: LoadToppingsSuccess\r\n  ) {\r\n    // console.log('loadToppingSuccess action-->',action);\r\n    patchState({\r\n      toppings: action.payload,\r\n      loaded: true,\r\n      loading: false\r\n    });\r\n  }\r\n\r\n  @Action(LoadToppingsFail)\r\n  loadToppingsFail({ patchState }: StateContext<ToppingsStateModel>) {\r\n    // console.log('loadToppingFailure-->');\r\n    patchState({ loading: false, loaded: false });\r\n  }\r\n\r\n  // update Toppings\r\n  @Action(UpdateToppings)\r\n  updateToppings({ patchState, dispatch }: StateContext<ToppingsStateModel>) {\r\n/*\r\n    patchState({ loading: true });\r\n    return this.toppingsService.getToppings().pipe(\r\n      tap(val=>console.log('getToppings--val-->',val)),\r\n      map((toppings: Topping[]) => {\r\n        asapScheduler.schedule(() =>\r\n          dispatch(new UpdateToppingsSuccess(toppings))\r\n        );\r\n      }),\r\n      catchError(err =>\r\n        of(asapScheduler.schedule(() => dispatch(new UpdateToppingsFail())))\r\n      )\r\n    );\r\n*/\r\n  }\r\n\r\n  @Action(UpdateToppingsSuccess)\r\n  updateToppingSuccess(\r\n    { patchState, getState }: StateContext<ToppingsStateModel>,\r\n    action: UpdateToppingsSuccess\r\n  ) {\r\n    patchState({\r\n      toppings: getState().toppings,\r\n      selectedToppings: action.payload,\r\n      loaded: true,\r\n      loading: false\r\n    });\r\n  }\r\n\r\n  @Action(UpdateToppingsFail)\r\n  updateToppingsFail({ patchState }: StateContext<ToppingsStateModel>) {\r\n    console.log('loadToppingFailure-->');\r\n    patchState({ loading: false, loaded: false });\r\n  }\r\n\r\n  // ----visualise toppings -------\r\n/*\r\n  @Action(VisualiseToppings)\r\n  visualiseToppings( { patchState }: StateContext<ToppingsStateModel>,  action: VisualiseToppings ) {\r\n    patchState({ selectedToppings: action.payload });\r\n  }\r\n*/\r\n/*\r\n  @Action(VisualiseToppings)\r\n  visualiseToppings( {patchState}: StateContext<PizzasStateModel>,  action: VisualiseToppings ) {\r\n    patchState({ pizzas : action.payload})\r\n  }\r\n*/\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toppingsService",
                        "type": "ToppingsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "toppingsService",
                        "type": "ToppingsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ToppingTotalService",
            "id": "injectable-ToppingTotalService-bc9aebd898ec26e8e958eb2b93c166d38f3bdbcbd3658d36ebe0127ed55aa1484baba1451d19b37fad8829839a8fc11f2766131ca67e7978839dfb5dbd15ea2e",
            "file": "src/app/services/topping-total.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToppingTotalService {\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "CreatePizza",
            "id": "class-CreatePizza-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Create Pizza'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreatePizzaFail",
            "id": "class-CreatePizzaFail-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Create Pizza Fail'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreatePizzaSuccess",
            "id": "class-CreatePizzaSuccess-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Create Pizza Success'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoadPizzas",
            "id": "class-LoadPizzas-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Load Pizzas'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoadPizzasFail",
            "id": "class-LoadPizzasFail-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Load Pizzas Fail'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoadPizzasSuccess",
            "id": "class-LoadPizzasSuccess-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Pizza[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Pizza[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza[]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Load Pizzas Success'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoadToppings",
            "id": "class-LoadToppings-aa26f85bb40e17df7dbbabe250b5c4eeb40223e027222a565f08138a973a409d8c6c08ee7532f5878447cec8ce9f9fe695ab396343b81401906a5f26c5a77451",
            "file": "src/app/state/toppings.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Topping } from '../models/topping.model';\r\n\r\n// --- topping actions----\r\nexport class LoadToppings {\r\n  static readonly type = '[Toppings] Load Toppings';\r\n}\r\n\r\nexport class LoadToppingsSuccess {\r\n  static readonly type = '[Toppings] Load Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class LoadToppingsFail {\r\n  static readonly type = '[Toppings] Load Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\nexport class UpdateToppings {\r\n  static readonly type = '[Toppings] Update Toppings';\r\n}\r\n\r\nexport class UpdateToppingsSuccess {\r\n  static readonly type = '[Toppings] Update Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class UpdateToppingsFail {\r\n  static readonly type = '[Toppings] Update Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\nexport class VisualiseToppings {\r\n  static readonly type = '[Toppings] Visualize Topping';\r\n  // constructor(public readonly payload: Topping[]) {}\r\n  constructor(public readonly payload: number[]) {}\r\n}\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Toppings] Load Toppings'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoadToppingsFail",
            "id": "class-LoadToppingsFail-aa26f85bb40e17df7dbbabe250b5c4eeb40223e027222a565f08138a973a409d8c6c08ee7532f5878447cec8ce9f9fe695ab396343b81401906a5f26c5a77451",
            "file": "src/app/state/toppings.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Topping } from '../models/topping.model';\r\n\r\n// --- topping actions----\r\nexport class LoadToppings {\r\n  static readonly type = '[Toppings] Load Toppings';\r\n}\r\n\r\nexport class LoadToppingsSuccess {\r\n  static readonly type = '[Toppings] Load Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class LoadToppingsFail {\r\n  static readonly type = '[Toppings] Load Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\nexport class UpdateToppings {\r\n  static readonly type = '[Toppings] Update Toppings';\r\n}\r\n\r\nexport class UpdateToppingsSuccess {\r\n  static readonly type = '[Toppings] Update Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class UpdateToppingsFail {\r\n  static readonly type = '[Toppings] Update Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\nexport class VisualiseToppings {\r\n  static readonly type = '[Toppings] Visualize Topping';\r\n  // constructor(public readonly payload: Topping[]) {}\r\n  constructor(public readonly payload: number[]) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Toppings] Load Toppings Fail'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoadToppingsSuccess",
            "id": "class-LoadToppingsSuccess-aa26f85bb40e17df7dbbabe250b5c4eeb40223e027222a565f08138a973a409d8c6c08ee7532f5878447cec8ce9f9fe695ab396343b81401906a5f26c5a77451",
            "file": "src/app/state/toppings.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Topping } from '../models/topping.model';\r\n\r\n// --- topping actions----\r\nexport class LoadToppings {\r\n  static readonly type = '[Toppings] Load Toppings';\r\n}\r\n\r\nexport class LoadToppingsSuccess {\r\n  static readonly type = '[Toppings] Load Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class LoadToppingsFail {\r\n  static readonly type = '[Toppings] Load Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\nexport class UpdateToppings {\r\n  static readonly type = '[Toppings] Update Toppings';\r\n}\r\n\r\nexport class UpdateToppingsSuccess {\r\n  static readonly type = '[Toppings] Update Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class UpdateToppingsFail {\r\n  static readonly type = '[Toppings] Update Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\nexport class VisualiseToppings {\r\n  static readonly type = '[Toppings] Visualize Topping';\r\n  // constructor(public readonly payload: Topping[]) {}\r\n  constructor(public readonly payload: number[]) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Topping[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Topping[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Topping[]",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Toppings] Load Toppings Success'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Message",
            "id": "class-Message-7c490b47737a4cd73b45e751948c76ba3844c32945d7bed5edd799c2344c0859bb40735570bc16c740587f441e3fee85b6d613742144d4a34eae4e65bed89783",
            "file": "src/app/services/helpMessage.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Inject, Injectable, InjectionToken, Injector} from '@angular/core';\r\nimport {ComponentPortal, PortalInjector} from '@angular/cdk/portal';\r\n// import {SelectedItemComponent} from './selected-item.component';\r\nimport {ConnectionPositionPair, Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\r\n// import {Pizza, Topping} from '../../models';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {HelpMessageComponent} from './help-message.component';\r\nexport const PIZZA_CONFIG_TOKEN = new InjectionToken<Message>('PIZZA_CONFIG_TOKEN');\r\nexport class Message {\r\n  constructor(public data: string) {};\r\n\r\n}\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HelpMessageService {\r\n  private overlayRef: OverlayRef | undefined;\r\n  // tToppings$: Subject<Topping[]>;  // Toppings for temporary display before saving;\r\n  constructor(private overlay: Overlay,\r\n              private parentInjector: Injector,\r\n  ) {\r\n    // this.tToppings$ = new Subject<Topping[]>();\r\n\r\n\r\n  }\r\n  closeHelpMessage() {\r\n    this.overlayRef && this.overlayRef.detach();\r\n  }\r\n  openHelpMessage(origin: any, message: any ): OverlayRef {\r\n\r\n    this.overlayRef = this.overlay.create( this.getOverlayConfig(origin));\r\n    const injector = this.getInjector(message, this.parentInjector);\r\n    const portal = new ComponentPortal(HelpMessageComponent,null,injector);\r\n    this.overlayRef.attach(portal);\r\n    return  this.overlayRef;\r\n  }\r\n  getOverlayConfig(origin: any) {\r\n    return new OverlayConfig({\r\n      width: '500px',\r\n      height: '500px',\r\n      positionStrategy: this.getOverlayPosition(origin),\r\n    })\r\n  }\r\n  positions = [\r\n    new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),\r\n    new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' })\r\n/*\r\n    new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\r\n    new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })\r\n*/\r\n  ];\r\n  getOverlayPosition(origin: any) {\r\n    return this.overlay.position()\r\n      .flexibleConnectedTo(origin)\r\n      .withPositions(this.positions)\r\n      // .withPositions(this.getPositions())\r\n      .withFlexibleDimensions(false)\r\n      .withPush(false)\r\n  }\r\n  getInjector(data: Message, parentInjector: Injector) {\r\n    const tokens = new WeakMap();\r\n\r\n    tokens.set( PIZZA_CONFIG_TOKEN, data);\r\n\r\n    return new PortalInjector(parentInjector, tokens);\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Pizzac",
            "id": "class-Pizzac-5c03ab2262952b574d8abe8783acdf1517a497db94debc1300982efeab032ac8c3972519bcfb18a7e275f10c42193be9849159f128b700c31a2f66a2981f3043",
            "file": "src/app/state/pizzas.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { asapScheduler, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nimport {Pizza, Topping} from '../models';\r\nimport { PizzasService } from '../services';\r\nimport {\r\n  CreatePizza,\r\n  CreatePizzaFail,\r\n  CreatePizzaSuccess,\r\n  LoadPizzas,\r\n  LoadPizzasFail,\r\n  LoadPizzasSuccess, RemovePizza, RemovePizzaFail, RemovePizzaSuccess,\r\n  SelectPizza, UpdatePizza, UpdatePizzaFail, UpdatePizzaSuccess\r\n} from './pizzas.actions';\r\nimport {Navigate} from '@ngxs/router-plugin';\r\nimport {Injectable} from \"@angular/core\";\r\n\r\n// -----pizzas model --------\r\nexport class Pizzac implements Pizza{\r\n  id: number | undefined;\r\n  name: string | undefined;\r\n  toppings: Topping[] | undefined;\r\n}\r\n\r\nexport interface PizzasStateModel {\r\n  pizzas: Pizza[];\r\n  loaded: boolean;\r\n  loading: boolean;\r\n  selectedPizzaId: number;\r\n}\r\n// --- pizzas state : initialState---\r\n@State<PizzasStateModel>({\r\n  name: 'pizzasState',\r\n  defaults: {\r\n    pizzas: [],\r\n    loaded: false,\r\n    loading: false,\r\n    selectedPizzaId: 0\r\n  }\r\n})\r\n@Injectable()\r\nexport class PizzasState {\r\n  // temporary for localStorage version\r\n  temp_id:number = 10;\r\n\r\n  constructor(private pizzaService: PizzasService,\r\n              ) {}\r\n  @Selector()\r\n  static pizzas(state: PizzasStateModel) {\r\n    return state.pizzas;\r\n  }\r\n  @Selector()\r\n  static loaded(state: PizzasStateModel) {\r\n    return state.loaded;\r\n  }\r\n\r\n  @Selector()\r\n  static SelectedPizza(state: PizzasStateModel): Pizza {\r\n    //\r\n    return <Pizza>state.pizzas.find(\r\n      (pizza: Pizza) => pizza.id === state.selectedPizzaId\r\n    );\r\n  }\r\n  //---------------- load pizza ----------\r\n  @Action(LoadPizzas)\r\n  loadPizzas({ patchState, dispatch }: StateContext<PizzasStateModel>) {\r\n    patchState({ loading: true });\r\n    return this.pizzaService\r\n      .getPizzas()\r\n      .pipe(\r\n        map((pizzas: Pizza[]) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new LoadPizzasSuccess(pizzas))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(LoadPizzasSuccess)\r\n  loadPizzasSuccess(\r\n    { patchState }: StateContext<PizzasStateModel>,\r\n    { payload }: LoadPizzasSuccess\r\n  ) {\r\n    patchState({ pizzas: payload, loaded: true, loading: false });\r\n  }\r\n\r\n  @Action(LoadPizzasFail)\r\n  loadPizzasFail(\r\n    { dispatch }: StateContext<PizzasStateModel>,\r\n    { payload }: LoadPizzasFail\r\n  ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n\r\n  // ---- selected Pizza ----\r\n  @Action(SelectPizza)\r\n  selectedPizza(\r\n    { patchState }: StateContext<PizzasStateModel>,  { payload }: SelectPizza ) {\r\n    patchState({ selectedPizzaId: payload });\r\n  }\r\n  //---------------- create pizza ----------\r\n  @Action(CreatePizza)\r\n  createPizza({ patchState, dispatch }: StateContext<PizzasStateModel>, {payload}:CreatePizza) {\r\n    patchState({ loading: true });\r\n    return this.pizzaService\r\n      .createPizza(payload)\r\n      .pipe(\r\n        map((pizza: Pizza) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new CreatePizzaSuccess(pizza))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(CreatePizzaSuccess)\r\n  createPizzaSuccess(\r\n    { patchState,getState, dispatch }: StateContext<PizzasStateModel>, {payload}: any ,CreatePizzaSuccess: any ) {\r\n    this.temp_id = this.temp_id + 1;\r\n    payload.id = this.temp_id;\r\n    patchState({ pizzas:[...getState().pizzas,payload], loaded: true, loading: false });\r\n    dispatch(new Navigate(['./products']));\r\n\r\n  }\r\n\r\n  @Action(CreatePizzaFail)\r\n  createPizzaFail(\r\n    { dispatch }: StateContext<PizzasStateModel> ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n  //---------------- update pizza ----------\r\n  @Action(UpdatePizza)\r\n  updatePizza({ patchState, dispatch }: StateContext<PizzasStateModel>, {payload}:UpdatePizza) {\r\n    patchState({ loading: true });\r\n    return this.pizzaService\r\n      .updatePizza(payload)\r\n      .pipe(\r\n        map((pizza: Pizza) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new UpdatePizzaSuccess(pizza))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(UpdatePizzaSuccess)\r\n  updatePizzaSuccess(\r\n    { patchState,getState,dispatch }: StateContext<PizzasStateModel>, {payload}: UpdatePizzaSuccess ) {\r\n    //\r\n    const pizzas = getState().pizzas.filter(val=>val.id !== payload.id);\r\n    patchState({pizzas:[ ...pizzas,payload], loaded: true, loading: false });\r\n    dispatch(new Navigate(['./products']));\r\n  }\r\n\r\n  @Action(UpdatePizzaFail)\r\n  updatePizzaFail(\r\n    { dispatch }: StateContext<PizzasStateModel> ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n  //---------------- remove pizza ----------\r\n  payload:any = null;\r\n  @Action(RemovePizza)\r\n  removePizza({ patchState, dispatch }: StateContext<PizzasStateModel>, {payload}:RemovePizza) {\r\n    patchState({ loading: true });\r\n    this.payload = payload;\r\n    return this.pizzaService\r\n      .removePizza(payload)\r\n      .pipe(\r\n        map((pizza: Pizza) =>\r\n          asapScheduler.schedule(() =>\r\n            dispatch(new RemovePizzaSuccess(pizza))\r\n          )\r\n        ),\r\n        catchError(error =>\r\n          of(\r\n            asapScheduler.schedule(() =>\r\n              dispatch(new LoadPizzasFail(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  @Action(RemovePizzaSuccess)\r\n  removePizzaSuccess(\r\n    { patchState,getState, dispatch }: StateContext<PizzasStateModel>, {payload}:RemovePizzaSuccess ) {\r\n    //\r\n    const pizzas = getState().pizzas.filter(val => val.id !== payload.id)\r\n    // const pizzas = getState().pizzas.filter(val => val.id !== this.payload.id)\r\n    //\r\n    this.payload = null;\r\n    patchState({ pizzas:[...pizzas],loaded: true, loading: false });\r\n    dispatch(new Navigate(['./products']));\r\n\r\n  }\r\n\r\n  @Action(RemovePizzaFail)\r\n  removePizzaFail(\r\n    { dispatch }: StateContext<PizzasStateModel> ) {\r\n    dispatch({ loaded: false, loading: false });\r\n  }\r\n\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "toppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Topping[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Pizza"
            ]
        },
        {
            "name": "RemovePizza",
            "id": "class-RemovePizza-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Remove Pizza'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RemovePizzaFail",
            "id": "class-RemovePizzaFail-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Remove Pizza Fail'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RemovePizzaSuccess",
            "id": "class-RemovePizzaSuccess-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Remove Pizza Success'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SelectPizza",
            "id": "class-SelectPizza-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Select Pizza'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdatePizza",
            "id": "class-UpdatePizza-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Update Pizza'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdatePizzaFail",
            "id": "class-UpdatePizzaFail-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Update Pizza Fail'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdatePizzaSuccess",
            "id": "class-UpdatePizzaSuccess-082e1ce84c726e5da63294c0a06d1aa1ddb43a40ad53e7421fd64935a23510fa51dc53025f81958e4b4fc94d064087b7849325f92812f3b6f32b17a679f64a66",
            "file": "src/app/state/pizzas.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pizza } from '../models/pizza.model';\r\n\r\n// load Pizza actions\r\nexport class LoadPizzas {\r\n  static readonly type = '[Pizzas] Load Pizzas';\r\n}\r\nexport class LoadPizzasSuccess {\r\n  static readonly type = '[Pizzas] Load Pizzas Success';\r\n  constructor(public readonly payload: Pizza[]) {}\r\n}\r\nexport class LoadPizzasFail {\r\n  static readonly type = '[Pizzas] Load Pizzas Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\n// create Pizza actions\r\nexport class CreatePizza {\r\n  static readonly type = '[Pizzas] Create Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Create Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class CreatePizzaFail {\r\n  static readonly type = '[Pizzas] Create Pizza Fail';\r\n}\r\n\r\n// update Pizza actions\r\nexport class UpdatePizza {\r\n  static readonly type = '[Pizzas] Update Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaSuccess {\r\n  static readonly type = '[Pizzas] Update Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class UpdatePizzaFail {\r\n  static readonly type = '[Pizzas] Update Pizza Fail';\r\n}\r\n\r\n// remove Pizza action\r\nexport class RemovePizza {\r\n  static readonly type = '[Pizzas] Remove Pizza';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaSuccess {\r\n  static readonly type = '[Pizzas] Remove Pizza Success';\r\n  constructor(public readonly payload: Pizza) {}\r\n}\r\nexport class RemovePizzaFail {\r\n  static readonly type = '[Pizzas] Remove Pizza Fail';\r\n}\r\n\r\n// selected Pizza action\r\nexport class SelectPizza {\r\n  static readonly type = '[Pizzas] Select Pizza';\r\n  constructor(public readonly payload: number) {}\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Pizzas] Update Pizza Success'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateToppings",
            "id": "class-UpdateToppings-aa26f85bb40e17df7dbbabe250b5c4eeb40223e027222a565f08138a973a409d8c6c08ee7532f5878447cec8ce9f9fe695ab396343b81401906a5f26c5a77451",
            "file": "src/app/state/toppings.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Topping } from '../models/topping.model';\r\n\r\n// --- topping actions----\r\nexport class LoadToppings {\r\n  static readonly type = '[Toppings] Load Toppings';\r\n}\r\n\r\nexport class LoadToppingsSuccess {\r\n  static readonly type = '[Toppings] Load Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class LoadToppingsFail {\r\n  static readonly type = '[Toppings] Load Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\nexport class UpdateToppings {\r\n  static readonly type = '[Toppings] Update Toppings';\r\n}\r\n\r\nexport class UpdateToppingsSuccess {\r\n  static readonly type = '[Toppings] Update Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class UpdateToppingsFail {\r\n  static readonly type = '[Toppings] Update Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\nexport class VisualiseToppings {\r\n  static readonly type = '[Toppings] Visualize Topping';\r\n  // constructor(public readonly payload: Topping[]) {}\r\n  constructor(public readonly payload: number[]) {}\r\n}\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Toppings] Update Toppings'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateToppingsFail",
            "id": "class-UpdateToppingsFail-aa26f85bb40e17df7dbbabe250b5c4eeb40223e027222a565f08138a973a409d8c6c08ee7532f5878447cec8ce9f9fe695ab396343b81401906a5f26c5a77451",
            "file": "src/app/state/toppings.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Topping } from '../models/topping.model';\r\n\r\n// --- topping actions----\r\nexport class LoadToppings {\r\n  static readonly type = '[Toppings] Load Toppings';\r\n}\r\n\r\nexport class LoadToppingsSuccess {\r\n  static readonly type = '[Toppings] Load Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class LoadToppingsFail {\r\n  static readonly type = '[Toppings] Load Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\nexport class UpdateToppings {\r\n  static readonly type = '[Toppings] Update Toppings';\r\n}\r\n\r\nexport class UpdateToppingsSuccess {\r\n  static readonly type = '[Toppings] Update Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class UpdateToppingsFail {\r\n  static readonly type = '[Toppings] Update Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\nexport class VisualiseToppings {\r\n  static readonly type = '[Toppings] Visualize Topping';\r\n  // constructor(public readonly payload: Topping[]) {}\r\n  constructor(public readonly payload: number[]) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Toppings] Update Toppings Fail'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateToppingsSuccess",
            "id": "class-UpdateToppingsSuccess-aa26f85bb40e17df7dbbabe250b5c4eeb40223e027222a565f08138a973a409d8c6c08ee7532f5878447cec8ce9f9fe695ab396343b81401906a5f26c5a77451",
            "file": "src/app/state/toppings.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Topping } from '../models/topping.model';\r\n\r\n// --- topping actions----\r\nexport class LoadToppings {\r\n  static readonly type = '[Toppings] Load Toppings';\r\n}\r\n\r\nexport class LoadToppingsSuccess {\r\n  static readonly type = '[Toppings] Load Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class LoadToppingsFail {\r\n  static readonly type = '[Toppings] Load Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\nexport class UpdateToppings {\r\n  static readonly type = '[Toppings] Update Toppings';\r\n}\r\n\r\nexport class UpdateToppingsSuccess {\r\n  static readonly type = '[Toppings] Update Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class UpdateToppingsFail {\r\n  static readonly type = '[Toppings] Update Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\nexport class VisualiseToppings {\r\n  static readonly type = '[Toppings] Visualize Topping';\r\n  // constructor(public readonly payload: Topping[]) {}\r\n  constructor(public readonly payload: number[]) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Topping[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Topping[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Topping[]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Toppings] Update Toppings Success'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "VisualiseToppings",
            "id": "class-VisualiseToppings-aa26f85bb40e17df7dbbabe250b5c4eeb40223e027222a565f08138a973a409d8c6c08ee7532f5878447cec8ce9f9fe695ab396343b81401906a5f26c5a77451",
            "file": "src/app/state/toppings.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Topping } from '../models/topping.model';\r\n\r\n// --- topping actions----\r\nexport class LoadToppings {\r\n  static readonly type = '[Toppings] Load Toppings';\r\n}\r\n\r\nexport class LoadToppingsSuccess {\r\n  static readonly type = '[Toppings] Load Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class LoadToppingsFail {\r\n  static readonly type = '[Toppings] Load Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\nexport class UpdateToppings {\r\n  static readonly type = '[Toppings] Update Toppings';\r\n}\r\n\r\nexport class UpdateToppingsSuccess {\r\n  static readonly type = '[Toppings] Update Toppings Success';\r\n\r\n  constructor(public readonly payload: Topping[]) {}\r\n}\r\n\r\nexport class UpdateToppingsFail {\r\n  static readonly type = '[Toppings] Update Toppings Fail';\r\n  constructor(public readonly payload?: any) {}\r\n}\r\n\r\nexport class VisualiseToppings {\r\n  static readonly type = '[Toppings] Visualize Topping';\r\n  // constructor(public readonly payload: Topping[]) {}\r\n  constructor(public readonly payload: number[]) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Toppings] Visualize Topping'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "SelectPizzaDirective",
            "id": "directive-SelectPizzaDirective-cadaed4930febc77a020ed28734d54285fdd7de1d7a4a82823736acfb64ad2075e7a5a2a2c5db679d5111e2692e4d28d421e51eadd7ec837b96801d534ec5347",
            "file": "src/app/components/directives/select-pizza.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, EventEmitter, HostBinding, HostListener, Input, Output, SimpleChanges} from '@angular/core';\nimport {Pizza} from \"../../models\";\n\n@Directive({\n  selector: '[select_pizza]'\n})\nexport class SelectPizzaDirective {\n  @Input('select_pizza') sPizza?: Pizza;\n  @Input() selectedPizza?:Pizza;\n  @Output() selectPizza = new EventEmitter();\n  constructor() {}\n  ngOnChanges(changes: SimpleChanges) {\n    // console.log('changes', changes, this.sPizza)\n    if(changes['selectedPizza'].currentValue && changes['selectedPizza'].currentValue.id === this.sPizza.id) {\n      this.border = '3px solid red';\n      //console.log('- wsjung SelectColorDirective-- changes', changes, changes.selectedPizza.currentValue)\n    } else {\n      this.border = '1px solid gray';\n    }\n  }\n\n  @HostBinding('style.border') border?: string;\n  @HostBinding('style.zIndex') zIndex?: number;\n  @HostListener('mouseover') onMouseOver() {\n    if( this.selectedPizza && this.selectedPizza.id !== this.sPizza.id) {\n      this.border = '3px solid blue';\n    }\n  }\n  @HostListener('click') onClick() {\n    this.border = '3px solid red';\n    this.selectPizza.emit(this.sPizza);\n  }\n  @HostListener('mouseleave') onMouseLeave() {\n    if( this.selectedPizza && this.selectedPizza.id !== this.sPizza.id) {\n      this.border = '2px solid gray';\n    }\n  }\n}\n",
            "selector": "[select_pizza]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "select_pizza",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "Pizza",
                    "decorators": []
                },
                {
                    "name": "selectedPizza",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "Pizza",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectPizza",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.border",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style.zIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "number",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33
                },
                {
                    "name": "mouseover",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24
                }
            ],
            "propertiesClass": [
                {
                    "name": "border",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.border'"
                        }
                    ]
                },
                {
                    "name": "zIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.zIndex'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ]
                },
                {
                    "name": "onMouseOver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseover'"
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-e0af7c49ac21b75f712ff2f04f4f17057e9f97c927c9e8b87d6f7c485df3970c925b06aee751768c50f541785ccdb73edd4777f741482ddc791f24278fd5dda0",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isHelpMessage",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "mainPanel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MainPanelComponent",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MainPanelComponent"
                        }
                    ]
                },
                {
                    "name": "message",
                    "defaultValue": "new Message('Hello world')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Message",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "title",
                    "defaultValue": "'spectator-pizza211001'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResetPizza",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openHelpMessage",
                    "args": [
                        {
                            "name": "origin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ViewChild} from '@angular/core';\nimport {HelpMessageService, Message} from \"./services/helpMessage\";\nimport {MainPanelComponent} from \"./components/main-panel/main-panel.component\";\nimport {Pizza} from \"./models\";\nimport {CreatePizzaSuccess} from \"./state\";\nimport {Store} from \"@ngxs/store\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  isHelpMessage = true;\n  title = 'spectator-pizza211001';\n  constructor(private helpService: HelpMessageService,\n              private store: Store) {}\n  message: Message = new Message('Hello world');\n  @ViewChild(MainPanelComponent) mainPanel: MainPanelComponent;\n\n\n  ngOnInit() {}\n  openHelpMessage(origin: any)  {\n    if( this.isHelpMessage) {\n      this.isHelpMessage = false;\n      this.helpService.openHelpMessage(origin, this.message)\n\n    } else {\n      this.helpService.closeHelpMessage();\n      this.isHelpMessage = true;\n    }\n  }\n  onResetPizza() {\n    this.mainPanel.resetPizza();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "helpService",
                        "type": "HelpMessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "helpService",
                        "type": "HelpMessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"app\">\n<!--\n  <div class=\"app__header\">\n    <img src=\"assets/img/logo.svg\" class=\"app__logo\">\n  </div>\n-->\n  <div class=\"\">\n    <div class=\"ml-2\" >\n      <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"onResetPizza()\">New</button>\n    </div>\n    <div class=\"app__container\">\n<!--      <router-outlet></router-outlet>-->\n      <main-panel></main-panel>\n    </div>\n    <div class=\"app__footer\">\n      <p>&copy; Good Morning Pizza Inc.</p>\n    </div>\n  </div>\n  <div #origin style=\"position: fixed; right: 20px; top: 20px\">\n    <button mat-fab color=\"basic\" (click)=\"openHelpMessage(origin)\">Help</button>\n  </div>\n</div>\n"
        },
        {
            "name": "ButtonsComponent",
            "id": "component-ButtonsComponent-2e40c1140287ea89cf7964051419413e6cab90d488a16722149051e81d24ed0bc8518f322033c22b458f71ad9ed8fc3dffd32415bc1df6b053a47f9269cee20b",
            "file": "src/app/components/pizza-form/buttons/buttons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-buttons",
            "styleUrls": [],
            "styles": [
                "\n    .pizza-form__actions {\n      position: relative;\n      margin: 35px 0 0;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n    .pizza-form__actions button:last-child {\n      margin-left: auto;\n    }\n    .btn {\n      display: inline-block;\n      padding: 10px 15px;\n      margin: 0;\n      outline: 0;\n      border: 0;\n      border-radius: 3px;\n      font-size: 16px;\n      font-family: 'cornerstone';\n      cursor: pointer;\n      transition: all 0.2s ease;\n    }\n    .btn__ok {\n      background: #0f9675;\n      color: #fff;\n    }\n    .btn__ok:hover {\n      background: #0a7d61;\n    }\n    .btn__warning {\n      background: #ab131c;\n      color: #fff;\n    }\n    .btn__warning:hover {\n      background: #880c14;\n    }\n\n  "
            ],
            "template": "<div class=\"pizza-form__actions\">\n  <button\n    type=\"button\"\n    class=\"btn btn__ok\"\n    *ngIf=\"!exists\"\n    (click)=\"createPizza()\">\n    Create Pizza\n  </button>\n\n  <button\n    type=\"button\"\n    class=\"btn btn__ok\"\n    *ngIf=\"exists\"\n    (click)=\"updatePizza()\">\n    Save changes\n  </button>\n\n  <button\n    type=\"button\"\n    class=\"btn btn__warning\"\n    *ngIf=\"exists\"\n    (click)=\"removePizza()\">\n    Delete Pizza\n  </button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "exists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "pizza",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "Pizza",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "create",
                    "defaultValue": "new EventEmitter<Pizza>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "remove",
                    "defaultValue": "new EventEmitter<Pizza>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter"
                },
                {
                    "name": "update",
                    "defaultValue": "new EventEmitter<Pizza>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "createPizza",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removePizza",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updatePizza",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Pizza} from \"../../../models\";\nimport {Form, FormGroup} from \"@angular/forms\";\n\n@Component({\n  selector: 'app-buttons',\n  template: `\n    <div class=\"pizza-form__actions\">\n      <button\n        type=\"button\"\n        class=\"btn btn__ok\"\n        *ngIf=\"!exists\"\n        (click)=\"createPizza()\">\n        Create Pizza\n      </button>\n\n      <button\n        type=\"button\"\n        class=\"btn btn__ok\"\n        *ngIf=\"exists\"\n        (click)=\"updatePizza()\">\n        Save changes\n      </button>\n\n      <button\n        type=\"button\"\n        class=\"btn btn__warning\"\n        *ngIf=\"exists\"\n        (click)=\"removePizza()\">\n        Delete Pizza\n      </button>\n    </div>\n  `,\n  styles: [`\n    .pizza-form__actions {\n      position: relative;\n      margin: 35px 0 0;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n    .pizza-form__actions button:last-child {\n      margin-left: auto;\n    }\n    .btn {\n      display: inline-block;\n      padding: 10px 15px;\n      margin: 0;\n      outline: 0;\n      border: 0;\n      border-radius: 3px;\n      font-size: 16px;\n      font-family: 'cornerstone';\n      cursor: pointer;\n      transition: all 0.2s ease;\n    }\n    .btn__ok {\n      background: #0f9675;\n      color: #fff;\n    }\n    .btn__ok:hover {\n      background: #0a7d61;\n    }\n    .btn__warning {\n      background: #ab131c;\n      color: #fff;\n    }\n    .btn__warning:hover {\n      background: #880c14;\n    }\n\n  `]\n})\nexport class ButtonsComponent implements OnInit {\n  @Input() exists: boolean;\n  @Input() form: FormGroup;\n  @Input() pizza: Pizza;\n  @Output() create = new EventEmitter<Pizza>();\n  @Output() update = new EventEmitter<Pizza>();\n  @Output() remove = new EventEmitter<Pizza>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n  createPizza() {\n/*\n    const { value, valid } = form;\n    // console.log('--- value', value, valid, form);\n    if( value['name'].split(':')[0] === '') window.alert('이름을 입력하세요!')\n    // if( value['name'] === '') window.alert('이름을 입력하세요!')\n    if (valid) {\n      this.create.emit(value);\n    }\n*/\n      this.create.emit({});\n  }\n\n  updatePizza() {\n    const { value, valid, touched, dirty } = this.form;\n    if (valid) {\n      // console.log('updatePizza-form', form, value);\n      // if (touched && valid) {\n      this.update.emit({ ...this.pizza, ...value });\n    }\n  }\n\n  removePizza() {\n    const { value } = this.form;\n    this.remove.emit({ ...this.pizza, ...value });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .pizza-form__actions {\n      position: relative;\n      margin: 35px 0 0;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n    .pizza-form__actions button:last-child {\n      margin-left: auto;\n    }\n    .btn {\n      display: inline-block;\n      padding: 10px 15px;\n      margin: 0;\n      outline: 0;\n      border: 0;\n      border-radius: 3px;\n      font-size: 16px;\n      font-family: 'cornerstone';\n      cursor: pointer;\n      transition: all 0.2s ease;\n    }\n    .btn__ok {\n      background: #0f9675;\n      color: #fff;\n    }\n    .btn__ok:hover {\n      background: #0a7d61;\n    }\n    .btn__warning {\n      background: #ab131c;\n      color: #fff;\n    }\n    .btn__warning:hover {\n      background: #880c14;\n    }\n\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 80
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "HelpMessageComponent",
            "id": "component-HelpMessageComponent-dde7af443b7dfa6a394cdebb04886a490c67339ff804bd5a0929bb5c5caf3ec9c2a8da36be4d7ad147f7089d7c91d32ff089a93821a26917e66a65ac2391fa9a",
            "file": "src/app/services/help-message.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "help-message",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n          display: block;\n      }\n    \n  "
            ],
            "template": "<div style=\"width: 500px; height: 250px; background: lightblue; opacity: 0.7\">\n    <ol>\n        <li>메뉴설명<br />\n            - 홈메뉴: New Pizza : 피자를 새로 생성할 수 있음.<br />\n            - 하단의 토핑버튼 : 추가할 토핑을 선택함.<br />\n            - 좌측상단 토핑버튼 : 선택한 토핑이며 버튼의 오른쪽의 숫자는 토핑 <br/>\n            &nbsp;&nbsp;이 선택된 단계를 의미함.&nbsp;5단계 까지 표시됨.<br />\n            - 좌측상단 토핑버튼 : 버튼을 클릭하면 추가된 토핑이 제거됨<br/>\n            &nbsp;&nbsp;(단계가 줄어듬).<br />\n            - Create Pizza : 피자를 새로 생성함.<br/>\n            - Save changes : 선택한 토핑 정보를 저장함.<br/>\n            - Delete Pizza : 생성된 피자를 목록에서 제거함.<br/>\n        </li><br/>\n\n    </ol>\n\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'help-message',\r\n  template: `\r\n    <div style=\"width: 500px; height: 250px; background: lightblue; opacity: 0.7\">\r\n        <ol>\r\n            <li>메뉴설명<br />\r\n                - 홈메뉴: New Pizza : 피자를 새로 생성할 수 있음.<br />\r\n                - 하단의 토핑버튼 : 추가할 토핑을 선택함.<br />\r\n                - 좌측상단 토핑버튼 : 선택한 토핑이며 버튼의 오른쪽의 숫자는 토핑 <br/>\r\n                &nbsp;&nbsp;이 선택된 단계를 의미함.&nbsp;5단계 까지 표시됨.<br />\r\n                - 좌측상단 토핑버튼 : 버튼을 클릭하면 추가된 토핑이 제거됨<br/>\r\n                &nbsp;&nbsp;(단계가 줄어듬).<br />\r\n                - Create Pizza : 피자를 새로 생성함.<br/>\r\n                - Save changes : 선택한 토핑 정보를 저장함.<br/>\r\n                - Delete Pizza : 생성된 피자를 목록에서 제거함.<br/>\r\n            </li><br/>\r\n\r\n        </ol>\r\n    \r\n    </div>\r\n  `,\r\n  styles: [`\r\n      :host {\r\n          display: block;\r\n      }\r\n    \r\n  `]\r\n})\r\nexport class HelpMessageComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n          display: block;\n      }\n    \n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 31
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "MainPanelComponent",
            "id": "component-MainPanelComponent-6af72e217aa98ac023c466ea5b38f92ce52bf34527638feddf7f23ebca8f204fe3a4bbdbb9d8c22af7bda3888a3e04e66388de99dc0c008c4cd3b40f1b993018",
            "file": "src/app/components/main-panel/main-panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "main-panel",
            "styleUrls": [],
            "styles": [],
            "template": "    <div class=\"grid grid-cols-2 m-1\" >\n      <section>\n<!--          [_pizza]=\"pizza$ | async\"-->\n      <div class=\"h-120 border-4  border-green-400 p-3\">\n        <pizza-form\n          [_pizza]=\"pizza\"\n          [toppings]=\"toppings$ | async\"\n          (selectedToppings)=\"addToppings($event)\"\n          (create)=\"onCreate($event)\"\n          (update)=\"onUpdate($event)\"\n          (remove)=\"onRemove($event)\"\n        >\n          <pizza-display [toppings]=\"nToppings\"></pizza-display>\n        </pizza-form>\n      </div>\n      </section>\n      <section>\n        <div class=\"px-5 py-1 mx-auto overflow-y-auto h-screen\">\n            <pizza-item-list [pizzas]=\"pizzas$ | async\"\n            (selected)=\"onSelectedPizza($event)\"></pizza-item-list>\n        </div>\n      </section>\n    </div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "nToppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Topping[]",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "pizza",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "pizza$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Pizza>",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "pizzaForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PizzaFormComponent",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "PizzaFormComponent"
                        }
                    ]
                },
                {
                    "name": "pizzas$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Pizza[]>",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "PizzasState.pizzas"
                        }
                    ]
                },
                {
                    "name": "selectedToppings$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any[]>",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "ToppingsState.selectedToppings"
                        }
                    ]
                },
                {
                    "name": "toppings$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Topping[]>",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "ToppingsState.toppings"
                        }
                    ]
                },
                {
                    "name": "unsubscribe",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "this.unsubscribe.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                }
            ],
            "methodsClass": [
                {
                    "name": "addToppings",
                    "args": [
                        {
                            "name": "toppings",
                            "type": "Topping[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "toppings",
                            "type": "Topping[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCreate",
                    "args": [
                        {
                            "name": "pizza",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pizza",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRemove",
                    "args": [
                        {
                            "name": "event",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectedPizza",
                    "args": [
                        {
                            "name": "pizza",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pizza",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUpdate",
                    "args": [
                        {
                            "name": "event",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Pizza",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPizza",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  forwardRef, Inject,\n  Input,\n  OnDestroy,\n  OnInit, ViewChild\n} from '@angular/core';\nimport {Pizza, Topping} from \"../../models\";\nimport {\n  CreatePizzaSuccess, LoadPizzas, LoadToppings,\n  PizzasState,\n  RemovePizzaSuccess, ToppingsState,\n  UpdatePizzaSuccess,\n  UpdateToppingsSuccess\n} from \"../../state\";\nimport {Select, Store} from \"@ngxs/store\";\nimport {filter, takeUntil, tap} from \"rxjs/operators\";\nimport {ToppingImageService} from \"../../services/topping-image.service\";\nimport {Observable, of, Subject} from \"rxjs\";\nimport {PizzaFormComponent} from \"../pizza-form/pizza-form.component\";\n\n@Component({\n  selector: 'main-panel',\n  template: `\n    <div class=\"grid grid-cols-2 m-1\" >\n      <section>\n<!--          [_pizza]=\"pizza$ | async\"-->\n      <div class=\"h-120 border-4  border-green-400 p-3\">\n        <pizza-form\n          [_pizza]=\"pizza\"\n          [toppings]=\"toppings$ | async\"\n          (selectedToppings)=\"addToppings($event)\"\n          (create)=\"onCreate($event)\"\n          (update)=\"onUpdate($event)\"\n          (remove)=\"onRemove($event)\"\n        >\n          <pizza-display [toppings]=\"nToppings\"></pizza-display>\n        </pizza-form>\n      </div>\n      </section>\n      <section>\n        <div class=\"px-5 py-1 mx-auto overflow-y-auto h-screen\">\n            <pizza-item-list [pizzas]=\"pizzas$ | async\"\n            (selected)=\"onSelectedPizza($event)\"></pizza-item-list>\n        </div>\n      </section>\n    </div>\n  `,\n  styles: [\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MainPanelComponent implements OnInit, OnDestroy {\n  // @Input() pizzas: Pizza[];\n  // @Input() pizza: Pizza;\n  // @Input() toppings: Topping[];\n  // @Input() nToppings: Topping[];\n  //\n  pizza$: Observable<Pizza>;\n  pizza: Pizza;\n  nToppings: Topping[];\n\n  @Select(PizzasState.pizzas) pizzas$: Observable<Pizza[]>;\n  @Select(ToppingsState.toppings) toppings$: Observable<Topping[]>;\n  @Select(ToppingsState.selectedToppings ) selectedToppings$: Observable<any[]>;\n\n  @ViewChild(PizzaFormComponent) pizzaForm: PizzaFormComponent;\n  unsubscribe = new Subject();\n  unsubscribe$ = this.unsubscribe.asObservable();\n  constructor(private store: Store,\n              private toppingImages: ToppingImageService,\n              private cdr: ChangeDetectorRef) {}\n  addToppings(toppings: Topping[]) {\n\n    this.store.dispatch(new UpdateToppingsSuccess(toppings))\n  }\n  resetPizza() {\n     // console.log('mp', this.pizzaForm )\n     this.pizzaForm.resetPizza(); // reset name, price\n     this.nToppings = []; // reset toppings an pizza\n     this.store.dispatch( new UpdateToppingsSuccess([])); // reset selected toppings\n    this.cdr.detectChanges();\n    // this.store.dispatch(new CreatePizzaSuccess(pizza));\n  }\n  onSelectedPizza(pizza: Pizza) {\n    // console.log('pizza', pizza);\n    this.pizza = pizza;\n    // this.pizzaForm.onSetName(pizza); // reset name, price\n    this.nToppings = pizza.toppings; // reset toppings an pizza\n    this.store.dispatch( new UpdateToppingsSuccess(pizza.toppings)); // reset selected toppings\n    this.pizzaForm.exists = true; // Change buttons status\n    this.cdr.detectChanges();\n  }\n  onCreate(pizza: Pizza) {\n    this.store.dispatch(new CreatePizzaSuccess(pizza));\n  }\n  onUpdate(event: Pizza) {\n    event.toppings = this.nToppings;\n    this.store.dispatch(new UpdatePizzaSuccess(event));\n  }\n\n  onRemove(event: Pizza) {\n    const remove = window.confirm('선택한 항목을 삭제하시겠습니까?');\n    if (remove) {\n      this.store.dispatch(new RemovePizzaSuccess(event));\n      this.pizzaForm.resetPizza();\n    }\n  }\n  ngOnInit(): void {\n    this.store.dispatch(new LoadPizzas());\n    this.store.dispatch(new LoadToppings());\n    this.selectedToppings$.pipe(\n      filter( val => !!val),\n      tap(val => {\n        this.nToppings = val;\n      }),\n    ).subscribe();\n    this.cdr.detectChanges();\n\n  }\n  ngOnDestroy() {\n    console.log('this.unsubscribe', this.unsubscribe)\n    if( this.unsubscribe && this.unsubscribe.next) {\n      this.unsubscribe.next({});\n      this.unsubscribe.complete();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toppingImages",
                        "type": "ToppingImageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toppingImages",
                        "type": "ToppingImageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "PizzaDisplayComponent",
            "id": "component-PizzaDisplayComponent-abec321a17e20b2e25bcf4505741a5ec4ca96644d8c183c668bd4f2bba2f69f5b9c94c0bdcb14a33980c763166d2be0f8fbac6ab391303c03406dfe7aa30e7f2",
            "file": "src/app/components/pizza-display/pizza-display.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pizza-display",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: block;\n    }\n    .pizza-display {\n      background: #f5f5f5;\n      border-radius: 4px;\n      padding: 15px 0;\n    }\n    .pizza-display__base {\n      position: relative;\n      text-align: center;\n    }\n    .pizza-display__topping {\n      position: absolute;\n      top: 0;\n      right: 0;\n      left: 0;\n      bottom: 0;\n      height: 100%;\n      width: 100%;\n    }\n  "
            ],
            "template": "<div class=\"pizza-display\">\n  <div class=\"pizza-display__base\">\n    <div class=\"flex justify-center\">\n        <img src=\"assets/img/pizza.svg\">\n    </div>\n    <img  *ngFor=\"let topping of nToppings; index as i;\"\n      src=\"assets/img/toppings/multi/{{ topping.image }}.svg\"\n      [style.zIndex]=\"i\"\n      class=\"pizza-display__topping\"\n      @drop>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "toppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "nToppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\r\nimport {animate, style, transition, trigger} from \"@angular/animations\";\r\nimport {ToppingImageService} from \"../../services/topping-image.service\";\r\n\r\nexport const DROP_ANIMATION = trigger(\"drop\", [\r\n  transition(\":enter\", [\r\n    style({transform: \"translateY(-200px)\", opacity: 0}),\r\n    animate(\r\n      \"300ms cubic-bezier(1.000, 0.000, 0.000, 1.000)\",\r\n      style({transform: \"translateY(0)\", opacity: 1})\r\n    )\r\n  ]),\r\n  transition(\":leave\", [\r\n    style({transform: \"translateY(0)\", opacity: 1}),\r\n    animate(\r\n      \"200ms cubic-bezier(1.000, 0.000, 0.000, 1.000)\",\r\n      style({transform: \"translateY(-200px)\", opacity: 0})\r\n    )\r\n  ])\r\n]);\r\n\r\n@Component({\r\n  selector: 'pizza-display',\r\n  template: `\r\n    <div class=\"pizza-display\">\r\n      <div class=\"pizza-display__base\">\r\n        <div class=\"flex justify-center\">\r\n            <img src=\"assets/img/pizza.svg\">\r\n        </div>\r\n        <img  *ngFor=\"let topping of nToppings; index as i;\"\r\n          src=\"assets/img/toppings/multi/{{ topping.image }}.svg\"\r\n          [style.zIndex]=\"i\"\r\n          class=\"pizza-display__topping\"\r\n          @drop>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n    .pizza-display {\r\n      background: #f5f5f5;\r\n      border-radius: 4px;\r\n      padding: 15px 0;\r\n    }\r\n    .pizza-display__base {\r\n      position: relative;\r\n      text-align: center;\r\n    }\r\n    .pizza-display__topping {\r\n      position: absolute;\r\n      top: 0;\r\n      right: 0;\r\n      left: 0;\r\n      bottom: 0;\r\n      height: 100%;\r\n      width: 100%;\r\n    }\r\n  `\r\n  ],\r\n  animations:[DROP_ANIMATION],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PizzaDisplayComponent implements OnInit {\r\n  @Input() set toppings(v: any) {\r\n    // console.log(' PizzaDisplayComponent toppings', this.nToppings, v);\r\n    this.nToppings = this.toppingImageService.setEachToppingImage(v);\r\n  };\r\n  nToppings: any[];\r\n\r\n  constructor(private toppingImageService: ToppingImageService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: block;\n    }\n    .pizza-display {\n      background: #f5f5f5;\n      border-radius: 4px;\n      padding: 15px 0;\n    }\n    .pizza-display__base {\n      position: relative;\n      text-align: center;\n    }\n    .pizza-display__topping {\n      position: absolute;\n      top: 0;\n      right: 0;\n      left: 0;\n      bottom: 0;\n      height: 100%;\n      width: 100%;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toppingImageService",
                        "type": "ToppingImageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "toppingImageService",
                        "type": "ToppingImageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "toppings": {
                    "name": "toppings",
                    "setSignature": {
                        "name": "toppings",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 66,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "PizzaFormComponent",
            "id": "component-PizzaFormComponent-468397e1b22560918aea994b5becdb9497d41cab354bb5735588764cba9fac33a0adbf7b503114ec821e7b730db9aeb48eecd5d477dbebb4677625e87864fc4a",
            "file": "src/app/components/pizza-form/pizza-form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pizza-form",
            "styleUrls": [],
            "styles": [
                "\n    .input_name_area {\n      display: flex;\n      flex-wrap: wrap;\n      justify-content: space-between;\n    }\n    .pizza-form__input {\n      margin: 0;\n      padding: 15px;\n      outline: 0;\n      width: 100%;\n      border-radius: 4px;\n      font-size: 20px;\n      font-weight: 600;\n      background: #f5f5f5;\n      border: 1px solid transparent;\n    }\n    .pizza-price {\n      margin: 0;\n      padding: 15px;\n      outline: 0;\n      width: 100%;\n      border-radius: 4px;\n      font-size: 20px;\n      font-weight: 600;\n      background: #f5f5f5;\n      border: 1px solid transparent;\n    }\n\n    .pizza-form__input.error {\n      border-radius: 4px 4px 0 0;\n      border-color: #b54846;\n    }\n\n    .pizza-form__list {\n      margin: -20px 0 0;\n    }\n\n    .pizza-form ::ng-deep pizza-display {\n      margin: 0 0 35px;\n    }\n\n    .pizza-form label {\n      margin: 0 0 35px;\n      display: block;\n    }\n\n    .pizza-form label h4 {\n      margin: 0 0 15px;\n    }\n\n    .pizza-form__error {\n      padding: 10px;\n      border-radius: 0 0 4px 4px;\n      display: flex;\n      align-items: center;\n      background: #aa141b;\n      color: #fff;\n    }\n\n    .pizza-form__error p {\n      font-size: 14px;\n      margin: 0;\n    }\n\n  "
            ],
            "template": "<div class=\"pizza-form\">\n  <form [formGroup]=\"form\">\n    <div class=\"input_name_area\">\n      <label>\n        <input\n          type=\"text\"\n          formControlName=\"name\"\n          placeholder=\"Input Pizza Name!\"\n          class=\"pizza-form__input\"\n          [class.error]=\"nameControlInvalid\">\n        <div\n          class=\"pizza-form__error\"\n          *ngIf=\"nameControlInvalid\">\n          <p>피자이름을 입력하세요!</p>\n        </div>\n      </label>\n      <label>\n        <input\n          type=\"text\"\n          formControlName=\"price\"\n          placeholder=\"Pizza price!\"\n          class=\"pizza-price\"\n        >\n      </label>\n    </div>\n    <!-- Angular CDK Overlay를 표시하기 위한 Anchor point, 선태된 토핑에 대한 Count를\n     표시하기 위함 selected-item.service.ts와 관련이 있음 -->\n    <ng-container>\n      <div style=\"float: left\" #subTotal></div>\n    </ng-container>\n    <!--      -->\n    <div class=\"m-10 w-auto h-auto\">\n        <!-- Pizza display   -->\n        <ng-content></ng-content>\n    </div>\n\n    <label>\n      <div class=\"text-xl\">Select toppings</div>\n    </label>\n    <div class=\"\">\n      <!-- 선택할 토핑 메뉴. <pizza-toppings>에서 ControlValueAccess 를 구현함-->\n      <pizza-toppings\n        [toppings]=\"toppings\"\n        formControlName=\"toppings\">\n      </pizza-toppings>\n    </div>\n\n    <div class=\"\">\n        <app-buttons [exists]=\"exists\"\n                     [form]=\"form\"\n          (create)=\"createPizza(form)\"\n          (update)=\"updatePizza()\"\n          (remove)=\"removePizza()\"\n        ></app-buttons>\n    </div>\n  </form>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "_pizza",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 153,
                    "type": "Pizza",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 177,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "toppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 164,
                    "type": "Topping[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "create",
                    "defaultValue": "new EventEmitter<Pizza>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 166,
                    "type": "EventEmitter"
                },
                {
                    "name": "remove",
                    "defaultValue": "new EventEmitter<Pizza>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 168,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectedToppings",
                    "defaultValue": "new EventEmitter<Topping[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 165,
                    "type": "EventEmitter"
                },
                {
                    "name": "update",
                    "defaultValue": "new EventEmitter<Pizza>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 167,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "exists",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 150
                },
                {
                    "name": "overlayRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 171
                },
                {
                    "name": "pizza",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza",
                    "optional": false,
                    "description": "",
                    "line": 176
                },
                {
                    "name": "pizzas$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Pizza[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 173,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "PizzasState.pizzas"
                        }
                    ]
                },
                {
                    "name": "selected_origin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 151,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'subTotal', {static: false}"
                        }
                    ]
                },
                {
                    "name": "selectedToppings$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Topping[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 174,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "ToppingsState.selectedToppings"
                        }
                    ]
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 175
                },
                {
                    "name": "unsubscribe",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 169
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "this.unsubscribe.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 170
                }
            ],
            "methodsClass": [
                {
                    "name": "createPizza",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 265,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removePizza",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 260,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetPizza",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updatePizza",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 250,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input, OnDestroy,\n  OnInit,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport {Pizza, Topping} from \"../../models\";\nimport {from, Observable, Subject } from \"rxjs\";\nimport {OverlayRef} from \"@angular/cdk/overlay\";\nimport {SelectedItemService} from \"../../services/selected-item.service\";\nimport {Select, Store} from \"@ngxs/store\";\nimport {PizzasState, ToppingsState} from \"../../state\";\nimport {filter, groupBy, map, mergeMap, skip, switchMap, takeLast, takeUntil, tap, toArray} from \"rxjs/operators\";\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\n\n@Component({\n  selector: 'pizza-form',\n  template: `\n    <div class=\"pizza-form\">\n      <form [formGroup]=\"form\">\n        <div class=\"input_name_area\">\n          <label>\n            <input\n              type=\"text\"\n              formControlName=\"name\"\n              placeholder=\"Input Pizza Name!\"\n              class=\"pizza-form__input\"\n              [class.error]=\"nameControlInvalid\">\n            <div\n              class=\"pizza-form__error\"\n              *ngIf=\"nameControlInvalid\">\n              <p>피자이름을 입력하세요!</p>\n            </div>\n          </label>\n          <label>\n            <input\n              type=\"text\"\n              formControlName=\"price\"\n              placeholder=\"Pizza price!\"\n              class=\"pizza-price\"\n            >\n          </label>\n        </div>\n        <!-- Angular CDK Overlay를 표시하기 위한 Anchor point, 선태된 토핑에 대한 Count를\n         표시하기 위함 selected-item.service.ts와 관련이 있음 -->\n        <ng-container>\n          <div style=\"float: left\" #subTotal></div>\n        </ng-container>\n        <!--      -->\n        <div class=\"m-10 w-auto h-auto\">\n            <!-- Pizza display   -->\n            <ng-content></ng-content>\n        </div>\n\n        <label>\n          <div class=\"text-xl\">Select toppings</div>\n        </label>\n        <div class=\"\">\n          <!-- 선택할 토핑 메뉴. <pizza-toppings>에서 ControlValueAccess 를 구현함-->\n          <pizza-toppings\n            [toppings]=\"toppings\"\n            formControlName=\"toppings\">\n          </pizza-toppings>\n        </div>\n\n        <div class=\"\">\n            <app-buttons [exists]=\"exists\"\n                         [form]=\"form\"\n              (create)=\"createPizza(form)\"\n              (update)=\"updatePizza()\"\n              (remove)=\"removePizza()\"\n            ></app-buttons>\n        </div>\n      </form>\n    </div>\n  `,\n  styles: [`\n    .input_name_area {\n      display: flex;\n      flex-wrap: wrap;\n      justify-content: space-between;\n    }\n    .pizza-form__input {\n      margin: 0;\n      padding: 15px;\n      outline: 0;\n      width: 100%;\n      border-radius: 4px;\n      font-size: 20px;\n      font-weight: 600;\n      background: #f5f5f5;\n      border: 1px solid transparent;\n    }\n    .pizza-price {\n      margin: 0;\n      padding: 15px;\n      outline: 0;\n      width: 100%;\n      border-radius: 4px;\n      font-size: 20px;\n      font-weight: 600;\n      background: #f5f5f5;\n      border: 1px solid transparent;\n    }\n\n    .pizza-form__input.error {\n      border-radius: 4px 4px 0 0;\n      border-color: #b54846;\n    }\n\n    .pizza-form__list {\n      margin: -20px 0 0;\n    }\n\n    .pizza-form ::ng-deep pizza-display {\n      margin: 0 0 35px;\n    }\n\n    .pizza-form label {\n      margin: 0 0 35px;\n      display: block;\n    }\n\n    .pizza-form label h4 {\n      margin: 0 0 15px;\n    }\n\n    .pizza-form__error {\n      padding: 10px;\n      border-radius: 0 0 4px 4px;\n      display: flex;\n      align-items: center;\n      background: #aa141b;\n      color: #fff;\n    }\n\n    .pizza-form__error p {\n      font-size: 14px;\n      margin: 0;\n    }\n\n  `],\n   changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PizzaFormComponent implements OnInit, AfterViewInit, OnDestroy {\n  exists = false;\n  @ViewChild('subTotal', {static:false}) selected_origin: any;\n\n  @Input() set _pizza(pi: Pizza){\n    // console.log('pizza',pi)\n    if( pi ) {\n      this.pizza = pi;\n      const nv = pi.price.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n      this.form.patchValue({name: pi.name, price: nv });\n\n    }\n\n  }\n  @Input() toppings : Topping[];\n  @Output() selectedToppings = new EventEmitter<Topping[]>();\n  @Output() create = new EventEmitter<Pizza>();\n  @Output() update = new EventEmitter<Pizza>();\n  @Output() remove = new EventEmitter<Pizza>();\n  unsubscribe = new Subject();\n  unsubscribe$ = this.unsubscribe.asObservable();\n  overlayRef: OverlayRef;\n  //\n  @Select(PizzasState.pizzas) pizzas$: Observable<Pizza[]> | undefined;\n  @Select(ToppingsState.selectedToppings) selectedToppings$: Observable<Topping[]> | undefined;\n  total:any;\n  pizza: Pizza;\n  @Input() form: FormGroup;\n\n\n  constructor(\n    private selectedItemService: SelectedItemService,\n    private cdr: ChangeDetectorRef,\n    private fb: FormBuilder,\n  ) {\n    this.form = this.fb.group({\n      name: [\"\", Validators.required],\n      price: [\"\"],\n      toppings: [[]]\n    });\n\n  }\n  ngOnInit(): void {\n    this.form.get(\"toppings\")\n      .valueChanges.pipe(\n      map ( (rv) => {\n        const { value } = this.form;\n        if( (value['name'].split(':')[0] === '')) {\n          let name = window.prompt('이름을 입력하세요!')\n          this.form.patchValue({name: name});\n          return [];\n        } else  {\n          return  rv;\n        }\n\n      }),\n    )\n      .subscribe(value => {\n        this.selectedToppings.emit(value);\n      });\n    //\n    this.selectedToppings$.pipe(\n      filter( val => !!val),\n      calcuretePrice(),\n      takeUntil(this.unsubscribe$),\n    ).subscribe((val:any) => {\n      // console.log('price-2',val);\n      const price = (val * 1000).toFixed(0).toLocaleString()\n      const nv = price.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + \"원\";\n      // console.log(' price-3', price, val)\n      this.form.patchValue({ price: nv })\n    });\n  }\n\n  ngAfterViewInit() {\n    this.overlayRef = this.selectedItemService.openSelectedToppings(this.selected_origin,  this.pizza);\n  }\n  resetPizza() {\n    this.form.reset({name:'', price:'', toppings:[]});\n    this.exists = false;\n    // this.form.reset();\n  }\n  get nameControl() {\n    return this.form.get(\"name\") as FormControl;\n  }\n\n  get nameControlInvalid() {\n    return this.nameControl.hasError(\"required\") && this.nameControl.touched;\n  }\n\n  createPizza(form: FormGroup) {\n    const { value, valid } = form;\n    // console.log('--- value', value, valid, form);\n    if( value['name'].split(':')[0] === '') window.alert('이름을 입력하세요!')\n    // if( value['name'] === '') window.alert('이름을 입력하세요!')\n    if (valid) {\n      this.create.emit(value);\n    }\n  }\n\n  updatePizza() {\n     const { value, valid, touched, dirty } = this.form;\n    if (valid) {\n      // console.log('updatePizza-form', form, value);\n      // if (touched && valid) {\n      console.log('pizza-2', { ...this.pizza, ...value } )\n      this.update.emit({ ...this.pizza, ...value });\n    }\n  }\n\n  removePizza() {\n    const { value } = this.form;\n    this.remove.emit({ ...this.pizza, ...value });\n  }\n\n  ngOnDestroy() {\n    this.overlayRef && this.overlayRef.dispose();\n    if( this.unsubscribe && this.unsubscribe.next) {\n      this.unsubscribe.next({});\n      this.unsubscribe.complete();\n    }\n  }\n}\nconst uniqueId = (function(){ let id=10; return function(){ return id++;} })();\nexport function calcuretePrice() {\n  return function <T>(source: Observable<T>) {\n    let id: any = null;\n    let name: any;\n    let price: number;\n    let data: any[] = [];\n    let total = 0;\n    return new Observable( observer => {\n      return source.subscribe(\n        {\n          next(value:any) {\n            data = [];\n            total = 0;\n            if( value.length === 0 ) observer.next(0);\n            return from( value ).pipe(\n              groupBy( (value:any) => value.id),\n              mergeMap( (group:any) => group.pipe(toArray())),\n              map( (value:any) => {\n                value.map( (v2: any) => {\n                  id = v2.id;\n                  name = v2.name;\n                  price = v2.price;\n                });\n                data.push({id:id, name:name, count:value.length, price: price});\n              }),\n              takeLast(1),\n              // [{id:1, count:2, price:1.1},{id:2, count:2, price:1},{id:3, count:2, price:1.2}]\n              // map( _ => data),\n              map( _ => {\n                data.forEach(p1 => {\n                  const tval = p1.price * p1.count;\n                  total =  total + tval;\n                })\n              }),\n              map( _ => observer.next(total))\n            ).subscribe();\n          }\n        }\n      )\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .input_name_area {\n      display: flex;\n      flex-wrap: wrap;\n      justify-content: space-between;\n    }\n    .pizza-form__input {\n      margin: 0;\n      padding: 15px;\n      outline: 0;\n      width: 100%;\n      border-radius: 4px;\n      font-size: 20px;\n      font-weight: 600;\n      background: #f5f5f5;\n      border: 1px solid transparent;\n    }\n    .pizza-price {\n      margin: 0;\n      padding: 15px;\n      outline: 0;\n      width: 100%;\n      border-radius: 4px;\n      font-size: 20px;\n      font-weight: 600;\n      background: #f5f5f5;\n      border: 1px solid transparent;\n    }\n\n    .pizza-form__input.error {\n      border-radius: 4px 4px 0 0;\n      border-color: #b54846;\n    }\n\n    .pizza-form__list {\n      margin: -20px 0 0;\n    }\n\n    .pizza-form ::ng-deep pizza-display {\n      margin: 0 0 35px;\n    }\n\n    .pizza-form label {\n      margin: 0 0 35px;\n      display: block;\n    }\n\n    .pizza-form label h4 {\n      margin: 0 0 15px;\n    }\n\n    .pizza-form__error {\n      padding: 10px;\n      border-radius: 0 0 4px 4px;\n      display: flex;\n      align-items: center;\n      background: #aa141b;\n      color: #fff;\n    }\n\n    .pizza-form__error p {\n      font-size: 14px;\n      margin: 0;\n    }\n\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "selectedItemService",
                        "type": "SelectedItemService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 177,
                "jsdoctags": [
                    {
                        "name": "selectedItemService",
                        "type": "SelectedItemService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "_pizza": {
                    "name": "_pizza",
                    "setSignature": {
                        "name": "_pizza",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "pi",
                                "type": "Pizza",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 153,
                        "jsdoctags": [
                            {
                                "name": "pi",
                                "type": "Pizza",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "nameControl": {
                    "name": "nameControl",
                    "getSignature": {
                        "name": "nameControl",
                        "type": "",
                        "returnType": "",
                        "line": 232
                    }
                },
                "nameControlInvalid": {
                    "name": "nameControlInvalid",
                    "getSignature": {
                        "name": "nameControlInvalid",
                        "type": "",
                        "returnType": "",
                        "line": 236
                    }
                }
            }
        },
        {
            "name": "PizzaItemComponent",
            "id": "component-PizzaItemComponent-83be0097c7347c4d50ab0f0819997eb3b51a375d148ac1ad160fc5edd51bf7ebbc74adff654ab34b7b06b3cfd3c0d7de5cac99a5c4fcdce3627510c046d30926",
            "file": "src/app/components/pizza-item/pizza-item/pizza-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pizza-item",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"\" (click)=\"selected.emit($event)\">\n  <pizza-display\n    [toppings]=\"nToppings\">\n  </pizza-display>\n  <div class=\"flex justify-center\">\n    <div class=\"text-xl text-red-400\">{{ name }}:</div>\n    <div class=\"text-xl ml-2 text-green-900\"> {{ price }}</div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pizza",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "nToppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Topping[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output\n} from '@angular/core';\nimport {Topping} from \"../../../models\";\n\n@Component({\n  selector: 'pizza-item',\n  template: `\n    <div class=\"\" (click)=\"selected.emit($event)\">\n      <pizza-display\n        [toppings]=\"nToppings\">\n      </pizza-display>\n      <div class=\"flex justify-center\">\n        <div class=\"text-xl text-red-400\">{{ name }}:</div>\n        <div class=\"text-xl ml-2 text-green-900\"> {{ price }}</div>\n      </div>\n    </div>\n  `,\n  styles: [\n  ],\n   changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PizzaItemComponent implements OnInit {\n  name: string;\n  nToppings!: Topping[];\n  id: number;\n  price: string;\n  @Output() selected = new EventEmitter<any>();\n  @Input() set pizza(v: any) {\n    this.nToppings = v.toppings;\n    this.name = v.name;\n    this.id = v.id;\n    this.price = v.price\n    this.cdr.detectChanges();\n  }\n\n  constructor(private cdr: ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "pizza": {
                    "name": "pizza",
                    "setSignature": {
                        "name": "pizza",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 35,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "PizzaItemListComponent",
            "id": "component-PizzaItemListComponent-90deeb1b56727a4c345b366b186084715f395d34a17a5d8ebd8053f1b9ca461010e25f8d90bc2e00090e2464e7c06550542e78ed8a60518715c0d98c47d05aa0",
            "file": "src/app/components/pizza-item/pizza-item-list/pizza-item-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pizza-item-list",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"flex flex-wrap -m-1\">\n  <div class=\"xl:w-1/2 md:w-1/1 p-2\" *ngFor=\"let pizza of pizzas\"\n       [select_pizza]=\"pizza\"\n       [selectedPizza]=\"selectedPizza\"\n       (selectPizza)=\"onSelectPizza($event)\">\n    <pizza-item [pizza]=\"pizza\" (selected)=\"selected.emit(pizza)\"></pizza-item>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pizzas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "Pizza[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter<Pizza>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "selectedPizza",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectPizza",
                    "args": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Pizza} from \"../../../models\";\n\n@Component({\n  selector: 'pizza-item-list',\n  template: `\n    <div class=\"flex flex-wrap -m-1\">\n      <div class=\"xl:w-1/2 md:w-1/1 p-2\" *ngFor=\"let pizza of pizzas\"\n           [select_pizza]=\"pizza\"\n           [selectedPizza]=\"selectedPizza\"\n           (selectPizza)=\"onSelectPizza($event)\">\n        <pizza-item [pizza]=\"pizza\" (selected)=\"selected.emit(pizza)\"></pizza-item>\n      </div>\n    </div>\n  `,\n  styles: [\n  ]\n})\nexport class PizzaItemListComponent implements OnInit {\n  @Input() pizzas: Pizza[];\n  @Output() selected = new EventEmitter<Pizza>();\n  constructor() { }\n  selectedPizza: Pizza;\n  ngOnInit(): void {\n  }\n  onSelectPizza(ev: any) {\n    this.selectedPizza = ev;\n    // console.log('pizza-2', ev)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 21
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PizzaProductComponent",
            "id": "component-PizzaProductComponent-d450c2de8af2944d909e6133cc2a67c7ba0fad9d89849f8c7b34b927206c2c8202f174ad255f32801a58803e1b6e66d06a87e0af6c8dc21c68b26dc3c256875a",
            "file": "src/app/components/pizza-product/pizza-product.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pizza-product",
            "styleUrls": [],
            "styles": [],
            "template": "    <div class=\"products\">\n<!--\n      <div class=\"products__new\">\n        <button\n          style=\"cursor:pointer\"\n          class=\"btn btn__ok\"\n          routerLink=\"./new\">\n          New Pizza\n        </button>\n      </div>\n      <div class=\"products__list\">\n        <ng-container *ngIf=\"!pizzas.length\">\n          No pizzas, add one to get started (pizzas$ | async)\n        </ng-container>\n        <pizza-item *ngFor=\"let pizza of pizzas\"\n                    [pizza]=\"pizza\">\n        </pizza-item>\n      </div>\n-->\n    </div>`\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pizzas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "Pizza[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\nimport {Pizza} from \"../../models\";\n\n@Component({\n  selector: 'pizza-product',\n  template: `\n    <div class=\"products\">\n<!--\n      <div class=\"products__new\">\n        <button\n          style=\"cursor:pointer\"\n          class=\"btn btn__ok\"\n          routerLink=\"./new\">\n          New Pizza\n        </button>\n      </div>\n      <div class=\"products__list\">\n        <ng-container *ngIf=\"!pizzas.length\">\n          No pizzas, add one to get started (pizzas$ | async)\n        </ng-container>\n        <pizza-item *ngFor=\"let pizza of pizzas\"\n                    [pizza]=\"pizza\">\n        </pizza-item>\n      </div>\n-->\n    </div>\\`\n  `,\n  styles: [\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PizzaProductComponent implements OnInit {\n  @Input() pizzas: Pizza[];\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 33
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PizzaToppingsComponent",
            "id": "component-PizzaToppingsComponent-ea5d0e185c7c5a7297b5b6d9be7e31aa466b7abae0c95ed648b343d21b62d6e97dcca71b90b5b2a8048065b8d4f67574da2e5e596f25b217695e0f63bc968794",
            "file": "src/app/components/pizza-toppings/pizza-toppings.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "PIZZA_TOPPINGS_ACCESSOR"
                }
            ],
            "selector": "pizza-toppings",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: block;\n    }\n\n    .pizza-toppings {\n      display: flex;\n      justify-content: space-between;\n      flex-wrap: wrap;\n    }\n\n    .pizza-toppings-item {\n      position: relative;\n      display: flex;\n      align-items: center;\n      justify-content: left;\n      padding: 8px;\n      margin: 0 0 10px;\n      border-radius: 4px;\n      font-size: 15px;\n      font-family: 'cornerstone';\n      border: 1px solid grey;\n      flex: 0 0 23%;\n      transition: all 0.2s ease;\n      cursor: pointer;\n    }\n\n    .pizza-toppings-item div.topping_price {\n      position: absolute;\n      color: blue;\n      right: 10px;\n    }\n\n    .pizza-toppings-item.active {\n      background: #f5f5f5;\n    }\n\n    .pizza-toppings-item.active:after {\n      content: '';\n      border-radius: 50%;\n      background: #19b55f url('/src/assets/img/actions/checked.svg') no-repeat center center;\n      width: 16px;\n      height: 16px;\n      position: absolute;\n      top: -5px;\n      right: -5px;\n      background-size: 10px;\n    }\n\n    .pizza-toppings-item.fulled {\n      background: aqua;\n    }\n\n    .pizza-toppings-item img {\n      width: 22px;\n      margin: 0 10px 0 0;\n    }\n  "
            ],
            "template": "<div class=\"pizza-toppings\">\n  <ng-container *ngFor=\"let topping of toppings;\">\n    <div class=\"\">\n      <div class=\"w-40 min-w-full md:min-w-0\">\n        <div class=\"pizza-toppings-item\" (click)=\"addTopping(topping)\" style=\"text-align: justify-all\"\n             matBadge=\"{{displayToppingCount(topping)}}\" matBadgeColor=\"warn\">\n          <img src=\"assets/img/toppings/singles/{{ topping.name }}.svg\">\n          {{ topping.name }}\n          <div class=\"topping_price\">{{topping.price && topping.price * 1000}}원</div>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "toppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 113,
                    "type": "Topping[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 121,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 119,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "pizza",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza | undefined",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "pizza$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Pizza> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 126,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "PizzasState.SelectedPizza"
                        }
                    ]
                },
                {
                    "name": "pizzaId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "pizzas$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Pizza[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 127,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "PizzasState.pizzas"
                        }
                    ]
                },
                {
                    "name": "selectedToppings$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 128,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "ToppingsState.selectedToppings"
                        }
                    ]
                },
                {
                    "name": "topp",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Topping[]",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "unsubscribe",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "this.unsubscribe.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 125
                }
            ],
            "methodsClass": [
                {
                    "name": "addTopping",
                    "args": [
                        {
                            "name": "topping",
                            "type": "Topping",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n토핑을 추가하는 부분 토핑은 5회까지 만 선택하게 제한함",
                    "description": "<p>토핑을 추가하는 부분 토핑은 5회까지 만 선택하게 제한함</p>\n",
                    "jsdoctags": [
                        {
                            "name": "topping",
                            "type": "Topping",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayToppingCount",
                    "args": [
                        {
                            "name": "topping",
                            "type": "Topping",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDisplay count of selected toppings",
                    "description": "<p>Display count of selected toppings</p>\n",
                    "jsdoctags": [
                        {
                            "name": "topping",
                            "type": "Topping",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy, ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter, forwardRef,\r\n  Input, OnChanges, OnDestroy,\r\n  OnInit,\r\n  Output, SimpleChanges\r\n} from '@angular/core';\r\nimport {Pizza, Topping} from \"../../models\";\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {filter, skip, switchMap, take, takeLast, takeUntil, tap, toArray} from \"rxjs/operators\";\r\nimport {Select} from \"@ngxs/store\";\r\nimport {PizzasState, ToppingsState} from \"../../state\";\r\nimport {Observable, Subject, from} from \"rxjs\";\r\nimport {NG_VALUE_ACCESSOR} from \"@angular/forms\";\r\nimport {ToppingImageService} from \"../../services/topping-image.service\";\r\nconst PIZZA_TOPPINGS_ACCESSOR = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => PizzaToppingsComponent),\r\n  multi: true,\r\n};\r\n\r\n@Component({\r\n  selector: 'pizza-toppings',\r\n  template: `\r\n    <div class=\"pizza-toppings\">\r\n      <ng-container *ngFor=\"let topping of toppings;\">\r\n        <div class=\"\">\r\n          <div class=\"w-40 min-w-full md:min-w-0\">\r\n            <div class=\"pizza-toppings-item\" (click)=\"addTopping(topping)\" style=\"text-align: justify-all\"\r\n                 matBadge=\"{{displayToppingCount(topping)}}\" matBadgeColor=\"warn\">\r\n              <img src=\"assets/img/toppings/singles/{{ topping.name }}.svg\">\r\n              {{ topping.name }}\r\n              <div class=\"topping_price\">{{topping.price && topping.price * 1000}}원</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    .pizza-toppings {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      flex-wrap: wrap;\r\n    }\r\n\r\n    .pizza-toppings-item {\r\n      position: relative;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: left;\r\n      padding: 8px;\r\n      margin: 0 0 10px;\r\n      border-radius: 4px;\r\n      font-size: 15px;\r\n      font-family: 'cornerstone';\r\n      border: 1px solid grey;\r\n      flex: 0 0 23%;\r\n      transition: all 0.2s ease;\r\n      cursor: pointer;\r\n    }\r\n\r\n    .pizza-toppings-item div.topping_price {\r\n      position: absolute;\r\n      color: blue;\r\n      right: 10px;\r\n    }\r\n\r\n    .pizza-toppings-item.active {\r\n      background: #f5f5f5;\r\n    }\r\n\r\n    .pizza-toppings-item.active:after {\r\n      content: '';\r\n      border-radius: 50%;\r\n      background: #19b55f url('/src/assets/img/actions/checked.svg') no-repeat center center;\r\n      width: 16px;\r\n      height: 16px;\r\n      position: absolute;\r\n      top: -5px;\r\n      right: -5px;\r\n      background-size: 10px;\r\n    }\r\n\r\n    .pizza-toppings-item.fulled {\r\n      background: aqua;\r\n    }\r\n\r\n    .pizza-toppings-item img {\r\n      width: 22px;\r\n      margin: 0 10px 0 0;\r\n    }\r\n  `],\r\n  providers: [PIZZA_TOPPINGS_ACCESSOR],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PizzaToppingsComponent implements OnInit, OnDestroy {\r\n  @Input() toppings: Topping[];\r\n  // @Select(PizzasState.pizzas) pizza$: Observable<Pizza>;\r\n\r\n  topp: Topping[] = [];\r\n  pizzaId: number | undefined;\r\n  pizza: Pizza | undefined;\r\n  private onTouch: Function = ()=>{};\r\n  // private onTouch: Function;\r\n  private _onChange: Function = ()=>{};\r\n  // price:string;\r\n  // snackBar: MatSnackBar;\r\n  unsubscribe = new Subject();\r\n  unsubscribe$ = this.unsubscribe.asObservable();\r\n  @Select(PizzasState.SelectedPizza) pizza$: Observable<Pizza> | undefined;\r\n  @Select(PizzasState.pizzas) pizzas$: Observable<Pizza[]> | undefined;\r\n  @Select(ToppingsState.selectedToppings ) selectedToppings$: Observable<any[]> | undefined;\r\n\r\n  constructor( // private store: Store,\r\n               private toppingImages: ToppingImageService,\r\n               // private snackBar: MatSnackBar,\r\n               private ref: ChangeDetectorRef) {}\r\n  ngOnInit(): void {\r\n    /**\r\n     * Save the result of selected toppings\r\n     * */\r\n    this.selectedToppings$.pipe(\r\n      filter(val => !!val ),\r\n      tap(val => {\r\n        this.topp = val;\r\n        this.ref.markForCheck();\r\n      })\r\n    ).subscribe();\r\n\r\n  }\r\n  registerOnChange(fn: (_:any)=> void) {\r\n    this._onChange = fn;\r\n  }\r\n  registerOnTouched(fn: (_:any) => void) {\r\n    this.onTouch = fn;\r\n  }\r\n  writeValue(value: any) {\r\n    this.topp = value;\r\n  }\r\n\r\n  /** 토핑을 추가하는 부분 토핑은 5회까지 만 선택하게 제한함 */\r\n  addTopping(topping: Topping) {\r\n    let count = this.topp.filter( val=> val.id === topping.id);\r\n    if( count.length >= 5) { // addTopping add each topping util each count 5\r\n      // this.snackBar.open(\"Limited to 5 toppings level\", 'Check!!', {duration:3000});\r\n      return;\r\n    }\r\n    this.topp = [...this.topp, topping];\r\n    // this.writeValue(this.value)\r\n    /** Parent component로 데이터를 전달하는 부분 */\r\n    this._onChange(this.topp);\r\n\r\n  }\r\n  /** Display count of selected toppings */\r\n  displayToppingCount(topping: Topping): number{\r\n    let count = Array.from(this.topp).filter( val=> val.id === topping.id);\r\n    const ret = count.length === 0 ? null : count.length;\r\n    return ret;\r\n  }\r\n  ngOnDestroy() {\r\n    if( this.unsubscribe.next) {\r\n      this.unsubscribe.next({});\r\n      this.unsubscribe.complete();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: block;\n    }\n\n    .pizza-toppings {\n      display: flex;\n      justify-content: space-between;\n      flex-wrap: wrap;\n    }\n\n    .pizza-toppings-item {\n      position: relative;\n      display: flex;\n      align-items: center;\n      justify-content: left;\n      padding: 8px;\n      margin: 0 0 10px;\n      border-radius: 4px;\n      font-size: 15px;\n      font-family: 'cornerstone';\n      border: 1px solid grey;\n      flex: 0 0 23%;\n      transition: all 0.2s ease;\n      cursor: pointer;\n    }\n\n    .pizza-toppings-item div.topping_price {\n      position: absolute;\n      color: blue;\n      right: 10px;\n    }\n\n    .pizza-toppings-item.active {\n      background: #f5f5f5;\n    }\n\n    .pizza-toppings-item.active:after {\n      content: '';\n      border-radius: 50%;\n      background: #19b55f url('/src/assets/img/actions/checked.svg') no-repeat center center;\n      width: 16px;\n      height: 16px;\n      position: absolute;\n      top: -5px;\n      right: -5px;\n      background-size: 10px;\n    }\n\n    .pizza-toppings-item.fulled {\n      background: aqua;\n    }\n\n    .pizza-toppings-item img {\n      width: 22px;\n      margin: 0 10px 0 0;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toppingImages",
                        "type": "ToppingImageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 128,
                "jsdoctags": [
                    {
                        "name": "toppingImages",
                        "type": "ToppingImageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "SelectedToppingItemComponent",
            "id": "component-SelectedToppingItemComponent-3373abbcab01f012aa6a88308eb5b737d5eacddd89eb03b45c32dceb1f263cf2cf5d012c9ec729c04567b50c0d68cfc520a456fbb2bdebc450b9d3ee1349cf3f",
            "file": "src/app/components/selected-toppings/selected-topping-item/selected-topping-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "selected-topping-item",
            "styleUrls": [],
            "styles": [
                "\n    .selected-toppings-item {\n      position: relative;\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      padding: 2px;\n      min-width: 100px;\n      border-radius: 4px;\n      font-size: 12px;\n      margin: 3px;\n      font-family: 'cornerstone';\n      border: 1px solid grey;\n      flex: 0 0 23%;\n      transition: all 0.2s ease;\n      cursor: pointer;\n    }\n\n    .selected-toppings-item.active {\n      background: #f5f5f5;\n    }\n\n    .selected-toppings-item img {\n      width: 22px;\n      margin: 0 10px 0 0;\n    }\n  "
            ],
            "template": "<div class=\"selected-toppings-item hover:bg-red-100\" (click)=\"remove.emit(topping)\">\n  <div class=\"h-auto\"  href=\"#\">\n    <img src=\"assets/img/toppings/singles/{{ topping.name }}.svg\"></div>\n    <div class=\"mr-1\">{{topping.name}}</div>\n  <div class=\"text-red-900\">{{topping.count}}</div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "topping",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "Topping",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "remove",
                    "defaultValue": "new EventEmitter<Topping>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Topping} from \"../../../models\";\n\n@Component({\n  selector: 'selected-topping-item',\n  template: `\n    <div class=\"selected-toppings-item hover:bg-red-100\" (click)=\"remove.emit(topping)\">\n      <div class=\"h-auto\"  href=\"#\">\n        <img src=\"assets/img/toppings/singles/{{ topping.name }}.svg\"></div>\n        <div class=\"mr-1\">{{topping.name}}</div>\n      <div class=\"text-red-900\">{{topping.count}}</div>\n    </div>\n  `,\n  styles: [`\n    .selected-toppings-item {\n      position: relative;\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      padding: 2px;\n      min-width: 100px;\n      border-radius: 4px;\n      font-size: 12px;\n      margin: 3px;\n      font-family: 'cornerstone';\n      border: 1px solid grey;\n      flex: 0 0 23%;\n      transition: all 0.2s ease;\n      cursor: pointer;\n    }\n\n    .selected-toppings-item.active {\n      background: #f5f5f5;\n    }\n\n    .selected-toppings-item img {\n      width: 22px;\n      margin: 0 10px 0 0;\n    }\n  `\n  ]\n})\nexport class SelectedToppingItemComponent implements OnInit {\n  @Input() topping: Topping;\n  @Output() remove = new EventEmitter<Topping>();\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .selected-toppings-item {\n      position: relative;\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      padding: 2px;\n      min-width: 100px;\n      border-radius: 4px;\n      font-size: 12px;\n      margin: 3px;\n      font-family: 'cornerstone';\n      border: 1px solid grey;\n      flex: 0 0 23%;\n      transition: all 0.2s ease;\n      cursor: pointer;\n    }\n\n    .selected-toppings-item.active {\n      background: #f5f5f5;\n    }\n\n    .selected-toppings-item img {\n      width: 22px;\n      margin: 0 10px 0 0;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SelectedToppingListComponent",
            "id": "component-SelectedToppingListComponent-fc77125d7de7e233a37b2549a1be80cc61faed887a1355390b7d7927615c5467ed30330721cc77f67ad0a03edbf677e6fb8050fd405cff31786efaf95c3c64ab",
            "file": "src/app/components/selected-toppings/selected-topping-list/selected-topping-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "selected-topping-list",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"flex flex-wrap\" >\n  <ng-container>\n    <ng-container *ngFor=\"let topping of rawToppings\">\n      <selected-topping-item\n        (remove)=\"onRemove($event)\"\n        [topping]=\"topping\">\n      </selected-topping-item>\n    </ng-container>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "toppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "Topping[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "nToppings",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "pizza",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pizza",
                    "optional": true,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Inject",
                            "stringifiedArguments": "undefined"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "rawToppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Topping[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "selectedToppings$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Topping[]>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "ToppingsState.selectedToppings"
                        }
                    ]
                },
                {
                    "name": "unsubscribe",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "this.unsubscribe.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRemove",
                    "args": [
                        {
                            "name": "topping",
                            "type": "Topping",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "topping",
                            "type": "Topping",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component, forwardRef, Host,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional\n} from '@angular/core';\nimport {Pizza, Topping} from \"../../../models\";\nimport {ToppingsState, UpdateToppingsSuccess} from \"../../../state\";\nimport {filter, skip, take, takeUntil, tap} from \"rxjs/operators\";\nimport {PriceService} from \"../../../services/price.service\";\nimport {PIZZA_CONFIG_TOKEN} from \"../../../services/selected-item.service\";\nimport {Select, Store} from \"@ngxs/store\";\nimport {Observable, Subject} from \"rxjs\";\nimport {ToppingAddedService} from \"../../../services/topping-added.service\";\n\n@Component({\n  selector: 'selected-topping-list',\n  template: `\n    <div class=\"flex flex-wrap\" >\n      <ng-container>\n        <ng-container *ngFor=\"let topping of rawToppings\">\n          <selected-topping-item\n            (remove)=\"onRemove($event)\"\n            [topping]=\"topping\">\n          </selected-topping-item>\n        </ng-container>\n      </ng-container>\n    </div>\n  `,\n  styles: [],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectedToppingListComponent implements OnInit, OnDestroy {\n  @Input() toppings: Topping[];\n  nToppings: any[] = [];\n  rawToppings: Topping[];\n  unsubscribe = new Subject();\n  unsubscribe$ = this.unsubscribe.asObservable();\n  // @Input() toppings: Topping[];\n\n  @Select(ToppingsState.selectedToppings) selectedToppings$: Observable<Topping[]>;\n  constructor(\n    private store: Store,\n    private priceService: PriceService,\n    private topping_added: ToppingAddedService,\n    private cdr: ChangeDetectorRef,\n    @Optional() @Inject(forwardRef(() => PIZZA_CONFIG_TOKEN)) public pizza?: Pizza,\n  ) { }\n\n  ngOnInit(): void {\n    this.toppings = this.pizza? this.pizza.toppings : this.toppings; // Initial Value\n    /** To sync with current topping list, */\n    this.store.dispatch( new UpdateToppingsSuccess(this.toppings));\n    //\n    this.selectedToppings$.pipe(\n      filter(val => !!val ),\n      tap((topp: any[]) => {\n        this.nToppings = [];\n        /** Important!!!\n         DB와 연결되어 있지 않고, ngxs를 사용하므로, 선택된 토핑 결과를 전달하기 위한 데이터 배열 */\n        topp.map( (val: any) => this.nToppings.push(val));\n\n        if( topp.length === 0) {\n          this.rawToppings = [];\n          this.cdr.markForCheck();\n        }\n        /**\n         * Calculate total price, extract toppings that has the same toppings and\n         * count if there are multiple same toppings\n         * */\n        this.priceService.calcSubTotalToppings(topp).pipe(takeUntil(this.unsubscribe$))\n          .subscribe((val:any) => {\n            // console.log('remove toppings - 2',topp);\n            this.rawToppings = val\n            this.cdr.markForCheck();\n          });\n        //\n      }),\n      takeUntil(this.unsubscribe$)\n    ).subscribe();\n\n  }\n  onRemove(topping: Topping) {\n    let idx = this.nToppings.findIndex( (value: any) => value.id === topping.id);\n    this.nToppings.splice(idx,1);\n    this.store.dispatch(new UpdateToppingsSuccess(this.nToppings));\n    this.cdr.markForCheck();\n  }\n  ngOnDestroy() {\n    if( this.unsubscribe.next) {\n      this.unsubscribe.next({});\n      this.unsubscribe.complete();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "priceService",
                        "type": "PriceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "topping_added",
                        "type": "ToppingAddedService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pizza",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "priceService",
                        "type": "PriceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "topping_added",
                        "type": "ToppingAddedService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pizza",
                        "type": "Pizza",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        }
    ],
    "modules": [
        {
            "name": "AngularMaterialModule",
            "id": "module-AngularMaterialModule-a1d048c0175bf59e8253cb48e711c314e759e397e007f3ab82f5a89a8c2f7431233a064ac63395b15d9ed450b61ce4763c7228e49f45dadd122cbde9f3a900f1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/angular-material.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\r\nimport {MatSnackBarModule} from \"@angular/material/snack-bar\";\r\nimport {CommonModule} from \"@angular/common\";\r\nimport {MatBadgeModule} from \"@angular/material/badge\";\r\nimport {MatButtonModule} from \"@angular/material/button\";\r\nconst modules = [\r\n  MatSnackBarModule,\r\n  MatBadgeModule,\r\n  MatButtonModule,\r\n]\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    ...modules\r\n  ],\r\n  exports: [...modules]\r\n})\r\nexport class AngularMaterialModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-b164f198907930fa19662e9cc7e68f0b25cb5fa7d665b687036e2b93d6ac3a204d8dc96971ffc87d2a661060530218a10fcab81a59dd4df6ae595aa6d4456cb4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport {PizzaModule} from \"./components/pizza.module\";\nimport {MatSnackBarModule} from \"@angular/material/snack-bar\";\nimport {NgxsModule} from \"@ngxs/store\";\nimport {AngularMaterialModule} from \"./shared/angular-material.module\";\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    PizzaModule,\n    AngularMaterialModule,\n    NgxsModule.forRoot([]),\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AngularMaterialModule"
                        },
                        {
                            "name": "PizzaModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-e141f604138cd6d45a3fb2ba908f6710a18b674c0b8139025c1057f399b306f681249409aebfbcaaa5e26f66b5bf003be99025e56c7c4102c14985e7e856d521",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.routing.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\r\nimport {RouterModule, Routes} from \"@angular/router\";\r\nexport const routes: Routes = [\r\n  { path: '', redirectTo: 'products', pathMatch: 'full' },\r\n  {\r\n    path: 'products',\r\n    loadChildren: () => \"import(\\\"./components/pizza.module\\\").then( m=> m.PizzaModule)\"\r\n  }\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule{}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PizzaModule",
            "id": "module-PizzaModule-0fb4cd18040267ef67f6cf5abd56a32dd4d3fa117ddbe00237701458a0857e9331a2f89b47853a83caf6338d42652bd5829ccee8ee8c0e12fd86b908c9d6513c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/pizza.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {PizzaDisplayComponent} from \"./pizza-display/pizza-display.component\";\nimport {PizzaToppingsComponent} from \"./pizza-toppings/pizza-toppings.component\";\nimport {AngularMaterialModule} from \"../shared/angular-material.module\";\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\nimport { PizzaFormComponent } from './pizza-form/pizza-form.component';\nimport { ButtonsComponent } from './pizza-form/buttons/buttons.component';\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport { MainPanelComponent } from './main-panel/main-panel.component';\nimport { PizzaProductComponent } from './pizza-product/pizza-product.component';\nimport { PizzaItemComponent } from './pizza-item/pizza-item/pizza-item.component';\nimport { PizzaItemListComponent } from './pizza-item/pizza-item-list/pizza-item-list.component';\nimport { SelectedToppingListComponent } from './selected-toppings/selected-topping-list/selected-topping-list.component';\nimport { SelectedToppingItemComponent } from './selected-toppings/selected-topping-item/selected-topping-item.component';\nimport {NgxsModule} from \"@ngxs/store\";\nimport {PizzasState, SelectPizza, ToppingsState} from \"../state\";\nimport {HttpClientModule} from \"@angular/common/http\";\nimport {SelectPizzaDirective} from \"./directives/select-pizza.directive\";\nimport {MatBadgeModule} from \"@angular/material/badge\";\n@NgModule({\n  declarations: [\n    PizzaDisplayComponent,\n    PizzaToppingsComponent,\n    PizzaFormComponent,\n    ButtonsComponent,\n    MainPanelComponent,\n    PizzaProductComponent,\n    PizzaItemComponent,\n    PizzaItemListComponent,\n    SelectedToppingListComponent,\n    SelectedToppingItemComponent,\n    SelectPizzaDirective\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    BrowserAnimationsModule,\n    NgxsModule.forRoot([]),\n    NgxsModule.forFeature([ToppingsState, PizzasState]),\n    HttpClientModule,\n    AngularMaterialModule\n  ],\n  exports: [\n    PizzaDisplayComponent,\n    PizzaToppingsComponent,\n    PizzaFormComponent,\n    ButtonsComponent,\n    MainPanelComponent,\n    PizzaProductComponent,\n    PizzaItemComponent,\n    PizzaItemListComponent,\n    SelectedToppingListComponent,\n    SelectedToppingItemComponent,\n  ]\n})\nexport class PizzaModule{}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonsComponent"
                        },
                        {
                            "name": "MainPanelComponent"
                        },
                        {
                            "name": "PizzaDisplayComponent"
                        },
                        {
                            "name": "PizzaFormComponent"
                        },
                        {
                            "name": "PizzaItemComponent"
                        },
                        {
                            "name": "PizzaItemListComponent"
                        },
                        {
                            "name": "PizzaProductComponent"
                        },
                        {
                            "name": "PizzaToppingsComponent"
                        },
                        {
                            "name": "SelectPizzaDirective"
                        },
                        {
                            "name": "SelectedToppingItemComponent"
                        },
                        {
                            "name": "SelectedToppingListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AngularMaterialModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonsComponent"
                        },
                        {
                            "name": "MainPanelComponent"
                        },
                        {
                            "name": "PizzaDisplayComponent"
                        },
                        {
                            "name": "PizzaFormComponent"
                        },
                        {
                            "name": "PizzaItemComponent"
                        },
                        {
                            "name": "PizzaItemListComponent"
                        },
                        {
                            "name": "PizzaProductComponent"
                        },
                        {
                            "name": "PizzaToppingsComponent"
                        },
                        {
                            "name": "SelectedToppingItemComponent"
                        },
                        {
                            "name": "SelectedToppingListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DROP_ANIMATION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-display/pizza-display.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger(\"drop\", [\r\n  transition(\":enter\", [\r\n    style({transform: \"translateY(-200px)\", opacity: 0}),\r\n    animate(\r\n      \"300ms cubic-bezier(1.000, 0.000, 0.000, 1.000)\",\r\n      style({transform: \"translateY(0)\", opacity: 1})\r\n    )\r\n  ]),\r\n  transition(\":leave\", [\r\n    style({transform: \"translateY(0)\", opacity: 1}),\r\n    animate(\r\n      \"200ms cubic-bezier(1.000, 0.000, 0.000, 1.000)\",\r\n      style({transform: \"translateY(-200px)\", opacity: 0})\r\n    )\r\n  ])\r\n])"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "modules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/angular-material.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  MatSnackBarModule,\r\n  MatBadgeModule,\r\n  MatButtonModule,\r\n]"
            },
            {
                "name": "PIZZA_CONFIG_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/helpMessage.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<Message>('PIZZA_CONFIG_TOKEN')"
            },
            {
                "name": "PIZZA_CONFIG_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/selected-item.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<Pizza>('PIZZA_CONFIG_TOKEN')"
            },
            {
                "name": "PIZZA_TOPPINGS_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-toppings/pizza-toppings.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => PizzaToppingsComponent),\r\n  multi: true,\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/main-panel/main-panel.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-display/pizza-display.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-form/pizza-form.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-toppings/pizza-toppings.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-form/buttons/buttons.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-item/pizza-item/pizza-item.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-item/pizza-item-list/pizza-item-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/selected-toppings/selected-topping-item/selected-topping-item.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/selected-toppings/selected-topping-list/selected-topping-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ProductsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[PizzasState, ToppingsState]"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "services",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[PizzasService, ToppingsService]"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/main-panel/main-panel.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `\r\n    <main-panel>\r\n    </main-panel>\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-display/pizza-display.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `<pizza-display [toppings]=\"toppings\"></pizza-display>`\r\n\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-form/pizza-form.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    addToppings: action('selectedToppings'),\r\n    onCreate: action('create'),\r\n    onUpdate: action('update'),\r\n    onRemove: action('remove')\r\n  },\r\n  template: `\r\n  <pizza-form\r\n            [_pizza]=\"pizza\"\r\n            [toppings]=\"nToppings\"\r\n            (addToppings)=\"addToppings($event)\"\r\n            (create)=\"onCreate($event)\"\r\n            (update)=\"onUpdate($event)\"\r\n            (remove)=\"onRemove($event)\">\r\n        <pizza-display\r\n                [toppings]=\"pizza.toppings\">\r\n        </pizza-display>\r\n  </pizza-form>\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-toppings/pizza-toppings.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onSelect: action('selected')\r\n  },\r\n  decorators:[\r\n    moduleMetadata({\r\n      imports:[\r\n        PizzaModule,\r\n      ],\r\n    })\r\n  ],\r\n  template: ` <pizza-toppings [toppings]=\"toppings\"\r\n                                (selected)=\"onSelect($event)\"\r\n                ></pizza-toppings>\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-form/buttons/buttons.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onCreate: action('create'),\r\n    onUpdate: action('update'),\r\n    onRemove: action('remove')\r\n  },\r\n  template: `\r\n    <app-buttons\r\n        [exists]=\"exists\"\r\n        [form]=\"form\"\r\n        [pizza]=\"pizza\"\r\n        (create)=\"onCreate()\"\r\n        (update)=\"onUpdate()\"\r\n        (remove)=\"onRemove()\"\r\n    ></app-buttons>\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-item/pizza-item/pizza-item.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) =>({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `\r\n    <pizza-item [pizza]=\"pizza\"></pizza-item>\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-item/pizza-item-list/pizza-item-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onSelected: action('selected')\r\n  },\r\n  template: `\r\n    <pizza-item-list [pizzas]=\"pizzas\"\r\n        (selected)=\"onSelected($event)\">\r\n    </pizza-item-list>\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/selected-toppings/selected-topping-item/selected-topping-item.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `\r\n    <div class=\"flex justify-items-start\">\r\n      <selected-topping-item\r\n          [topping]=\"topping\">\r\n      </selected-topping-item>\r\n    </div>\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/selected-toppings/selected-topping-list/selected-topping-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `\r\n    <div class=\"flex justify-items-start\">\r\n      <selected-topping-list\r\n          [toppings]=\"toppings\">\r\n      </selected-topping-list>\r\n    </div>\r\n  `\r\n})"
            },
            {
                "name": "uniqueId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pizza-form/pizza-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(function(){ let id=10; return function(){ return id++;} })()"
            }
        ],
        "functions": [
            {
                "name": "calcuretePrice",
                "file": "src/app/components/pizza-form/pizza-form.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/components/pizza-display/pizza-display.component.ts": [
                {
                    "name": "DROP_ANIMATION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-display/pizza-display.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger(\"drop\", [\r\n  transition(\":enter\", [\r\n    style({transform: \"translateY(-200px)\", opacity: 0}),\r\n    animate(\r\n      \"300ms cubic-bezier(1.000, 0.000, 0.000, 1.000)\",\r\n      style({transform: \"translateY(0)\", opacity: 1})\r\n    )\r\n  ]),\r\n  transition(\":leave\", [\r\n    style({transform: \"translateY(0)\", opacity: 1}),\r\n    animate(\r\n      \"200ms cubic-bezier(1.000, 0.000, 0.000, 1.000)\",\r\n      style({transform: \"translateY(-200px)\", opacity: 0})\r\n    )\r\n  ])\r\n])"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/shared/angular-material.module.ts": [
                {
                    "name": "modules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/angular-material.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  MatSnackBarModule,\r\n  MatBadgeModule,\r\n  MatButtonModule,\r\n]"
                }
            ],
            "src/app/services/helpMessage.ts": [
                {
                    "name": "PIZZA_CONFIG_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/helpMessage.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<Message>('PIZZA_CONFIG_TOKEN')"
                }
            ],
            "src/app/services/selected-item.service.ts": [
                {
                    "name": "PIZZA_CONFIG_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/selected-item.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<Pizza>('PIZZA_CONFIG_TOKEN')"
                }
            ],
            "src/app/components/pizza-toppings/pizza-toppings.component.ts": [
                {
                    "name": "PIZZA_TOPPINGS_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-toppings/pizza-toppings.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => PizzaToppingsComponent),\r\n  multi: true,\r\n}"
                }
            ],
            "src/app/components/main-panel/main-panel.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/main-panel/main-panel.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/main-panel/main-panel.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `\r\n    <main-panel>\r\n    </main-panel>\r\n  `\r\n})"
                }
            ],
            "src/app/components/pizza-display/pizza-display.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-display/pizza-display.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-display/pizza-display.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `<pizza-display [toppings]=\"toppings\"></pizza-display>`\r\n\r\n})"
                }
            ],
            "src/app/components/pizza-form/pizza-form.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-form/pizza-form.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-form/pizza-form.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    addToppings: action('selectedToppings'),\r\n    onCreate: action('create'),\r\n    onUpdate: action('update'),\r\n    onRemove: action('remove')\r\n  },\r\n  template: `\r\n  <pizza-form\r\n            [_pizza]=\"pizza\"\r\n            [toppings]=\"nToppings\"\r\n            (addToppings)=\"addToppings($event)\"\r\n            (create)=\"onCreate($event)\"\r\n            (update)=\"onUpdate($event)\"\r\n            (remove)=\"onRemove($event)\">\r\n        <pizza-display\r\n                [toppings]=\"pizza.toppings\">\r\n        </pizza-display>\r\n  </pizza-form>\r\n  `\r\n})"
                }
            ],
            "src/app/components/pizza-toppings/pizza-toppings.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-toppings/pizza-toppings.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-toppings/pizza-toppings.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onSelect: action('selected')\r\n  },\r\n  decorators:[\r\n    moduleMetadata({\r\n      imports:[\r\n        PizzaModule,\r\n      ],\r\n    })\r\n  ],\r\n  template: ` <pizza-toppings [toppings]=\"toppings\"\r\n                                (selected)=\"onSelect($event)\"\r\n                ></pizza-toppings>\r\n  `\r\n})"
                }
            ],
            "src/app/components/pizza-form/buttons/buttons.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-form/buttons/buttons.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-form/buttons/buttons.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onCreate: action('create'),\r\n    onUpdate: action('update'),\r\n    onRemove: action('remove')\r\n  },\r\n  template: `\r\n    <app-buttons\r\n        [exists]=\"exists\"\r\n        [form]=\"form\"\r\n        [pizza]=\"pizza\"\r\n        (create)=\"onCreate()\"\r\n        (update)=\"onUpdate()\"\r\n        (remove)=\"onRemove()\"\r\n    ></app-buttons>\r\n  `\r\n})"
                }
            ],
            "src/app/components/pizza-item/pizza-item/pizza-item.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-item/pizza-item/pizza-item.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-item/pizza-item/pizza-item.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) =>({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `\r\n    <pizza-item [pizza]=\"pizza\"></pizza-item>\r\n  `\r\n})"
                }
            ],
            "src/app/components/pizza-item/pizza-item-list/pizza-item-list.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-item/pizza-item-list/pizza-item-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-item/pizza-item-list/pizza-item-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onSelected: action('selected')\r\n  },\r\n  template: `\r\n    <pizza-item-list [pizzas]=\"pizzas\"\r\n        (selected)=\"onSelected($event)\">\r\n    </pizza-item-list>\r\n  `\r\n})"
                }
            ],
            "src/app/components/selected-toppings/selected-topping-item/selected-topping-item.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/selected-toppings/selected-topping-item/selected-topping-item.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/selected-toppings/selected-topping-item/selected-topping-item.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `\r\n    <div class=\"flex justify-items-start\">\r\n      <selected-topping-item\r\n          [topping]=\"topping\">\r\n      </selected-topping-item>\r\n    </div>\r\n  `\r\n})"
                }
            ],
            "src/app/components/selected-toppings/selected-topping-list/selected-topping-list.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/selected-toppings/selected-topping-list/selected-topping-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/selected-toppings/selected-topping-list/selected-topping-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args\r\n  },\r\n  template: `\r\n    <div class=\"flex justify-items-start\">\r\n      <selected-topping-list\r\n          [toppings]=\"toppings\">\r\n      </selected-topping-list>\r\n    </div>\r\n  `\r\n})"
                }
            ],
            "src/app/state/index.ts": [
                {
                    "name": "ProductsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[PizzasState, ToppingsState]"
                }
            ],
            "src/app/services/index.ts": [
                {
                    "name": "services",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[PizzasService, ToppingsService]"
                }
            ],
            "src/app/components/pizza-form/pizza-form.component.ts": [
                {
                    "name": "uniqueId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pizza-form/pizza-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(function(){ let id=10; return function(){ return id++;} })()"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/components/pizza-form/pizza-form.component.ts": [
                {
                    "name": "calcuretePrice",
                    "file": "src/app/components/pizza-form/pizza-form.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/directives/select-pizza.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SelectPizzaDirective",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main-panel/main-panel.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main-panel/main-panel.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main-panel/main-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-display/pizza-display.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-display/pizza-display.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-display/pizza-display.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PizzaDisplayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-display/pizza-display.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DROP_ANIMATION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-form/buttons/buttons.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-form/buttons/buttons.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-form/buttons/buttons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-form/pizza-form.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-form/pizza-form.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-form/pizza-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PizzaFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-form/pizza-form.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "calcuretePrice",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-form/pizza-form.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uniqueId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-item/pizza-item-list/pizza-item-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-item/pizza-item-list/pizza-item-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-item/pizza-item-list/pizza-item-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PizzaItemListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-item/pizza-item/pizza-item.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-item/pizza-item/pizza-item.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-item/pizza-item/pizza-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PizzaItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-product/pizza-product.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PizzaProductComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-toppings/pizza-toppings.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-toppings/pizza-toppings.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-toppings/pizza-toppings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PizzaToppingsComponent",
                "coveragePercent": 10,
                "coverageCount": "2/20",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pizza-toppings/pizza-toppings.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PIZZA_TOPPINGS_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selected-toppings/selected-topping-item/selected-topping-item.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selected-toppings/selected-topping-item/selected-topping-item.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selected-toppings/selected-topping-item/selected-topping-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectedToppingItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selected-toppings/selected-topping-list/selected-topping-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selected-toppings/selected-topping-list/selected-topping-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selected-toppings/selected-topping-list/selected-topping-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectedToppingListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/models/pizza.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Pizza",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/topping.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SequenceTopping",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/topping.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Topping",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/help-message.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HelpMessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/helpMessage.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Message",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/helpMessage.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HelpMessageService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/helpMessage.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PIZZA_CONFIG_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "services",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/pizzas.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PizzasService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/price.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PriceService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/selected-item.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SelectedItemService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/selected-item.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PIZZA_CONFIG_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/topping-added.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToppingAddedService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/topping-image.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToppingImageService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/topping-total.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToppingTotalService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/toppings.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToppingsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/angular-material.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ProductsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreatePizza",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreatePizzaFail",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreatePizzaSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadPizzas",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadPizzasFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadPizzasSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RemovePizza",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RemovePizzaFail",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RemovePizzaSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectPizza",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdatePizza",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdatePizzaFail",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdatePizzaSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Pizzac",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PizzasState",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/state/pizzas.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PizzasStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/toppings.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadToppings",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/toppings.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadToppingsFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/toppings.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadToppingsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/toppings.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateToppings",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/toppings.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateToppingsFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/toppings.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateToppingsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/toppings.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "VisualiseToppings",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/toppings.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToppingsState",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/state/toppings.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ToppingsStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}